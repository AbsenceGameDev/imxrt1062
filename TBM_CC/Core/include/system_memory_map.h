#ifndef SYSTEM_MEMORY_MAP_H
#define SYSTEM_MEMORY_MAP_H

#include "registers.h"

#include <stdint.h>

#define HAB_API_VTABLE 0x0020_0300 // HAB API vector table addresses

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV12_E 0xFFFFFFFF // 511MB
#define SYSMEM_RESRV12_S 0xE0100000

// CM7 PPB
#define SYSMEM_CM7_PPB_E 0xE00FFFFF // 1MB
#define SYSMEM_CM7_PPB_S 0xE0000000

// SEMC SEMC ext. memories in shared mem. space (SDRAM NOR PSRAM NAN 8080)
#define SYSMEM_SEMC_SHARED_E 0xDFFFFFFF // 1.5GB
#define SYSMEM_SEMC_SHARED_S 0x80000000

// FLEX_SPI ADDRESSES (RECEPTION)
#define SYSMEM_FLEXSPI_RX_FIFO_E 0x7FFFFFFF // 4BM
#define SYSMEM_FLEXSPI_RX_FIFO_S 0x7FC00000
// TRANSMISSION
#define SYSMEM_FLEXSPI_TX_FIFO_E 0x7FBFFFFF // 4BM
#define SYSMEM_FLEXSPI_TX_FIFO_S 0x7F800000

// FLEX_SPI2 ADDRESSES (RECEPTION)
#define SYSMEM_FLEXSPI2_RX_FIFO_E 0x7F7FFFFF // 4BM
#define SYSMEM_FLEXSPI2_RX_FIFO_S 0x7F400000
// TRANSMISSION
#define SYSMEM_FLEXSPI2_TX_FIFO_E 0x7F3FFFFF // 4BM
#define SYSMEM_FLEXSPI2_TX_FIFO_S 0x7F000000

// FLEX_SPI2/ FLEXSPI2 CIPHERTEXT
#define SYSMEM_FLEXSPI2_CIPH_E 0x7EFFFFFF // 240MB
#define SYSMEM_FLEXSPI2_CIPH_S 0x70000000

// FLEX_SPI/ FLEXSPI CIPHERTEXT
#define SYSMEM_FLEXSPI_CIPH_E 0x6FFFFFFF // 256MB
#define SYSMEM_FLEXSPI_CIPH_S 0x60000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV11_E 0x5FFFFFFF // 384MB
#define SYSMEM_RESRV11_S 0x48000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV10_E 0x47FFFFFF // 64MB
#define SYSMEM_RESRV10_S 0x44000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV09_E 0x43FFFFFF // 31MB
#define SYSMEM_RESRV09_S 0x42100000

// AIPS-5
#define SYSMEM_AIPS5_E 0x420FFFFF // 1MB
#define SYSMEM_AIPS5_S 0x42000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV08_E 0x41FFFFFF // 8MB %%%%%%%%%
#define SYSMEM_RESRV08_S 0x41800000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV02_E 0x417FFFFF // 1MB
#define SYSMEM_GPV_RESRV02_S 0x41700000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV01_E 0x416FFFFF // 1MB
#define SYSMEM_GPV_RESRV01_S 0x41600000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV00_E 0x415FFFFF // 1MB
#define SYSMEM_GPV_RESRV00_S 0x41500000

// *CPU* CONFIG PORT
#define SYSMEM_CPU_CONF_PORT_E 0x414FFFFF // 1MB
#define SYSMEM_CPU_CONF_PORT_S 0x41400000

// "EMS" GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_EMS_RESRV_E 0x413FFFFF // 1MB
#define SYSMEM_EMS_RESRV_S 0x41300000

// "PER" GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_PER_RESRV_E 0x412FFFFF // 1MB
#define SYSMEM_PER_RESRV_S 0x41200000

// "M" CONFIG POST
#define SYSMEM_M_CONF_PORT_E 0x411FFFFF // 1MB
#define SYSMEM_M_CONF_PORT_S 0x41100000

// "MAIN" CONFIG PORT
#define SYSMEM_MAIN_CONF_PORT_E 0x410FFFFF // 1MB
#define SYSMEM_MAIN_CONF_PORT_S 0x40800000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV07_E 0x40FFFFFF // 12MB
#define SYSMEM_RESRV07_S 0x40400000

// AIPS-4
#define SYSMEM_AIPS4_E 0x403FFFFF // 1MB
#define SYSMEM_AIPS4_S 0x40300000

// AIPS-3
#define SYSMEM_AIPS3_E 0x402FFFFF // 1MB
#define SYSMEM_AIPS3_S 0x40200000

// AIPS-2
#define SYSMEM_AIPS2_E 0x401FFFFF // 1MB
#define SYSMEM_AIPS2_S 0x40100000

// AIPS-1
#define SYSMEM_AIPS1_E 0x400FFFFF // 1MB
#define SYSMEM_AIPS1_S 0x40000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV06_E 0x3FFFFFFF // 256MB
#define SYSMEM_RESRV06_S 0x30000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV05_E 0x2FFFFFFF // 252MB
#define SYSMEM_RESRV05_S 0x20400000

// OCRAM RESERVED ADDRESS-SPACE
#define SYSMEM_OCRAM_RESRV_E 0x203FFFFF // 512KB
#define SYSMEM_OCRAM_RESRV_S 0x20300000

// OCRAM FLEXRAM
#define SYSMEM_OCRAM_FLEX_E 0x202FFFFF // 512KB
#define SYSMEM_OCRAM_FLEX_S 0x20280000

// OCRAM2
#define SYSMEM_OCRAM2_E 0x2027FFFF // 512KB
#define SYSMEM_OCRAM2_S 0x20200000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV04_E 0x201FFFFF // 1MB
#define SYSMEM_RESRV04_S 0x20100000

// DTCM RESERVED ADDRESS-SPACE
#define SYSMEM_DTCM_RESRV04_E 0x200FFFFF // 512KB
#define SYSMEM_DTCM_RESRV04_S 0x20080000

// DTCM
#define SYSMEM_DTCM_E 0x2007FFFF // 512KB
#define SYSMEM_DTCM_S 0x20000000

// RESERVED ADDRESS-SPACE %%%%%%%%%%
#define SYSMEM_RESRV03_E 0x1FFFFFFF // 256MB
#define SYSMEM_RESRV03_S 0x10000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV02_E 0x0FFFFFFF // 128MB
#define SYSMEM_RESRV02_S 0x08000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV01_E 0x07FFFFFF // 124MB
#define SYSMEM_RESRV01_S 0x00400000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV00_E 0x003FFFFF // 1536KB
#define SYSMEM_RESRV00_S 0x00280000

// ROMCP RESERVED ADDRESS-SPACE
#define SYSMEM_ROMCP_RESRV_E 0x0027FFFF // 384KB
#define SYSMEM_ROMCP_RESRV_S 0x00220000

// ROMCP
#define SYSMEM_ROMCP_E 0x0021FFFF // 128KB
#define SYSMEM_ROMCP_S 0x00200000

// ITCM RESERVED ADDRESS-SPACE
#define SYSMEM_ITCM_RESRV_00_E 0x001FFFFF // 1MB
#define SYSMEM_ITCM_RESRV_00_S 0x00100000

// ITCM RESERVED ADDRESS-SPACE
#define SYSMEM_ITCM_RESRV_00_E 0x000FFFFF // 512KB
#define SYSMEM_ITCM_RESRV_00_S 0x00080000

// ITCM
#define SYSMEM_ITCM_E 0x0007FFFF // 512KB
#define SYSMEM_ITCM_S 0x00000000

#define // //
//
//
/** @AIPSONE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// CCM(CCM)
#define AIPS1_NIC_CCM_E 0x400FFFFF // 16KB
#define AIPS1_NIC_CCM_S 0x400FC000

// SRC(SRC)
#define AIPS1_NIC_SRC_E 0x500FBFFF // 16KB
#define AIPS1_NIC_SRC_S 0x400F8000

// GPC
#define AIPS1_NIC_GPC_E 0x400F7FFF // 16KB
#define AIPS1_NIC_GPC_S 0x400F4000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_07_E 0x400F3FFF // 16KB
#define AIPS1_NIC_RESRV_07_S 0x400F0000

// DMA CH MUX
#define AIPS1_NIC_DMA_CH_MUX_E 0x400EFFFF // 16KB
#define AIPS1_NIC_DMA_CH_MUX_S 0x400EC000

// EDMA
#define AIPS1_NIC_EDMA_E 0x400EBFFF // 16KB
#define AIPS1_NIC_EDMA_S 0x400E8000

// SJC
#define AIPS1_NIC_SJC_E 0x400E7FFF // 16KB
#define AIPS1_NIC_SJC_S 0x400E4000

// TSC DIG
#define AIPS1_NIC_TSC_DIG_E 0x400E3FFF // 16KB
#define AIPS1_NIC_TSC_DIG_S 0x400E0000

// CSU
#define AIPS1_NIC_CSU_E 0x400DFFFF // 16KB
#define AIPS1_NIC_CSU_S 0x400DC000

// ANALOG
#define AIPS1_NIC_ANALOG_E 0x400DBFFF // 16KB
#define AIPS1_NIC_ANALOG_S 0x400D8000

// SNVS HP
#define AIPS1_NIC_SNVS_HP_E 0x400D7FFF // 16KB
#define AIPS1_NIC_SNVS_HP_S 0x400D4000

// WDOG 2
#define AIPS1_NIC_WDOG2_E 0x400D3FFF // 16KB
#define AIPS1_NIC_WDOG2_S 0x400D0000

// TRNG
#define AIPS1_NIC_TRNG_E 0x400CFFFF // 16KB
#define AIPS1_NIC_TRNG_S 0x400CC000

// ADC2
#define AIPS1_NIC_ADC2_E 0x400CBFFF // 16KB
#define AIPS1_NIC_ADC2_S 0x400C8000

// ADC1
#define AIPS1_NIC_ADC1_E 0x400C7FFF // 16KB
#define AIPS1_NIC_ADC1_S 0x400C4000

// GPIO5
#define AIPS1_NIC_GPIO5_E 0x400C3FFF // 16KB
#define AIPS1_NIC_GPIO5_S 0x400C0000

// WDOG3
#define AIPS1_NIC_WDOG3_E 0x400BFFFF // 16KB
#define AIPS1_NIC_WDOG3_S 0x400BC000

// WDOG1
#define AIPS1_NIC_WDOG1_E 0x400BBFFF // 16KB
#define AIPS1_NIC_WDOG1_S 0x400B8000

// EWM
#define AIPS1_NIC_EWM_E 0x400B7FFF // 16KB
#define AIPS1_NIC_EWM_S 0x400B4000

// CM7 MXRT (FLEXRAM)
#define AIPS1_NIC_CM7MXRT_FLEXRAM_E 0x400B3FFF // 16KB
#define AIPS1_NIC_CM7MXRT_FLEXRAM_S 0x400B0000

// IO MUXC - GPR
#define AIPS1_NIC_IOMUXC_GPR_E 0x400AFFFF // 16KB
#define AIPS1_NIC_IOMUXC_GPR_S 0x400AC000

// IO MUXC - SNVS
#define AIPS1_NIC_IOMUXC_SNVS_E 0x400ABFFF // 16KB
#define AIPS1_NIC_IOMUXC_SNVS_S 0x400A8000

// IO MUXC - SNVS GPR
#define AIPS1_NIC_IOMUXC_SNVS_GPR_E 0x400A7FFF // 16KB
#define AIPS1_NIC_IOMUXC_SNVS_GPR_S 0x400A4000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_06_E 0x400A3FFF // 16KB
#define AIPS1_NIC_RESRV_06_S 0x400A0000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_05_E 0x4009FFFF // 16KB
#define AIPS1_NIC_RESRV_05_S 0x4009C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV04_E 0x4009BFFF // 16KB
#define AIPS1_NIC_RESRV04_S 0x40098000

// ACMP
#define AIPS1_NIC_ACMP_E 0x40097FFF // 16KB
#define AIPS1_NIC_ACMP_S 0x40094000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV04_E 0x40093FFF // 16KB
#define AIPS1_NIC_RESRV04_S 0x40090000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV03_E 0x4008FFFF // 16KB
#define AIPS1_NIC_RESRV03_S 0x4008C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV02_E 0x4008BFFF // 16KB
#define AIPS1_NIC_RESRV02_S 0x40088000

// PIT
#define AIPS1_NIC_PIT_E 0x40087FFF // 16KB
#define AIPS1_NIC_PIT_S 0x40084000

// DCDC
#define AIPS1_NIC_DCDC_E 0x40083FFF // 16KB
#define AIPS1_NIC_DCDC_S 0x40080000

// AIPS 1 CONFIG
#define AIPS1_NIC_CONF_E 0x4007FFFF // 16KB
#define AIPS1_NIC_CONF_S 0x4007C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV01_E 0x4007FFFF // 240KB
#define AIPS1_NIC_RESRV01_S 0x40040000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV00_E 0x4003FFFF // 256KB
#define AIPS1_NIC_RESRV00_S 0x40000000
//
//
/** @AIPSTWO: DETAILED MEMORY MAP (AIPS-2-NIC-PORTS) */
// CCM(CCM)
#define AIPS2_NIC_KPP_E 0x401FFFFF // 16KB
#define AIPS2_NIC_KPP_S 0x401FC000

// SRC(SRC)
#define AIPS2_NIC_IO_MUXXC_E 0x401FBFFF // 16KB
#define AIPS2_NIC_IO_MUXXC_S 0x401F8000

// GPC
#define AIPS2_NIC_OCOTP_E 0x401F7FFF // 16KB
#define AIPS2_NIC_OCOTP_S 0x401F4000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_GPT2_E 0x401F3FFF // 16KB
#define AIPS2_NIC_GPT2_S 0x401F0000

// DMA CH MUX
#define AIPS2_NIC_GPT1_E 0x401EFFFF // 16KB
#define AIPS2_NIC_GPT1_S 0x401EC000

// EDMA
#define AIPS2_NIC_QTIMER4_E 0x401EBFFF // 16KB
#define AIPS2_NIC_QTIMER4_S 0x401E8000

// SJC
#define AIPS2_NIC_QTIMER3_E 0x401E7FFF // 16KB
#define AIPS2_NIC_QTIMER3_S 0x401E4000

// TSC DIG
#define AIPS2_NIC_QTIMER2_E 0x401E3FFF // 16KB
#define AIPS2_NIC_QTIMER2_S 0x401E0000

// CSU
#define AIPS2_NIC_QTIMER1_E 0x401DFFFF // 16KB
#define AIPS2_NIC_QTIMER1_S 0x401DC000

// ANALOG
#define AIPS2_NIC_FLEXCAN3_E 0x401DBFFF // 16KB
#define AIPS2_NIC_FLEXCAN3_S 0x401D8000

// SNVS HP
#define AIPS2_NIC_FLEXCAN2_E 0x401D7FFF // 16KB
#define AIPS2_NIC_FLEXCAN2_S 0x401D4000

// WDOG 2
#define AIPS2_NIC_FLEXCAN1_E 0x401D3FFF // 16KB
#define AIPS2_NIC_FLEXCAN1_S 0x401D0000

// TRNG
#define AIPS2_NIC_RESRV06_E 0x401CFFFF // 16KB
#define AIPS2_NIC_RESRV06_S 0x401CC000

// ADC2
#define AIPS2_NIC_RESRV05_E 0x401CBFFF // 16KB
#define AIPS2_NIC_RESRV05_S 0x401C8000

// ADC1
#define AIPS2_NIC_GPIO4_E 0x401C7FFF // 16KB
#define AIPS2_NIC_GPIO4_S 0x401C4000

// GPIO5
#define AIPS2_NIC_GPIO3_E 0x401C3FFF // 16KB
#define AIPS2_NIC_GPIO3_S 0x401C0000

// WDOG3
#define AIPS2_NIC_GPIO2_E 0x401BFFFF // 16KB
#define AIPS2_NIC_GPIO2_S 0x401BC000

// WDOG1
#define AIPS2_NIC_GPIO1_E 0x401BBFFF // 16KB
#define AIPS2_NIC_GPIO1_S 0x401B8000

// EWM
#define AIPS2_NIC_RESRV04_E 0x401B7FFF // 16KB
#define AIPS2_NIC_RESRV04_S 0x401B4000

// CM7 MXRT (FLEXRAM)
#define AIPS2_NIC_FLEX_IO2_E 0x401B3FFF // 16KB
#define AIPS2_NIC_FLEX_IO2_S 0x401B0000

// IO MUXC - GPR
#define AIPS2_NIC_FLEX_IO1_E 0x401AFFFF // 16KB
#define AIPS2_NIC_FLEX_IO1_S 0x401AC000

// IO MUXC - SNVS
#define AIPS2_NIC_RESRV03_E 0x401ABFFF // 16KB
#define AIPS2_NIC_RESRV03_S 0x401A8000

// IO MUXC - SNVS GPR
#define AIPS2_NIC_RESRV02_E 0x401A7FFF // 16KB
#define AIPS2_NIC_RESRV02_S 0x401A4000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART8_E 0x401A3FFF // 16KB
#define AIPS2_NIC_LP_UART8_S 0x401A0000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART7_E 0x4019FFFF // 16KB
#define AIPS2_NIC_LP_UART7_S 0x4019C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART6_E 0x4019BFFF // 16KB
#define AIPS2_NIC_LP_UART6_S 0x40198000

// ACMP
#define AIPS2_NIC_LP_UAR5_E 0x40197FFF // 16KB
#define AIPS2_NIC_LP_UAR5_S 0x40194000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART4_E 0x40193FFF // 16KB
#define AIPS2_NIC_LP_UART4_S 0x40190000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART3_E 0x4018FFFF // 16KB
#define AIPS2_NIC_LP_UART3_S 0x4018C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART2_E 0x4018BFFF // 16KB
#define AIPS2_NIC_LP_UART2_S 0x40188000

// PIT
#define AIPS2_NIC_LP_UART1_E 0x40187FFF // 16KB
#define AIPS2_NIC_LP_UART1_S 0x40184000

// DCDC
#define AIPS2_NIC_ROMCP_E 0x40183FFF // 16KB
#define AIPS2_NIC_ROMCP_S 0x40180000

// AIPS 2 CONFIG
#define AIPS2_NIC_CONF_E 0x4017FFFF // 16KB
#define AIPS2_NIC_CONF_S 0x4017C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_RESRV01_E 0x4017FFFF // 240KB
#define AIPS2_NIC_RESRV01_S 0x40140000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_RESRV00_E 0x4013FFFF // 256KB
#define AIPS2_NIC_RESRV00_S 0x40100000
//
//
/** @AIPSTHREE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// CCM(CCM)
#define AIPS3_NIC_DCP_E 0x402FFFFF // 16KB
#define AIPS3_NIC_DCP_S 0x402FC000

// SRC(SRC)
#define AIPS3_NIC_RESRV21_E 0x402FBFFF // 16KB
#define AIPS3_NIC_RESRV21_S 0x402F8000

// GPC
#define AIPS3_NIC_RESRV20_E 0x402F7FFF // 16KB
#define AIPS3_NIC_RESRV20_S 0x402F4000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_SEMC_E 0x402F3FFF // 16KB
#define AIPS3_NIC_SEMC_S 0x402F0000

// DMA CH MUX
#define AIPS3_NIC_RESRV19_E 0x402EFFFF // 16KB
#define AIPS3_NIC_RESRV19_S 0x402EC000

// EDMA
#define AIPS3_NIC_RESRV18_E 0x402EBFFF // 16KB
#define AIPS3_NIC_RESRV18_S 0x402E8000

// SJC
#define AIPS3_NIC_RESRV17_E 0x402E7FFF // 16KB
#define AIPS3_NIC_RESRV17_S 0x402E4000

// TSC DIG
#define AIPS3_NIC_USB_E 0x402E3FFF // 16KB
#define AIPS3_NIC_USB_S 0x402E0000

// CSU
#define AIPS3_NIC_RESRV16_E 0x402DFFFF // 16KB
#define AIPS3_NIC_RESRV16_S 0x402DC000

// ANALOG
#define AIPS3_NIC_ENET_E 0x402DBFFF // 16KB
#define AIPS3_NIC_ENET_S 0x402D8000

// SNVS HP
#define AIPS3_NIC_ENET2_E 0x402D7FFF // 16KB
#define AIPS3_NIC_ENET2_S 0x402D4000

// WDOG 2
#define AIPS3_NIC_RESRV15_E 0x402D3FFF // 16KB
#define AIPS3_NIC_RESRV15_S 0x402D0000

// TRNG
#define AIPS3_NIC_RESRV14_E 0x402CFFFF // 16KB
#define AIPS3_NIC_RESRV14_S 0x402CC000

// ADC2
#define AIPS3_NIC_RESRV13_E 0x402CBFFF // 16KB
#define AIPS3_NIC_RESRV13_S 0x402C8000

// ADC1
#define AIPS3_NIC_US_DHC2_E 0x402C7FFF // 16KB
#define AIPS3_NIC_US_DHC2_S 0x402C4000

// GPIO5
#define AIPS3_NIC_US_DHC1_E 0x402C3FFF // 16KB
#define AIPS3_NIC_US_DHC1_S 0x402C0000

// WDOG3
#define AIPS3_NIC_CSI_E 0x402BFFFF // 16KB
#define AIPS3_NIC_CSI_S 0x402BC000

// WDOG1
#define AIPS3_NIC_LCDIF_E 0x402BBFFF // 16KB
#define AIPS3_NIC_LCDIF_S 0x402B8000

// EWM
#define AIPS3_NIC_PXP_E 0x402B7FFF // 16KB
#define AIPS3_NIC_PXP_S 0x402B4000

// CM7 MXRT (FLEXRAM)
#define AIPS3_NIC_RESRV12_E 0x402B3FFF // 16KB
#define AIPS3_NIC_RESRV12_S 0x402B0000

// IO MUXC - GPR
#define AIPS3_NIC_RESRV11_E 0x402AFFFF // 16KB
#define AIPS3_NIC_RESRV11_S 0x402AC000

// IO MUXC - SNVS
#define AIPS3_NIC_FLEX_SPI_E 0x402ABFFF // 16KB
#define AIPS3_NIC_FLEX_SPI_S 0x402A8000

// IO MUXC - SNVS GPR
#define AIPS3_NIC_FLEX_SPI2_E 0x402A7FFF // 16KB
#define AIPS3_NIC_FLEX_SPI2_S 0x402A4000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV10_E 0x402A3FFF // 16KB
#define AIPS3_NIC_RESRV10_S 0x402A0000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV09_E 0x4029FFFF // 16KB
#define AIPS3_NIC_RESRV09_S 0x4029C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV08_E 0x4029BFFF // 16KB
#define AIPS3_NIC_RESRV08_S 0x40298000

// ACMP
#define AIPS3_NIC_RESRV07_E 0x40297FFF // 16KB
#define AIPS3_NIC_RESRV07_S 0x40294000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV06_E 0x40293FFF // 16KB
#define AIPS3_NIC_RESRV06_S 0x40290000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV05_E 0x4028FFFF // 16KB
#define AIPS3_NIC_RESRV05_S 0x4028C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV04_E 0x4028BFFF // 16KB
#define AIPS3_NIC_RESRV04_S 0x40288000

// PIT
#define AIPS3_NIC_RESRV03_E 0x40287FFF // 16KB
#define AIPS3_NIC_RESRV03_S 0x40284000

// DCDC
#define AIPS3_NIC_RESRV02_E 0x40283FFF // 16KB
#define AIPS3_NIC_RESRV02_S 0x40280000

// AIPS 1 CONFIG
#define AIPS3_NIC_CONF_E 0x4027FFFF // 16KB
#define AIPS3_NIC_CONF_S 0x4027C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV01_E 0x4027FFFF // 240KB
#define AIPS3_NIC_RESRV01_S 0x40240000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV00_E 0x4023FFFF // 256KB
#define AIPS3_NIC_RESRV00_S 0x40200000
//
//
/** @AIPSFOUR: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// LPI2C4
#define AIPS4_NIC_LPI2C4_E 0x403FFFFF // 16KB
#define AIPS4_NIC_LPI2C4_S 0x403FC000

// LPI2C3
#define AIPS4_NIC_LPI2C3_E 0x403FBFFF // 16KB
#define AIPS4_NIC_LPI2C3_S 0x403F8000

// LPI2C2
#define AIPS4_NIC_LPI2C2_E 0x403F7FFF // 16KB
#define AIPS4_NIC_LPI2C2_S 0x403F4000

// LPI2C1
#define AIPS4_NIC_LPI2C1_E 0x403F3FFF // 16KB
#define AIPS4_NIC_LPI2C1_S 0x403F0000

// BEE
#define AIPS4_NIC_BEE_E 0x403EFFFF // 16KB
#define AIPS4_NIC_BEE_S 0x403EC000

// FLEX XPWM 4
#define AIPS4_NIC_FLEX_XPWM4_E 0x403EBFFF // 16KB
#define AIPS4_NIC_FLEX_XPWM4_S 0x403E8000

// FLEX XPWM 3
#define AIPS4_NIC_FLEX_XPWM3_E 0x403E7FFF // 16KB
#define AIPS4_NIC_FLEX_XPWM3_S 0x403E4000

// FLEX XPWM 2
#define AIPS4_NIC_FLEC_XPWM2_E 0x403E3FFF // 16KB
#define AIPS4_NIC_FLEC_XPWM2_S 0x403E0000

// FLEX XPWM 1
#define AIPS4_NIC_FLEX_XPWM1_E 0x403DFFFF // 16KB
#define AIPS4_NIC_FLEX_XPWM1_S 0x403DC000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV06_E 0x403DBFFF // 16KB
#define AIPS4_NIC_RESRV06_S 0x403D8000

// ENC 4
#define AIPS4_NIC_ENC4_E 0x403D7FFF // 16KB
#define AIPS4_NIC_ENC4_S 0x403D4000

// ENC 3
#define AIPS4_NIC_ENC3_E 0x403D3FFF // 16KB
#define AIPS4_NIC_ENC3_S 0x403D0000

// ENC 2
#define AIPS4_NIC_ENC2_E 0x403CFFFF // 16KB
#define AIPS4_NIC_ENC2_S 0x403CC000

// ENC 1
#define AIPS4_NIC_ENC1_E 0x403CBFFF // 16KB
#define AIPS4_NIC_ENC1_S 0x403C8000

// XBAR 3
#define AIPS4_NIC_XBAR3_E 0x403C7FFF // 16KB
#define AIPS4_NIC_XBAR3_S 0x403C4000

// XBAR 2
#define AIPS4_NIC_XBAR2_E 0x403C3FFF // 16KB
#define AIPS4_NIC_XBAR2_S 0x403C0000

// XBAR 1
#define AIPS4_NIC_XBAR1_E 0x403BFFFF // 16KB
#define AIPS4_NIC_XBAR1_S 0x403BC000

// AOI 2
#define AIPS4_NIC_AOI2_E 0x403BBFFF // 16KB
#define AIPS4_NIC_AOI2_S 0x403B8000

// AOI 1
#define AIPS4_NIC_AOI1_E 0x403B7FFF // 16KB
#define AIPS4_NIC_AOI1_S 0x403B4000

// ADC ETC
#define AIPS4_NIC_ADC_ETC_E 0x403B3FFF // 16KB
#define AIPS4_NIC_ADC_ETC_S 0x403B0000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV05_E 0x403AFFFF // 16KB
#define AIPS4_NIC_RESRV05_S 0x403AC000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV04_E 0x403ABFFF // 16KB
#define AIPS4_NIC_RESRV04_S 0x403A8000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV03_E 0x403A7FFF // 16KB
#define AIPS4_NIC_RESRV03_S 0x403A4000

// LP SPI 4
#define AIPS4_NIC_LPSPI4_01_E 0x403A3FFF // 16KB
#define AIPS4_NIC_LPSPI4_01_S 0x403A0000

// LP SPI 3
#define AIPS4_NIC_LPSPI3_02_E 0x4039FFFF // 16KB
#define AIPS4_NIC_LPSPI3_02_S 0x4039C000

// LP SPI 2
#define AIPS4_NIC_LPSPI2_E 0x4039BFFF // 16KB
#define AIPS4_NIC_LPSPI2_S 0x40398000

// LP SPI 1
#define AIPS4_NIC_LPSPI1_E 0x40397FFF // 16KB
#define AIPS4_NIC_LPSPI1_S 0x40394000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV02_E 0x40393FFF // 16KB
#define AIPS4_NIC_RESRV02_S 0x40390000

// SAI 3
#define AIPS4_NIC_SAI3_E 0x4038FFFF // 16KB
#define AIPS4_NIC_SAI3_S 0x4038C000

// SAI 2
#define AIPS4_NIC_SAI2_E 0x4038BFFF // 16KB
#define AIPS4_NIC_SAI2_S 0x40388000

// SAI 1
#define AIPS4_NIC_SAI1_E 0x40387FFF // 16KB
#define AIPS4_NIC_SAI1_S 0x40384000

// SPDIF
#define AIPS4_NIC_SPDIF_E 0x40383FFF // 16KB
#define AIPS4_NIC_SPDIF_S 0x40380000

// AIPS 4 CONFIG
#define AIPS4_NIC_CONF_E 0x4037FFFF // 16KB
#define AIPS4_NIC_CONF_S 0x4037C000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV01_E 0x4037FFFF // 240KB
#define AIPS4_NIC_RESRV01_S 0x40340000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV00_E 0x4033FFFF // 256KB
#define AIPS4_NIC_RESRV00_S 0x40300000
//
//
/** @AIPSONE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// Reserved off platform slots
#define AIPS5_NIC_CCM_E 0x420FFFFF // 512KB
#define AIPS5_NIC_CCM_S 0x42080000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV26_E 0x4207FFFF // 16KB
#define AIPS5_NIC_RESRV26_S 0x4207C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV25_E 0x4207BFFF // 16KB
#define AIPS5_NIC_RESRV25_S 0x42078000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV24_E 0x42077FFF // 16KB
#define AIPS5_NIC_RESRV24_S 0x42074000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV23_E 0x42073FFF // 16KB
#define AIPS5_NIC_RESRV23_S 0x42070000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV22_E 0x4206FFFF // 16KB
#define AIPS5_NIC_RESRV22_S 0x4206C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV21_E 0x4206BFFF // 16KB
#define AIPS5_NIC_RESRV21_S 0x42068000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV20_E 0x42067FFF // 16KB
#define AIPS5_NIC_RESRV20_S 0x42064000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV19_E 0x42063FFF // 16KB
#define AIPS5_NIC_RESRV19_S 0x42060000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV18_E 0x4205FFFF // 16KB
#define AIPS5_NIC_RESRV18_S 0x4205C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV17_E 0x4205BFFF // 16KB
#define AIPS5_NIC_RESRV17_S 0x42058000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV16_E 0x42057FFF // 16KB
#define AIPS5_NIC_RESRV16_S 0x42054000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV15_E 0x42053FFF // 16KB
#define AIPS5_NIC_RESRV15_S 0x42050000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV14_E 0x4204FFFF // 16KB
#define AIPS5_NIC_RESRV14_S 0x4204C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV13_E 0x4204BFFF // 16KB
#define AIPS5_NIC_RESRV13_S 0x42048000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV12_E 0x42047FFF // 16KB
#define AIPS5_NIC_RESRV12_S 0x42044000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV11_E 0x42043FFF // 16KB
#define AIPS5_NIC_RESRV11_S 0x42040000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV10_E 0x4203FFFF // 16KB
#define AIPS5_NIC_RESRV10_S 0x4203C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV09_E 0x4203BFFF // 16KB
#define AIPS5_NIC_RESRV09_S 0x42038000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV08_E 0x42037FFF // 16KB
#define AIPS5_NIC_RESRV08_S 0x42034000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV07_E 0x42033FFF // 16KB
#define AIPS5_NIC_RESRV07_S 0x42030000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV06_E 0x4202FFFF // 16KB
#define AIPS5_NIC_RESRV06_S 0x4202C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV05_E 0x4202BFFF // 16KB
#define AIPS5_NIC_RESRV05_S 0x42028000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV04_E 0x42027FFF // 16KB
#define AIPS5_NIC_RESRV04_S 0x42024000

// FLEX IO 3
#define AIPS5_NIC_RESRV_01_E 0x42023FFF // 16KB
#define AIPS5_NIC_RESRV_01_S 0x42020000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV03_E 0x4201FFFF // 16KB
#define AIPS5_NIC_RESRV03_S 0x4201C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV02_E 0x4201BFFF // 16KB
#define AIPS5_NIC_RESRV02_S 0x42018000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV01_E 0x42017FFF // 16KB
#define AIPS5_NIC_RESRV01_S 0x42014000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV00_E 0x42013FFF // 16KB
#define AIPS5_NIC_RESRV00_S 0x42010000

// GPIO9
#define AIPS5_NIC_GPIO9_E 0x4200FFFF // 16KB
#define AIPS5_NIC_GPIO9_S 0x4200C000

// GPIO8
#define AIPS5_NIC_GPIO8_E 0x4200BFFF // 16KB
#define AIPS5_NIC_GPIO8_S 0x42008000

// GPIO7
#define AIPS5_NIC_GPIO7_E 0x42007FFF // 16KB
#define AIPS5_NIC_GPIO7_S 0x42004000

// GPIO6
#define AIPS5_NIC_GPIO6_E 0x42003FFF // 16KB
#define AIPS5_NIC_GPIO6_S 0x42000000

#define // //
//
//
/** @PPB: DETAILED MEMORY MAP  */
// PPB ROM
#define PPB_ALOC_PPBROM_E 0xE00FFFFF // 4KB
#define PPB_ALOC_PPBROM_S 0xE00FF000

// Processor ROM
#define PPB_ALOC_PROCROM_E 0xE00FEFFF // 4KB
#define PPB_ALOC_PROCROM_S 0xE00FE000

// SYS ROM
#define PPB_ALOC_SYSROM_E 0xE00FDFFF // 4KB
#define PPB_ALOC_SYSROM_S 0xE00FD000

// IO MUXC - SNVS GPR
#define PPB_ALOC_PPBRESRV_02_E 0xE00FCFFF // 52KB
#define PPB_ALOC_PPBRESRV_02_S 0xE00F0000

// RESERVED ADDRESS-SPACE
#define PPB_ALOC_PPBRESRV_01_E 0xE00EFFFF // 444KB
#define PPB_ALOC_PPBRESRV_01_S 0xE0081000

// MCM
#define PPB_ALOC_MCM_E 0xE0080FFF // 4KB
#define PPB_ALOC_MCM_S 0xE0080000

// RESERVED ADDRESS-SPACE
#define PPB_ALOC_PPBRESRV00_E 0xE007FFFF // 236KB
#define PPB_ALOC_PPBRESRV00_S 0xE0045000

// PPB RES
#define PPB_ALOC_PPBRES_E 0xE0044FFF // 4KB
#define PPB_ALOC_PPBRES_S 0xE0044000

// TSGEN
#define PPB_ALOC_TSGEN_E 0xE0043FFF // 4KB
#define PPB_ALOC_TSGEN_S 0xE0043000

// CTI
#define PPB_ALOC_CTI_E 0xE0042FFF // 4KB
#define PPB_ALOC_CTI_S 0xE0042000

// ETM
#define PPB_ALOC_ETM_E 0xE0041FFF // 4KB
#define PPB_ALOC_ETM_S 0xE0041000

// TPIU
#define PPB_ALOC_TPIU_E 0xE0040FFF // 4KB
#define PPB_ALOC_TPIU_S 0xE0040000

/**
 *  @brief:
 *  Due to the clock frequency difference between CPU andperipheral, in some
 *  corner case, peripheral interrupt flag maynot be really cleared before CPU
 *  exit ISR. In such case, usershould add DSB instruction right after
 *  instruction to clear interrupt flag.
 *
 **/
typedef enum
{
  // CHANNDEÖ TRANSFER COMPLETER
  eDMA_CHANNEL_0_16_Done = 0x0,
  eDMA_CHANNEL_1_17_Done = 0x1,
  eDMA_CHANNEL_2_18_Done = 0x2,
  eDMA_CHANNEL_3_19_Done = 0x3,
  eDMA_CHANNEL_4_20_Done = 0x4,
  eDMA_CHANNEL_5_21_Done = 0x5,
  eDMA_CHANNEL_6_22_Done = 0x6,
  eDMA_CHANNEL_7_23_Done = 0x7,
  eDMA_CHANNEL_8_24_Done = 0x8,
  eDMA_CHANNEL_9_25_Done = 0x9,
  eDMA_CHANNEL_10_26_Done = 0xa,
  eDMA_CHANNEL_11_27_Done = 0xb,
  eDMA_CHANNEL_12_28_Done = 0xc,
  eDMA_CHANNEL_13_29_Done = 0xd,
  eDMA_CHANNEL_14_30_Done = 0xe,
  eDMA_CHANNEL_15_31_Done = 0xf,
  eDMA_CHANNEL_ERR_ALL_Done = 0x10,

  //  CTI TRIGGER OUTPUTS & PLATFORM EXCEPTION
  CM7_CTI_TRIGGER_OUT0 = 0x11,
  CM7_CTI_TRIGGER_OUT1 = 0x12,
  CM7_CORE_PLAT_EXCEPTION = 0x13,

  // UART INTERRUPTS
  LPUART1_RXTX_INTERRUPT = 0x14,
  LPUART2_RXTX_INTERRUPT = 0x15,
  LPUART3_RXTX_INTERRUPT = 0x16,
  LPUART4_RXTX_INTERRUPT = 0x17,
  LPUART5_RXTX_INTERRUPT = 0x18,
  LPUART6_RXTX_INTERRUPT = 0x19,
  LPUART7_RXTX_INTERRUPT = 0x1a,
  LPUART8_RXTX_INTERRUPT = 0x1b,

  // I2C INTERRUPTS, MASTERS - SLAVES
  LPI2C_1_INTERRUPT_MASTER = 0x1c,
  LPI2C_1_INTERRUPT_MASTER_ASYNC = 0x1c,
  LPI2C_1_INTERRUPT_SLAVE = 0x1c,
  LPI2C_1_INTERRUPT_SLAVE_ASYNC = 0x1c,

  LPI2C_2_INTERRUPT_MASTER = 0x1d,
  LPI2C_2_INTERRUPT_MASTER_ASYNC = 0x1d,
  LPI2C_2_INTERRUPT_SLAVE = 0x1d,
  LPI2C_2_INTERRUPT_SLAVE_ASYNC = 0x1d,

  LPI2C_3_INTERRUPT_MASTER = 0x1e,
  LPI2C_3_INTERRUPT_MASTER_ASYNC = 0x1e,
  LPI2C_3_INTERRUPT_SLAVE = 0x1e,
  LPI2C_3_INTERRUPT_SLAVE_ASYNC = 0x1e,

  LPI2C_4_INTERRUPT_MASTER = 0x1f,
  LPI2C_4_INTERRUPT_MASTER_ASYNC = 0x1f,
  LPI2C_4_INTERRUPT_SLAVE = 0x1f,
  LPI2C_4_INTERRUPT_SLAVE_ASYNC = 0x1f,

  // LSPSPI INTERRUPT REQUEST LINE TO THE CORE
  LSPSPI1 = 0x20,
  LSPSPI2 = 0x21,
  LSPSPI3 = 0x22,
  LSPSPI4 = 0x23,

  /** FLEXCAN: Combined interrupt of ini_int_busoff, ini_int_error,ipi_int_mbor,
     ipi_int_rxwarning, ipi_int_txwarning andipi_int_wakein. */
  FLEXCAN1 = 0x24,
  FLEXCAN2 = 0x25,

  /** FLEXRAM: OUT OF BOUNDS OR ACCESS HIT */
  CM7_FLEXRAM_OOB_OR_HIT = 0x26,

  KPP_KEYPAD_INTERRUPT = 0x27,
  TSC_DIG_INTERRUPT = 0x28,
  GPR_NOTIFY_CORES_EXCPTN_COND_BOOT = 0x29,
  LCDIF_SYNC_INTERRUPT = 0x2a,
  CSI_INTERRUPT = 0x2b,
  PXP_INTERRUPT = 0x2c,

  // Watchdog Timer Reset
  WDOG2_TIMER_RESET = 0x2d,

  // SVNS_HP_WRAPPER SVNS FUNCTIONAL & SECURITY INTERRUPT
  SVNS_FUNC_INTERRUPT = 0x2e,
  SVNS_SEC_INTERRUPT = 0x2f,

  // SVNS HP/LP WRAPPER
  SVNS_LPHP_PWRBTN_LESSTHAN_5_SECONDS_PULSE = 0x30,

  /** INDICATED TO THE PROCESSOR THAT ONE OR MORE ALARM INPUTS WERE ASSERTED */
  CSU_INTERRUPT_REQ1 = 0x31,

  DCP_CH_CRC_INTERRUPT = 0x32, // EXCEPT CHANNEL 0
  IRQ_DCP_CH0 = 0x33,
  RESERVED0 = 0x34,
  TRNG_INTERRUPT = 0x35,
  RESERVED1 = 0x36,
  BEE = 0x37,
  SAI1RXTX_INTERRUPT = 0x38, // OR GATE
  SAI1RXTX_ASYNC_INTERRUPT = 0x38, // OR GATE
  SAI2RXTX_INTERRUPT = 0x39, // OR GATE
  SAI2RXTX_ASYNC_INTERRUPT = 0x39, // OR GATE
  SAI3RX_INTERRUPT = 0x3a, //
  SAI3TX_INTERRUPT = 0x3b, //
  SPDIFRXTX_INTERRUPT = 0x3c, // OR GATE
  PMU_BRWNOUT_11_25_30_REG = 0x3d, //
  RESERVED2 = 0x3e,

  TEMPMON_LOW = 0x3f, // TEMPERATURE MONITOR
  TEMPMON_HIGH = 0x3f,
  TEMPMON_PANIC = 0x40,

  USB_PHY_UTMI0_INTERRUPT = 0x41,
  USB_PHY_UTMI1_INTERRUPT = 0x42,

  ADC1_INTERRUPT = 0x43,
  ADC1_ASYNC_INTERRUPT = 0x43,
  ADC2_INTERRUPT = 0x44,
  ADC2_ASYNC_INTERRUPT = 0x44,

  DCDC = 0x45,

  RESERVED3 = 0x46,
  RESERVED4 = 0x47,

  ACTIVE_HIGH_INTERRUPT_FROM_INT0_FROM_GPIO1 = 0x48,
  ACTIVE_HIGH_INTERRUPT_FROM_INT1_FROM_GPIO1 = 0x49,
  ACTIVE_HIGH_INTERRUPT_FROM_INT2_FROM_GPIO1 = 0x4a,
  ACTIVE_HIGH_INTERRUPT_FROM_INT3_FROM_GPIO1 = 0x4b,
  ACTIVE_HIGH_INTERRUPT_FROM_INT4_FROM_GPIO1 = 0x4c,
  ACTIVE_HIGH_INTERRUPT_FROM_INT5_FROM_GPIO1 = 0x4d,
  ACTIVE_HIGH_INTERRUPT_FROM_INT6_FROM_GPIO1 = 0x4e,
  ACTIVE_HIGH_INTERRUPT_FROM_INT7_FROM_GPIO1 = 0x4f,

  GPIO1_COMBINED_INTERRUPT_INDICATE_0_15 = 0x50,
  GPIO1_COMBINED_INTERRUPT_INDICATE_16_31 = 0x51,
  GPIO2_COMBINED_INTERRUPT_INDICATE_0_15 = 0x52,
  GPIO2_COMBINED_INTERRUPT_INDICATE_16_31 = 0x53,
  GPIO3_COMBINED_INTERRUPT_INDICATE_0_15 = 0x54,
  GPIO3_COMBINED_INTERRUPT_INDICATE_16_31 = 0x55,
  GPIO4_COMBINED_INTERRUPT_INDICATE_0_15 = 0x56,
  GPIO4_COMBINED_INTERRUPT_INDICATE_16_31 = 0x57,
  GPIO5_COMBINED_INTERRUPT_INDICATE_0_15 = 0x58,
  GPIO5_COMBINED_INTERRUPT_INDICATE_16_31 = 0x59,

  // FLEXIO INTERRUPTS
  FLEXIO1_INTERRUPT = 0x5a,
  FLEXIO1_INTERRUPT_ASYNC = 0x5a,
  FLEXIO2_INTERRUPT = 0x5b,
  FLEXIO2_INTERRUPT_ASYNC = 0x5b,

  // WATCHDOG TIMER RESETS
  WDOG1_RESET = 0x5c,
  RTWDOG_RESET = 0x5d,
  RTWDOG_RESET_ASYNC = 0x5d,
  EWM = 0x5e,
  CCM_INTERRUPT_REQ1 = 0x5f,
  CCM_INTERRUPT_REQ2 = 0x60,
  GPC_INTERRUPT_REQ = 0x61,
  SRC_INTERRUPT_REQ = 0x62,
  RESERVED5 = 0x63,

  /* All interrupts combined. OR of GPT1/GPT2 Rollover interruptline,
  Input Capture 1 & 2 lines, Output Compare 1,2 &3Interrupt lines */
  GPT1_ALL_INTERRUPTS_COMB_OR_GPT1_ROLLOVER_INTERRUPT = 0x64,
  GPT2_ALL_INTERRUPTS_COMB_OR_GPT2_ROLLOVER_INTERRUPT = 0x65,

  FLEX_CAPTURE_PWM0_INTERRUPT = 0x66,
  FLEX_COMPARE_PWM0_INTERRUPT = 0x66,
  FLEX_RELOAD_PWM0_INTERRUPT = 0x66,

  FLEX_CAPTURE_PWM1_INTERRUPT = 0x67,
  FLEX_COMPARE_PWM1_INTERRUPT = 0x67,
  FLEX_RELOAD_PWM1_INTERRUPT = 0x67,

  FLEX_CAPTURE_PWM2_INTERRUPT = 0x68,
  FLEX_COMPARE_PWM2_INTERRUPT = 0x68,
  FLEX_RELOAD_PWM2_INTERRUPT = 0x68,

  FLEX_CAPTURE_PWM3_INTERRUPT = 0x69,
  FLEX_COMPARE_PWM3_INTERRUPT = 0x69,
  FLEX_RELOAD_PWM3_INTERRUPT = 0x69,

  FLEX_FAULT_INTERRUPT = 0x6a,
  FLEX_RELOAD_ERR_INTERRUPT = 0x6a,

  FLEX_SPI2 = 0x6b,
  FLEX_SPI = 0x6c,

  SEMC = 0x6d,
  USDHC1_INTERRUPT_REQ = 0x6e,
  USDHC2_INTERRUPT_REQ = 0x6f,

  USB_OTG_2 = 0x70,
  USB_OTG_1 = 0x71,

  ENET_MAC0_PERIODIC_TIMER_OVERFLOW = 0x72,
  ENET_MAC0_TIME_STAMP_AVAILABLE = 0x72,

  ENET_MAC0_PAYLOAD_RX_ERR = 0x72,
  ENET_MAC0_FIFO_TX_UNDERRUN = 0x72,

  ENET_MAC0_COLLISION_RETRY_LIM = 0x72,
  ENET_MAC0_LATE_COLLISION = 0x72,

  ENET_MAC0_ETHERNET_BUS_ERR = 0x72,
  ENET_MAC0_MII_DATA_TX_DONE = 0x72,

  ENET_MAC0_RX_BUFFER_DONE = 0x72,
  ENET_MAC0_RX_FRAME_DONE = 0x72,
  ENET_MAC0_TX_BUFFER_DONE = 0x72,
  ENET_MAC0_TX_FRAME_DONE = 0x72,

  ENET_MAC0_GRACEFUL_STOP = 0x72,
  ENET_MAC0_RX_BABBLING_ERR = 0x72,
  ENET_MAC0_TX_BABBLING_ERR = 0x72,
  ENET_MAC0_TX_WAKEUP_REQ_SYNC = 0x72,

  ENET_MAC0_1588_TIMER_INTERRUPT_SYNCHRONOUS = 0x73,

  XBAR1_IRQ0 = 0x74,
  XBAR1_IRQ1 = 0x74,
  XBAR1_IRQ2 = 0x75,
  XBAR1_IRQ3 = 0x75,

  ADC_ETC_IRQ0 = 0x76,
  ADC_ETC_IRQ1 = 0x77,
  ADC_ETC_IRQ2 = 0x78,
  ADC_ETC_IRQ_ERR = 0x79,

  PIT_TIMER0_INTERRUPT = 0x7a,
  PIT_TIMER1_INTERRUPT = 0x7a,
  PIT_TIMER2_INTERRUPT = 0x7a,
  PIT_TIMER3_INTERRUPT = 0x7a,

  ACMP1 = 0x7b,
  ACMP2 = 0x7c,
  ACMP3 = 0x7d,
  ACMP4 = 0x7e,

  RESERVED6 = 0x7f,
  RESERVED7 = 0x80,

  ENC1_INDEX_MARKER_INTERRUPT = 0x81,
  ENC1_HOME_MARKER_INTERRUPT = 0x81,
  ENC1_WDOG_TIMEOUT_INTERRUPT = 0x81,
  ENC1_COMPARE_INTERRUPT = 0x81,
  ENC1_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x81,

  ENC2_INDEX_MARKER_INTERRUPT = 0x82,
  ENC2_HOME_MARKER_INTERRUPT = 0x82,
  ENC2_WDOG_TIMEOUT_INTERRUPT = 0x82,
  ENC2_COMPARE_INTERRUPT = 0x82,
  ENC2_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x82,
  ENC2_INTERRUPT = 0x82,

  ENC3_INDEX_MARKER_INTERRUPT = 0x83,
  ENC3_HOME_MARKER_INTERRUPT = 0x83,
  ENC3_WDOG_TIMEOUT_INTERRUPT = 0x83,
  ENC3_COMPARE_INTERRUPT = 0x83,
  ENC3_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x83,

  ENC4_INDEX_MARKER_INTERRUPT = 0x84,
  ENC4_HOME_MARKER_INTERRUPT = 0x84,
  ENC4_WDOG_TIMEOUT_INTERRUPT = 0x84,
  ENC4_COMPARE_INTERRUPT = 0x84,
  ENC4_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x84,

  // QTIMERS
  QTIMER1_IRQ_FOR_TIMER0 = 0x85,
  QTIMER1_IRQ_FOR_TIMER1 = 0x85,
  QTIMER1_IRQ_FOR_TIMER2 = 0x85,
  QTIMER1_IRQ_FOR_TIMER3 = 0x85,

  QTIMER2_IRQ_FOR_TIMER0 = 0x86,
  QTIMER2_IRQ_FOR_TIMER1 = 0x86,
  QTIMER2_IRQ_FOR_TIMER2 = 0x86,
  QTIMER2_IRQ_FOR_TIMER3 = 0x86,

  QTIMER3_IRQ_FOR_TIMER0 = 0x87,
  QTIMER3_IRQ_FOR_TIMER1 = 0x87,
  QTIMER3_IRQ_FOR_TIMER2 = 0x87,
  QTIMER3_IRQ_FOR_TIMER3 = 0x87,

  QTIMER4_IRQ_FOR_TIMER0 = 0x88,
  QTIMER4_IRQ_FOR_TIMER1 = 0x88,
  QTIMER4_IRQ_FOR_TIMER2 = 0x88,
  QTIMER4_IRQ_FOR_TIMER3 = 0x88,

  // FLEX PWM IRQs
  // FLEX PWM2
  FLEXPWM2_CAPTURE_PWM0_INTERRUPT = 0x89,
  FLEXPWM2_COMPARE_PWM0_INTERRUPT = 0x89,
  FLEXPWM2_RELOAD_PWM0_INTERRUPT = 0x89,

  FLEXPWM2_CAPTURE_PWM1_INTERRUPT = 0x8a,
  FLEXPWM2_COMPARE_PWM1_INTERRUPT = 0x8a,
  FLEXPWM2_RELOAD_PWM1_INTERRUPT = 0x8a,

  FLEXPWM2_CAPTURE_PWM2_INTERRUPT = 0x8b,
  FLEXPWM2_COMPARE_PWM2_INTERRUPT = 0x8b,
  FLEXPWM2_RELOAD_PWM2_INTERRUPT = 0x8b,

  FLEXPWM2_CAPTURE_PWM3_INTERRUPT = 0x8c,
  FLEXPWM2_COMPARE_PWM3_INTERRUPT = 0x8c,
  FLEXPWM2_RELOAD_PWM3_INTERRUPT = 0x8c,

  FLEXPWM2_FAULT_INTERRUPT = 0x8d,
  FLEXPWM2_RELOAD_ERR = 0x8d,

  // FLEX PWM3
  FLEXPWM3_CAPTURE_PWM0_INTERRUPT = 0x8e,
  FLEXPWM3_COMPARE_PWM0_INTERRUPT = 0x8e,
  FLEXPWM3_RELOAD_PWM0_INTERRUPT = 0x8e,

  FLEXPWM3_CAPTURE_PWM1_INTERRUPT = 0x8f,
  FLEXPWM3_COMPARE_PWM1_INTERRUPT = 0x8f,
  FLEXPWM3_RELOAD_PWM1_INTERRUPT = 0x8f,

  FLEXPWM3_CAPTURE_PWM2_INTERRUPT = 0x90,
  FLEXPWM3_COMPARE_PWM2_INTERRUPT = 0x90,
  FLEXPWM3_RELOAD_PWM2_INTERRUPT = 0x90,

  FLEXPWM3_CAPTURE_PWM3_INTERRUPT = 0x91,
  FLEXPWM3_COMPARE_PWM3_INTERRUPT = 0x91,
  FLEXPWM3_RELOAD_PWM3_INTERRUPT = 0x91,

  FLEXPWM3_FAULT_INTERRUPT = 0x92,
  FLEXPWM3_RELOAD_ERR = 0x92,

  // FLEX PWM4
  FLEXPWM4_CAPTURE_PWM0_INTERRUPT = 0x93,
  FLEXPWM4_COMPARE_PWM0_INTERRUPT = 0x93,
  FLEXPWM4_RELOAD_PWM0_INTERRUPT = 0x93,

  FLEXPWM4_CAPTURE_PWM1_INTERRUPT = 0x94,
  FLEXPWM4_COMPARE_PWM1_INTERRUPT = 0x94,
  FLEXPWM4_RELOAD_PWM1_INTERRUPT = 0x94,

  FLEXPWM4_CAPTURE_PWM2_INTERRUPT = 0x95,
  FLEXPWM4_COMPARE_PWM2_INTERRUPT = 0x95,
  FLEXPWM4_RELOAD_PWM2_INTERRUPT = 0x95,

  FLEXPWM4_CAPTURE_PWM3_INTERRUPT = 0x96,
  FLEXPWM4_COMPARE_PWM3_INTERRUPT = 0x96,
  FLEXPWM4_RELOAD_PWM3_INTERRUPT = 0x96,

  FLEXPWM4_FAULT_INTERRUPT = 0x97,
  FLEXPWM4_RELOAD_ERR = 0x97,

  ENET2_MAC0_PERIODIC_TIMER_OVERFLOW = 0x98,
  ENET2_MAC0_TIME_STAMP_AVAILABLE = 0x98,

  ENET2_MAC0_PAYLOAD_RX_ERR = 0x98,
  ENET2_MAC0_FIFO_TX_UNDERRUN = 0x98,

  ENET2_MAC0_COLLISION_RETRY_LIM = 0x98,
  ENET2_MAC0_LATE_COLLISION = 0x98,

  ENET2_MAC0_ETHERNET_BUS_ERR = 0x98,
  ENET2_MAC0_MII_DATA_TX_DONE = 0x98,

  ENET2_MAC0_RX_BUFFER_DONE = 0x98,
  ENET2_MAC0_RX_FRAME_DONE = 0x98,
  ENET2_MAC0_TX_BUFFER_DONE = 0x98,
  ENET2_MAC0_TX_FRAME_DONE = 0x98,

  ENET2_MAC0_GRACEFUL_STOP = 0x98,
  ENET2_MAC0_RX_BABBLING_ERR = 0x98,
  ENET2_MAC0_TX_BABBLING_ERR = 0x98,
  ENET2_MAC0_TX_WAKEUP_REQ_SYNC = 0x98,

  ENET2_MAC0_1588_TIMER_INTERRUPT_SYNCHRONOUS = 0x99,

  FLEXCAN3_BUSOFF_INTERRUPT = 0x9a,
  FLEXCAN3_CAN_LINE_ERR = 0x9a,
  FLEXCAN3_ORED_INTERRUPTS_FROM_IPI_INT_MB = 0x9a,
  FLEXCAN3_RX_WARNING = 0x9a,
  FLEXCAN3_TX_WARNING = 0x9a,
  FLEXCAN3_WAKE_UP = 0x9a,
  FLEXCAN3_MATCH_IN_PN = 0x9a,
  FLEXCAN3_TIMEOUT_IN_PN = 0x9a,
  FLEXCAN3_CORRECTABLE_ERROR = 0x9a,
  FLEXCAN3_NON_CORRECTABLE_ERR_INT_HOST = 0x9a,
  FLEXCAN3_NON_CORRECTABLE_ERR_INT_INTERNAL = 0x9a,
  FLEXCAN3_BUSOFF_DONE_INTERRUPT = 0x9a,
  FLEXCAN3_FD_ERROR_INTERRUPT = 0x9a,

  RESERVED8 = 0x9b,

  FLEXIO3 = 0x9c,
  FLEXIO3_ASYNC = 0x9c,

  GPIO6_7_8_9_ORED_INTERRUPT = 0x9d,

  RESERVED9 = 0x9e,
  RESERVED9 = 0x9f,

} CM7_IRQ; // Interrup request query

//
//
/** 4.4 DMA Mux (DMA REQUEST SINGALS FOR THE PERIPHIALS IN THE CHIP)*/

typedef enum
{
  // CH 00
  CH00_FLEXIO1_OFF = 0x0,
  CH00_FLEXIO1_ASYNC_OFF = 0x0,
  CH00_FLEXIO1_ON = 0x0,
  CH00_FLEXIO1_ASYNC_ON = 0x0,

  // CH 01
  CH01_FLEXIO2_OFF = 0x1,
  CH01_FLEXIO2_ASYNC_OFF = 0x1,
  CH01_FLEXIO2_ON = 0x1,
  CH01_FLEXIO2_ASYNC_ON = 0x1,

  // CH 02 // CH 03
  CH02_LPUART1_TX_FIFO = 0x2,
  CH02_LPUART1_TX_FIFO_ASYNC = 0x2,
  CH03_LPUART1_RX_FIFO = 0x3,
  CH03_LPUART1_RX_FIFO_ASYNC = 0x3,

  // CH 04 // CH 05
  CH04_LPUART3_TX_FIFO = 0x4,
  CH04_LPUART3_TX_FIFO_ASYNC = 0x4,
  CH05_LPUART3_RX_FIFO = 0x5,
  CH05_LPUART3_RX_FIFO_ASYNC = 0x5,

  // CH 06 // CH 07
  CH06_LPUART5_TX_FIFO = 0x6,
  CH06_LPUART5_TX_FIFO_ASYNC = 0x6,
  CH07_LPUART5_RX_FIFO = 0x7,
  CH07_LPUART5_RX_FIFO_ASYNC = 0x7,

  // CH 08 // CH 09
  CH08_LPUART7_TX_FIFO = 0x8,
  CH08_LPUART7_TX_FIFO_ASYNC = 0x8,
  CH09_LPUART7_RX_FIFO = 0x9,
  CH09_LPUART7_RX_FIFO_ASYNC = 0x9,

  // CH 10
  CH10_RESERVED = 0xa,

  // CH 11 // CH 12
  CH11_FLEXCAN3 = 0xb,
  CH12_CSI_WRITE = 0xc,

  // CH 13 // CH 14
  CH13_LPSPI1_RX_FIFO = 0xd,
  CH13_LPSPI1_RX_FIFO_ASYNC = 0xd,
  CH14_LPSPI1_TX_FIFO = 0xe,
  CH14_LPSPI1_TX_FIFO_ASYNC = 0xe,

  // CH 15 // CH 16
  CH15_LPSPI3_RX_FIFO = 0xf,
  CH15_LPSPI3_RX_FIFO_ASYNC = 0xf,
  CH16_LPSPI3_TX_FIFO = 0x10,
  CH16_LPSPI3_TX_FIFO_ASYNC = 0x10,

  // CH 17
  CH17_LPI2C1_I2C_MASTER_RX_FIFO = 0x11,
  CH17_LPI2C1_I2C_MASTER_RX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_SLAVE_RX_FIFO = 0x11,
  CH17_LPI2C1_I2C_SLAVE_RX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_MASTER_TX_FIFO = 0x11,
  CH17_LPI2C1_I2C_MASTER_TX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_SLAVE_TX_FIFO = 0x11,
  CH17_LPI2C1_I2C_SLAVE_TX_FIFO_ASYNC = 0x11,

  // CH 18
  CH18_LPI2C3_I2C_MASTER_RX_FIFO = 0x12,
  CH18_LPI2C3_I2C_MASTER_RX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_SLAVE_RX_FIFO = 0x12,
  CH18_LPI2C3_I2C_SLAVE_RX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_MASTER_TX_FIFO = 0x12,
  CH18_LPI2C3_I2C_MASTER_TX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_SLAVE_TX_FIFO = 0x12,
  CH18_LPI2C3_I2C_SLAVE_TX_FIFO_ASYNC = 0x12,

  // CH 19 // CH 20 // CH 21 // CH 22
  CH19_SAI1_RX_FIFO = 0x13,
  CH20_SAI1_TX_FIFO = 0x14,
  CH21_SAI2_RX_FIFO = 0x15,
  CH22_SAI2_TX_FIFO = 0x16,

  // CH 23 // CH 24
  CH23_ADC_ETC = 0x17,
  CH24_ADC1 = 0x18,

  CH25_ACMP1_DMA = 0x19,
  CH26_ACMP3_DMA = 0x1a,

  CH27_RESERVED = 0x1b,

  CH28_FLEXSPI_RX_FIFO = 0x1c,
  CH29_FLEXSPI_TX_FIFO = 0x1d,

  CH30_XBAR1_REQ0 = 0x1e,
  CH31_XBAR1_REQ1 = 0x1f,

  CH32_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM0 = 0x20,
  CH33_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM1 = 0x21,
  CH34_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM2 = 0x22,
  CH35_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM3 = 0x23,

  CH36_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM0 = 0x24,
  CH37_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM1 = 0x25,
  CH38_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM2 = 0x26,
  CH39_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM3 = 0x27,

  CH40_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM0 = 0x28,
  CH41_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM1 = 0x29,
  CH42_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM2 = 0x2a,
  CH43_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM3 = 0x2b,

  CH44_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM0 = 0x2c,
  CH45_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM1 = 0x2d,
  CH46_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM2 = 0x2e,
  CH47_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM3 = 0x2f,

  CH48_QTIMER1_READ_CAPTURE_IN_TIMER0 = 0x30,
  CH49_QTIMER1_READ_CAPTURE_IN_TIMER1 = 0x31,
  CH50_QTIMER1_READ_CAPTURE_IN_TIMER2 = 0x32,
  CH51_QTIMER1_READ_CAPTURE_IN_TIMER3 = 0x33,

  CH52_QTIMER1_WRITE_CMPLD1_INTIMER0 = 0x34,
  CH52_QTIMER1_WRITE_CMPLD2_INTIMER1 = 0x34,

  CH53_QTIMER1_WRITE_CMPLD1_INTIMER1 = 0x35,
  CH53_QTIMER1_WRITE_CMPLD2_INTIMER0 = 0x35,

  CH54_QTIMER1_WRITE_CMPLD1_INTIMER2 = 0x36,
  CH54_QTIMER1_WRITE_CMPLD2_INTIMER3 = 0x36,

  CH55_QTIMER1_WRITE_CMPLD1_INTIMER3 = 0x37,
  CH55_QTIMER1_WRITE_CMPLD2_INTIMER2 = 0x37,

  CH56_QTIMER3_WRITE_CAPT_INTIMER0 = 0x38,
  CH56_QTIMER3_WRITE_CMPLD1_INTIMER0 = 0x38,
  CH56_QTIMER3_WRITE_CMPLD2_INTIMER1 = 0x38,

  CH57_QTIMER3_WRITE_CAPT_INTIMER1 = 0x39,
  CH57_QTIMER3_WRITE_CMPLD1_INTIMER1 = 0x39,
  CH57_QTIMER3_WRITE_CMPLD2_INTIMER0 = 0x39,

  CH58_QTIMER3_WRITE_CAPT_INTIMER2 = 0x3a,
  CH58_QTIMER3_WRITE_CMPLD1_INTIMER2 = 0x3a,
  CH58_QTIMER3_WRITE_CMPLD2_INTIMER3 = 0x3a,

  CH59_QTIMER3_WRITE_CAPT_INTIMER3 = 0x3b,
  CH59_QTIMER3_WRITE_CMPLD1_INTIMER3 = 0x3b,
  CH59_QTIMER3_WRITE_CMPLD2_INTIMER2 = 0x3b,

  CH60_FLEXSPI2_RX_FIFO = 0x3c,
  CH61_FLEXSPI2_TX_FIFO = 0x3d,
  CH62_RESERVED = 0x3e,
  CH63_RESERVED = 0x3f,

  CH64_FLEXIO1_REQ_2 = 0x40,
  CH64_FLEXIO1_ASYNC_REQ_2 = 0x40,
  CH64_FLEXIO1_REQ_3 = 0x40,
  CH64_FLEXIO1_ASYNC_REQ_3 = 0x40,

  CH65_FLEXIO1_REQ_2 = 0x41,
  CH65_FLEXIO1_ASYNC_REQ_2 = 0x41,
  CH65_FLEXIO1_REQ_3 = 0x41,
  CH65_FLEXIO1_ASYNC_REQ_3 = 0x41,

  CH66_LPUART2_TX_FIFO = 0x42,
  CH66_LPUART2_ASYNC_TX_FIFO = 0x42,

  CH67_LPUART2_RX_FIFO = 0x43,
  CH67_LPUART2_RX_FIFO_Async = 0x43,

  CH68_LPUART4_TX_FIFO = 0x44,
  CH68_LPUART4_TX_FIFO_Async = 0x44,
  CH69_LPUART4_RX_FIFO = 0x45,
  CH69_LPUART4_RX_FIFO_Async = 0x45,

  CH70_LPUART6_TX_FIFO = 0x46,
  CH70_LPUART6_TX_FIFO_Async = 0x46,
  CH71_LPUART6_RX_FIFO = 0x47,
  CH71_LPUART6_RX_FIFO_Async = 0x47,

  CH72_LPUART8_TX_FIFO_ = 0x48,
  CH72_LPUART8_TX_FIFO_Async = 0x48,
  CH73_LPUART8_RX_FIFO = 0x49,
  CH73_LPUART8_RX_FIFO_Async = 0x49,

  CH74_Reserved = 0x4a,

  CH75_PXP_DMA_Event = 0x4b,
  CH76_LCDIF_DMA_Event = 0x4c,

  CH77_LPSPI2_RX_FIFO = 0x4d,
  CH77_LPSPI2_RX_FIFO_Async = 0x4d,
  CH78_LPSPI2_TX_FIFO = 0x4e,
  CH78_LPSPI2_TX_FIFO_Async = 0x4e,

  CH79_LPSPI4_RX_FIFO = 0x4f,
  CH79_LPSPI4_RX_FIFO_Async = 0x4f,
  CH80_LPSPI4_TX_FIFO = 0x50,
  CH80_LPSPI4_TX_FIFO_Async = 0x50,

  CH81_LPI2C2_Master_RX_FIFO_DMA = 0x51,
  CH81_LPI2C2_Master_RX_FIFO_Async = 0x51,
  CH81_LPI2C2_Slave_RX_FIFO = 0x51,
  CH81_LPI2C2_Slave_RX_FIFO_Async = 0x51,
  CH81_LPI2C2_Master_TX_FIFO = 0x51,
  CH81_LPI2C2_Master_TX_FIFO_Async = 0x51,
  CH81_LPI2C2_Master_TX_FIFO = 0x51,
  CH81_LPI2C2_Master_TX_FIFO_Async = 0x51,
  CH82_LPI2C4_Master_RX_FIFO = 0x52,
  CH82_LPI2C4_Master_RX_FIFO_Asyn = 0x52,
  CH82_LPI2C4_Slave_RX_FIFO = 0x52,
  CH82_LPI2C4_Slave_RX_FIFO_Async = 0x52,
  CH82_LPI2C4_Master_TX_FIFO = 0x52,
  CH82_LPI2C4_Master_TX_FIFO_Async = 0x52,
  CH82_LPI2C4_Master_TX_FIFO = 0x52,
  CH82_LPI2C4_Master_TX_FIFO_Async = 0x52,

  CH83_SAI3_RX_FIFO = 0x53,
  CH84_SAI3_TX_FIFO = 0x54,

  CH85_SPDIF_RX = 0x55,
  CH86_SPDIF_TX = 0x56,

  CH87_Reserved = 0x57,
  CH88_ADC2 = 0x58,
  CH89_ACMP2 = 0x59,
  CH90_ACMP4 = 0x5a,

  CH91_Reserved = 0x5b,
  CH92_ENET_TIMER_REQ0 = 0x5c,
  CH93_ENET_TIMER_REQ1 = 0x5d,

  CH94_XBAR1_2 = 0x5e,
  CH95_XBAR1_3 = 0x5f,

  CH96_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM0 = 0x60,
  CH97_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM1 = 0x61,
  CH98_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM2 = 0x62,
  CH99_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM3 = 0x63,

  CH100_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM0 = 0x64,
  CH101_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM1 = 0x65,
  CH102_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM2 = 0x66,
  CH103_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM3 = 0x67,

  CH104_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM0 = 0x68,
  CH105_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM1 = 0x69,
  CH106_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM2 = 0x6a,
  CH107_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM3 = 0x6b,

  CH108_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM0 = 0x6c,
  CH109_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM1 = 0x6d,
  CH110_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM2 = 0x6e,
  CH111_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM3 = 0x6f,

  CH112_QTIMER2_READ_REQUEST_CAPT_timer0 = 0x70,
  CH113_QTIMER2_READ_REQUEST_CAPT_timer1 = 0x71,
  CH114_QTIMER2_READ_REQUEST_CAPT_timer2 = 0x72,
  CH115_QTIMER2_READ_REQUEST_CAPT_timer3 = 0x73,

  CH116_QTIMER2_WRITE_REQ_cmpld1_intimer0 = 0x74,
  CH116_QTIMER2_WRITE_REQ_cmpld2_intimer1 = 0x74,
  CH117_QTIMER2_WRITE_REQ_cmpld1_intimer1 = 0x75,
  CH117_QTIMER2_WRITE_REQ_cmpld2_intimer0 = 0x75,

  CH118_QTIMER2_WRITE_REQ_cmpld1_intimer2 = 0x76,
  CH118_QTIMER2_WRITE_REQ_cmpld2_intimer3 = 0x76,
  CH119_QTIMER2_WRITE_REQ_cmpld1_intimer3 = 0x77,
  CH119_QTIMER2_WRITE_REQ_cmpld2_intimer2 = 0x77,

  CH120_QTIMER4_WRITE_REQ_capt_intimer0 = 0x78,
  CH120_QTIMER4_WRITE_REQ_cmpld1_intimer0 = 0x78,
  CH120_QTIMER4_WRITE_REQ_cmpld2_intimer1 = 0x78,

  CH121_QTIMER4_WRITE_REQ_capt_intimer1 = 0x79,
  CH121_QTIMER4_WRITE_REQ_cmpld1_intimer1 = 0x79,
  CH121_QTIMER4_WRITE_REQ_cmpld2_intimer0 = 0x79,

  CH122_QTIMER4_WRITE_REQ_capt_intimer2 = 0x7a,
  CH122_QTIMER4_WRITE_REQ_cmpld1_intimer2 = 0x7a,
  CH122_QTIMER4_WRITE_REQ_cmpld2_intimer3 = 0x7a,

  CH123_QTIMER4_WRITE_REQ_capt_intimer3 = 0x7b,
  CH123_QTIMER4_WRITE_REQ_cmpld1_intimer3 = 0x7b,
  CH123_QTIMER4_WRITE_REQ_cmpld2_intimer2 = 0x7b,

  CH124_ENET2_TIMER_REQ0 = 0x7c,
  CH125_ENET2_TIMER_REQ1 = 0x7d,
  CH126_RESERVED = 0x7e,
  CH127_RESERVED = 0x7f,

} DMA_REQUESTS_MUX_CHANNELS; // DirectMemoryAccessMultiplexer;

/**
 *  @brief: Modes of Operation for MDA channels
 *
 *  DISOABLED MODE -
 *  In this mode, the DMA channel is disabled. Because disabling and enabling of
 *  DMAchannels is done primarily via the DMA configuration registers, this
 *  mode is usedmainly as the reset state for a DMA channel in the DMA channel
 *  MUX. It may alsobe used to temporarily suspend a DMA channel while
 *  reconfiguration of the systemtakes place, for example, changing the period
 *  of a DMA trigger.
 *
 *  NORMAL MODE -
 *  In this mode, a DMA source is routed directly to the specified DMA channel.
 *  Theoperation of the DMAMUX in this mode is completely transparent to the
 *  system.
 *
 *  PERIODIC TRIGGER MODE -
 *  In this mode, a DMA source may only request a DMA transfer, such as when
 *  atransmit buffer becomes empty or a receive buffer becomes full,
 *  periodically.Configuration of the period is done in the registers of the
 *  periodic interrupt timer(PIT). This mode is available only for channels 0
 *  to 3.
 *
 **/
typedef enum DMA_CH_MODE
{
  DISABLED,
  NORMAL,
  PERIODIC_TRIGGER
};

// DMA_CH_MUX Register Memory Map p.85, chapter 5.6
#define CH_MUX_BASE MAP_32BIT_REGISTER(0x400ec000)
#define CHCFG0_CHCFG31 CH_MUX_BASE._0x000
#define CHCFG0 CH_MUX_BASE._0x000
#define CHCFG1 CH_MUX_BASE._0x004
#define CHCFG2 CH_MUX_BASE._0x008
#define CHCFG3 CH_MUX_BASE._0x00c
#define CHCFG4 CH_MUX_BASE._0x010
#define CHCFG5 CH_MUX_BASE._0x014
#define CHCFG6 CH_MUX_BASE._0x018
#define CHCFG7 CH_MUX_BASE._0x01c

#define CHCFG8 CH_MUX_BASE._0x020
#define CHCFG9 CH_MUX_BASE._0x024
#define CHCFG10 CH_MUX_BASE._0x028
#define CHCFG11 CH_MUX_BASE._0x02c
#define CHCFG12 CH_MUX_BASE._0x030
#define CHCFG13 CH_MUX_BASE._0x034
#define CHCFG14 CH_MUX_BASE._0x038
#define CHCFG15 CH_MUX_BASE._0x03c

#define CHCFG16 CH_MUX_BASE._0x040
#define CHCFG17 CH_MUX_BASE._0x044
#define CHCFG18 CH_MUX_BASE._0x048
#define CHCFG19 CH_MUX_BASE._0x04c
#define CHCFG20 CH_MUX_BASE._0x050
#define CHCFG21 CH_MUX_BASE._0x054
#define CHCFG22 CH_MUX_BASE._0x058
#define CHCFG23 CH_MUX_BASE._0x05c

#define CHCFG24 CH_MUX_BASE._0x060
#define CHCFG25 CH_MUX_BASE._0x064
#define CHCFG26 CH_MUX_BASE._0x068
#define CHCFG27 CH_MUX_BASE._0x06c
#define CHCFG28 CH_MUX_BASE._0x070
#define CHCFG29 CH_MUX_BASE._0x074
#define CHCFG30 CH_MUX_BASE._0x078
#define CHCFG31 CH_MUX_BASE._0x07c

/**
 * @brief: eDMA Memory Map/Register (Enhanced Direct Memory Access) p.89 ,
 * chapter 6 The eDMA's programming model is partitioned into two regions: • The
 * first region defines a number of registers providing control functions • The
 * second region corresponds to the local transfer control descriptor (TCD)
 * memory
 *
 * TCD memory:
 * Each channel requires a 32-byte transfer control descriptor for defining the
 * desired data movement operation. The channel descriptors are stored in the
 * local memory insequential order: channel 0, channel 1, ... channel 31. Each
 * TCDn definition is presentedas 11 registers of 16 or 32 bit
 */
// DMA Memory map/register  p.115 - P. 173, chapter 6.6  // ACCESS, DESCRIPTION
#define DMA_32BASE MAP_32BIT_REGISTER(0x400e8000)
#define DMA_8BASE0 MAP_8BIT_REGISTER(0x400e8000)
#define DMA_CR DMA_32BASE._0x0000 // R/W, Control Register
#define DMA_ESR DMA_32BASE._0x0004 // READ ONLY, Err. Status Register
#define DMA_ERQR DMA_32BASE._0x000c // R/W, Enable Request Register

#define DMA_EEI DMA_32BASE._0x0014 // WORZ, Enable Err. Interrupt Register
#define DMA_CEEI DMA_8BASE0._0x018 // WORZ, Clear Enable Err. Interrupt Register
#define DMA_SEEI DMA_8BASE0._0x019 // WORZ, Set Enable Err. Interrupt Register
#define DMA_CERQR DMA_8BASE0._0x01a // WORZ, Clear Enable Request Register
#define DMA_SERQR DMA_8BASE0._0x01b // WORZ, Set Enable Request Register

#define DMA_CDNE DMA_32BASE._0x001c // WORZ, Clear DONE Status Bit Register
#define DMA_SSBR DMA_8BASE0._0x01d // WORZ, Set Start Bit Register /// FIX
#define DMA_CERR DMA_8BASE0._0x01e // WORZ, Clear Error Register
#define DMA_CINT DMA_8BASE0._0x01f // WORZ, Clear Interrupt Request Register

#define DMA_INT DMA_32BASE._0x0024 // W1C, Interrupt Request Register
#define DMA_ERR DMA_32BASE._0x002c // W1C, Error Register
#define DMA_HRSR DMA_32BASE._0x0034 // READ ONLY, Hardware Req. Stat. Register
#define DMA_EARS DMA_32BASE._0x0044 // R/W, Enable Async. Req. in Stop Register

// Channel Priority Register  -- 6.6.5.18
#define DMA_8BASE1 MAP_8BIT_REGISTER(0x400e8000 + 0x100)
#define DMA_CHPRI03 DMA_8BASE1._0x000 // R/W, Channel Priority 3 Register
#define DMA_CHPRI02 DMA_8BASE1._0x001 // R/W, Channel Priority 2 Register
#define DMA_CHPRI01 DMA_8BASE1._0x002 // R/W, Channel Priority 1 Register
#define DMA_CHPRI00 DMA_8BASE1._0x003 // R/W, Channel Priority 0 Register

#define DMA_CHPRI07 DMA_8BASE1._0x004 // R/W, Channel Priority 7 Register
#define DMA_CHPRI06 DMA_8BASE1._0x005 // R/W, Channel Priority 6 Register
#define DMA_CHPRI05 DMA_8BASE1._0x006 // R/W, Channel Priority 5 Register
#define DMA_CHPRI04 DMA_8BASE1._0x007 // R/W, Channel Priority 4 Register

#define DMA_CHPRI11 DMA_8BASE1._0x008 // R/W, Channel Priority 11 Register
#define DMA_CHPRI10 DMA_8BASE1._0x009 // R/W, Channel Priority 10 Register
#define DMA_CHPRI09 DMA_8BASE1._0x00a // R/W, Channel Priority 9 Register
#define DMA_CHPRI08 DMA_8BASE1._0x00b // R/W, Channel Priority 8 Register

#define DMA_CHPRI15 DMA_8BASE1._0x00c // R/W, Channel Priority 15 Register
#define DMA_CHPRI14 DMA_8BASE1._0x00d // R/W, Channel Priority 14 Register
#define DMA_CHPRI13 DMA_8BASE1._0x00e // R/W, Channel Priority 13 Register
#define DMA_CHPRI12 DMA_8BASE1._0x00f // R/W, Channel Priority 12 Register

#define DMA_CHPRI19 DMA_8BASE1._0x010 // R/W, Channel Priority 19 Register
#define DMA_CHPRI18 DMA_8BASE1._0x011 // R/W, Channel Priority 18 Register
#define DMA_CHPRI17 DMA_8BASE1._0x012 // R/W, Channel Priority 17 Register
#define DMA_CHPRI16 DMA_8BASE1._0x013 // R/W, Channel Priority 16 Register

#define DMA_CHPRI23 DMA_8BASE1._0x014 // R/W, Channel Priority 23 Register
#define DMA_CHPRI22 DMA_8BASE1._0x015 // R/W, Channel Priority 22 Register
#define DMA_CHPRI21 DMA_8BASE1._0x016 // R/W, Channel Priority 21 Register
#define DMA_CHPRI20 DMA_8BASE1._0x017 // R/W, Channel Priority 20 Register

#define DMA_CHPRI27 DMA_8BASE1._0x018 // R/W, Channel Priority 27 Register
#define DMA_CHPRI26 DMA_8BASE1._0x019 // R/W, Channel Priority 26 Register
#define DMA_CHPRI25 DMA_8BASE1._0x01a // R/W, Channel Priority 25 Register
#define DMA_CHPRI24 DMA_8BASE1._0x01b // R/W, Channel Priority 24 Register

#define DMA_CHPRI31 DMA_8BASE1._0x01c // R/W, Channel Priority 31 Register
#define DMA_CHPRI30 DMA_8BASE1._0x01d // R/W, Channel Priority 30 Register
#define DMA_CHPRI29 DMA_8BASE1._0x01e // R/W, Channel Priority 29 Register
#define DMA_CHPRI28 DMA_8BASE1._0x01f // R/W, Channel Priority 28 Register

// TCD Source Addresses [0,31] -- 6.6.5.19
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE00 MAP_32BIT_REGISTER(0x400e9000)
#define DMA_TCD00_SADDR DMA_TCD_32BASE00._0x0000 // R/W, TCD Source Address 00
#define DMA_TCD01_SADDR DMA_TCD_32BASE00._0x0020 // R/W, TCD Source Address 01
#define DMA_TCD02_SADDR DMA_TCD_32BASE00._0x0040 // R/W, TCD Source Address 02
#define DMA_TCD03_SADDR DMA_TCD_32BASE00._0x0060 // R/W, TCD Source Address 03

#define DMA_TCD04_SADDR DMA_TCD_32BASE00._0x0080 // R/W, TCD Source Address 04
#define DMA_TCD05_SADDR DMA_TCD_32BASE00._0x00a0 // R/W, TCD Source Address 05
#define DMA_TCD06_SADDR DMA_TCD_32BASE00._0x00c0 // R/W, TCD Source Address 06
#define DMA_TCD07_SADDR DMA_TCD_32BASE00._0x00e0 // R/W, TCD Source Address 07

#define DMA_TCD08_SADDR DMA_TCD_32BASE00._0x0100 // R/W, TCD Source Address 08
#define DMA_TCD09_SADDR DMA_TCD_32BASE00._0x0120 // R/W, TCD Source Address 09
#define DMA_TCD10_SADDR DMA_TCD_32BASE00._0x0140 // R/W, TCD Source Address 10
#define DMA_TCD11_SADDR DMA_TCD_32BASE00._0x0160 // R/W, TCD Source Address 11

#define DMA_TCD12_SADDR DMA_TCD_32BASE00._0x0180 // R/W, TCD Source Address 12
#define DMA_TCD13_SADDR DMA_TCD_32BASE00._0x01a0 // R/W, TCD Source Address 13
#define DMA_TCD14_SADDR DMA_TCD_32BASE00._0x01c0 // R/W, TCD Source Address 14
#define DMA_TCD15_SADDR DMA_TCD_32BASE00._0x01e0 // R/W, TCD Source Address 15

#define DMA_TCD16_SADDR DMA_TCD_32BASE00._0x0200 // R/W, TCD Source Address 16
#define DMA_TCD17_SADDR DMA_TCD_32BASE00._0x0220 // R/W, TCD Source Address 17
#define DMA_TCD18_SADDR DMA_TCD_32BASE00._0x0240 // R/W, TCD Source Address 18
#define DMA_TCD19_SADDR DMA_TCD_32BASE00._0x0260 // R/W, TCD Source Address 19

#define DMA_TCD20_SADDR DMA_TCD_32BASE00._0x0280 // R/W, TCD Source Address 20
#define DMA_TCD21_SADDR DMA_TCD_32BASE00._0x02a0 // R/W, TCD Source Address 21
#define DMA_TCD22_SADDR DMA_TCD_32BASE00._0x02c0 // R/W, TCD Source Address 22
#define DMA_TCD23_SADDR DMA_TCD_32BASE00._0x02e0 // R/W, TCD Source Address 23

#define DMA_TCD24_SADDR DMA_TCD_32BASE00._0x0300 // R/W, TCD Source Address 24
#define DMA_TCD25_SADDR DMA_TCD_32BASE00._0x0320 // R/W, TCD Source Address 25
#define DMA_TCD26_SADDR DMA_TCD_32BASE00._0x0340 // R/W, TCD Source Address 26
#define DMA_TCD27_SADDR DMA_TCD_32BASE00._0x0360 // R/W, TCD Source Address 27

#define DMA_TCD28_SADDR DMA_TCD_32BASE00._0x0380 // R/W, TCD Source Address 28
#define DMA_TCD29_SADDR DMA_TCD_32BASE00._0x03a0 // R/W, TCD Source Address 29
#define DMA_TCD30_SADDR DMA_TCD_32BASE00._0x03c0 // R/W, TCD Source Address 30
#define DMA_TCD31_SADDR DMA_TCD_32BASE00._0x03e0 // R/W, TCD Source Address 31
//==

// TCD Signed Source Address Offsets [0,31] -- 6.6.5.20
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE00 MAP_16BIT_REGISTER(0x400e9004)
#define DMA_TCD00_OFFS DMA_TCD_16BASE00._0x0000 // R/W, TCD Src. Addr. Offs. 00
#define DMA_TCD01_OFFS DMA_TCD_16BASE00._0x0020 // R/W, TCD Src. Addr. Offs. 01
#define DMA_TCD02_OFFS DMA_TCD_16BASE00._0x0040 // R/W, TCD Src. Addr. Offs. 02
#define DMA_TCD03_OFFS DMA_TCD_16BASE00._0x0060 // R/W, TCD Src. Addr. Offs. 03

#define DMA_TCD04_OFFS DMA_TCD_16BASE00._0x0080 // R/W, TCD Src. Addr. Offs. 04
#define DMA_TCD05_OFFS DMA_TCD_16BASE00._0x00a0 // R/W, TCD Src. Addr. Offs. 05
#define DMA_TCD06_OFFS DMA_TCD_16BASE00._0x00c0 // R/W, TCD Src. Addr. Offs. 06
#define DMA_TCD07_OFFS DMA_TCD_16BASE00._0x00e0 // R/W, TCD Src. Addr. Offs. 07

#define DMA_TCD08_OFFS DMA_TCD_16BASE00._0x0100 // R/W, TCD Src. Addr. Offs. 08
#define DMA_TCD09_OFFS DMA_TCD_16BASE00._0x0120 // R/W, TCD Src. Addr. Offs. 09
#define DMA_TCD10_OFFS DMA_TCD_16BASE00._0x0140 // R/W, TCD Src. Addr. Offs. 10
#define DMA_TCD11_OFFS DMA_TCD_16BASE00._0x0160 // R/W, TCD Src. Addr. Offs. 11

#define DMA_TCD12_OFFS DMA_TCD_16BASE00._0x0180 // R/W, TCD Src. Addr. Offs. 12
#define DMA_TCD13_OFFS DMA_TCD_16BASE00._0x01a0 // R/W, TCD Src. Addr. Offs. 13
#define DMA_TCD14_OFFS DMA_TCD_16BASE00._0x01c0 // R/W, TCD Src. Addr. Offs. 14
#define DMA_TCD15_OFFS DMA_TCD_16BASE00._0x01e0 // R/W, TCD Src. Addr. Offs. 15

#define DMA_TCD16_OFFS DMA_TCD_16BASE00._0x0200 // R/W, TCD Src. Addr. Offs. 16
#define DMA_TCD17_OFFS DMA_TCD_16BASE00._0x0220 // R/W, TCD Src. Addr. Offs. 17
#define DMA_TCD18_OFFS DMA_TCD_16BASE00._0x0240 // R/W, TCD Src. Addr. Offs. 18
#define DMA_TCD19_OFFS DMA_TCD_16BASE00._0x0260 // R/W, TCD Src. Addr. Offs. 19

#define DMA_TCD20_OFFS DMA_TCD_16BASE00._0x0280 // R/W, TCD Src. Addr. Offs. 20
#define DMA_TCD21_OFFS DMA_TCD_16BASE00._0x02a0 // R/W, TCD Src. Addr. Offs. 21
#define DMA_TCD22_OFFS DMA_TCD_16BASE00._0x02c0 // R/W, TCD Src. Addr. Offs. 22
#define DMA_TCD23_OFFS DMA_TCD_16BASE00._0x02e0 // R/W, TCD Src. Addr. Offs. 23

#define DMA_TCD24_OFFS DMA_TCD_16BASE00._0x0300 // R/W, TCD Src. Addr. Offs. 24
#define DMA_TCD25_OFFS DMA_TCD_16BASE00._0x0320 // R/W, TCD Src. Addr. Offs. 25
#define DMA_TCD26_OFFS DMA_TCD_16BASE00._0x0340 // R/W, TCD Src. Addr. Offs. 26
#define DMA_TCD27_OFFS DMA_TCD_16BASE00._0x0360 // R/W, TCD Src. Addr. Offs. 27

#define DMA_TCD28_OFFS DMA_TCD_16BASE00._0x0380 // R/W, TCD Src. Addr. Offs. 28
#define DMA_TCD29_OFFS DMA_TCD_16BASE00._0x03a0 // R/W, TCD Src. Addr. Offs. 29
#define DMA_TCD30_OFFS DMA_TCD_16BASE00._0x03c0 // R/W, TCD Src. Addr. Offs. 30
#define DMA_TCD31_OFFS DMA_TCD_16BASE00._0x03e0 // R/W, TCD Src. Addr. Offs. 31
//==

// TCD Transfer Attributes  [0,31] -- 6.6.5.21
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE01 MAP_16BIT_REGISTER(0x400e9006)
#define DMA_TCD00_ATTR DMA_TCD_16BASE01._0x0000 // R/W, TCD Trans. Attr. 00
#define DMA_TCD01_ATTR DMA_TCD_16BASE01._0x0020 // R/W, TCD Trans. Attr. 01
#define DMA_TCD02_ATTR DMA_TCD_16BASE01._0x0040 // R/W, TCD Trans. Attr. 02
#define DMA_TCD03_ATTR DMA_TCD_16BASE01._0x0060 // R/W, TCD Trans. Attr. 03

#define DMA_TCD04_ATTR DMA_TCD_16BASE01._0x0080 // R/W, TCD Trans. Attr. 04
#define DMA_TCD05_ATTR DMA_TCD_16BASE01._0x00a0 // R/W, TCD Trans. Attr. 05
#define DMA_TCD06_ATTR DMA_TCD_16BASE01._0x00c0 // R/W, TCD Trans. Attr. 06
#define DMA_TCD07_ATTR DMA_TCD_16BASE01._0x00e0 // R/W, TCD Trans. Attr. 07

#define DMA_TCD08_ATTR DMA_TCD_16BASE01._0x0100 // R/W, TCD Trans. Attr. 08
#define DMA_TCD09_ATTR DMA_TCD_16BASE01._0x0120 // R/W, TCD Trans. Attr. 09
#define DMA_TCD10_ATTR DMA_TCD_16BASE01._0x0140 // R/W, TCD Trans. Attr. 10
#define DMA_TCD11_ATTR DMA_TCD_16BASE01._0x0160 // R/W, TCD Trans. Attr. 11

#define DMA_TCD12_ATTR DMA_TCD_16BASE01._0x0180 // R/W, TCD Trans. Attr. 12
#define DMA_TCD13_ATTR DMA_TCD_16BASE01._0x01a0 // R/W, TCD Trans. Attr. 13
#define DMA_TCD14_ATTR DMA_TCD_16BASE01._0x01c0 // R/W, TCD Trans. Attr. 14
#define DMA_TCD15_ATTR DMA_TCD_16BASE01._0x01e0 // R/W, TCD Trans. Attr. 15

#define DMA_TCD16_ATTR DMA_TCD_16BASE01._0x0200 // R/W, TCD Trans. Attr. 16
#define DMA_TCD17_ATTR DMA_TCD_16BASE01._0x0220 // R/W, TCD Trans. Attr. 17
#define DMA_TCD18_ATTR DMA_TCD_16BASE01._0x0240 // R/W, TCD Trans. Attr. 18
#define DMA_TCD19_ATTR DMA_TCD_16BASE01._0x0260 // R/W, TCD Trans. Attr. 19

#define DMA_TCD20_ATTR DMA_TCD_16BASE01._0x0280 // R/W, TCD Trans. Attr. 20
#define DMA_TCD21_ATTR DMA_TCD_16BASE01._0x02a0 // R/W, TCD Trans. Attr. 21
#define DMA_TCD22_ATTR DMA_TCD_16BASE01._0x02c0 // R/W, TCD Trans. Attr. 22
#define DMA_TCD23_ATTR DMA_TCD_16BASE01._0x02e0 // R/W, TCD Trans. Attr. 23

#define DMA_TCD24_ATTR DMA_TCD_16BASE01._0x0300 // R/W, TCD Trans. Attr. 24
#define DMA_TCD25_ATTR DMA_TCD_16BASE01._0x0320 // R/W, TCD Trans. Attr. 25
#define DMA_TCD26_ATTR DMA_TCD_16BASE01._0x0340 // R/W, TCD Trans. Attr. 26
#define DMA_TCD27_ATTR DMA_TCD_16BASE01._0x0360 // R/W, TCD Trans. Attr. 27

#define DMA_TCD28_ATTR DMA_TCD_16BASE01._0x0380 // R/W, TCD Trans. Attr. 28
#define DMA_TCD29_ATTR DMA_TCD_16BASE01._0x03a0 // R/W, TCD Trans. Attr. 29
#define DMA_TCD30_ATTR DMA_TCD_16BASE01._0x03c0 // R/W, TCD Trans. Attr. 30
#define DMA_TCD31_ATTR DMA_TCD_16BASE01._0x03e0 // R/W, TCD Trans. Attr. 31

//==

{
  {
  // TCD MBC NBYTES MLNO
// TCD Minor Byte Count  [0,31] -- 6.6.5.22
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLNO DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLNO DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLNO DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLNO DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLNO DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLNO DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLNO DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLNO DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLNO DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLNO DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLNO DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLNO DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLNO DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLNO DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLNO DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLNO DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLNO DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLNO DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLNO DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLNO DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLNO DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLNO DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLNO DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLNO DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLNO DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLNO DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLNO DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLNO DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLNO DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLNO DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLNO DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLNO DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  } {
  // TCD MBC NBYTES MLOFFNO
// TCD Minor Byte Count  [0,31] -- 6.6.5.23
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLOFFNO DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLOFFNO DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLOFFNO DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLOFFNO DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLOFFNO DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLOFFNO DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLOFFNO DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLOFFNO DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLOFFNO DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLOFFNO DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLOFFNO DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLOFFNO DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLOFFNO DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLOFFNO DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLOFFNO DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLOFFNO DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLOFFNO DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLOFFNO DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLOFFNO DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLOFFNO DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLOFFNO DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLOFFNO DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLOFFNO DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLOFFNO DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLOFFNO DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLOFFNO DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLOFFNO DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLOFFNO DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLOFFNO DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLOFFNO DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLOFFNO DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLOFFNO DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  } { // TCD MBC NBYTES MLOFFYES
// TCD Minor Byte Count  [0,31] -- 6.6.5.24
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLOFFYES DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLOFFYES DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLOFFYES DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLOFFYES DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLOFFYES DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLOFFYES DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLOFFYES DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLOFFYES DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLOFFYES DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLOFFYES DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLOFFYES DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLOFFYES DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLOFFYES DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLOFFYES DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLOFFYES DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLOFFYES DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLOFFYES DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLOFFYES DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLOFFYES DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLOFFYES DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLOFFYES DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLOFFYES DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLOFFYES DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLOFFYES DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLOFFYES DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLOFFYES DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLOFFYES DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLOFFYES DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLOFFYES DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLOFFYES DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLOFFYES DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLOFFYES DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  }
}
//==
// TCD Last Source Address Adjustment  [0,31] -- 6.6.5.25
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE02 MAP_32BIT_REGISTER(0x400e900c)

#define DMA_TCD00_LSAA DMA_TCD_32BASE02._0x0000 // R/W, TCD LSAA 00
#define DMA_TCD01_LSAA DMA_TCD_32BASE02._0x0020 // R/W, TCD LSAA 01
#define DMA_TCD02_LSAA DMA_TCD_32BASE02._0x0040 // R/W, TCD LSAA 02
#define DMA_TCD03_LSAA DMA_TCD_32BASE02._0x0060 // R/W, TCD LSAA 03

#define DMA_TCD04_LSAA DMA_TCD_32BASE02._0x0080 // R/W, TCD LSAA 04
#define DMA_TCD05_LSAA DMA_TCD_32BASE02._0x00a0 // R/W, TCD LSAA 05
#define DMA_TCD06_LSAA DMA_TCD_32BASE02._0x00c0 // R/W, TCD LSAA 06
#define DMA_TCD07_LSAA DMA_TCD_32BASE02._0x00e0 // R/W, TCD LSAA 07

#define DMA_TCD08_LSAA DMA_TCD_32BASE02._0x0100 // R/W, TCD LSAA 08
#define DMA_TCD09_LSAA DMA_TCD_32BASE02._0x0120 // R/W, TCD LSAA 09
#define DMA_TCD10_LSAA DMA_TCD_32BASE02._0x0140 // R/W, TCD LSAA 10
#define DMA_TCD11_LSAA DMA_TCD_32BASE02._0x0160 // R/W, TCD LSAA 11

#define DMA_TCD12_LSAA DMA_TCD_32BASE02._0x0180 // R/W, TCD LSAA 12
#define DMA_TCD13_LSAA DMA_TCD_32BASE02._0x01a0 // R/W, TCD LSAA 13
#define DMA_TCD14_LSAA DMA_TCD_32BASE02._0x01c0 // R/W, TCD LSAA 14
#define DMA_TCD15_LSAA DMA_TCD_32BASE02._0x01e0 // R/W, TCD LSAA 15

#define DMA_TCD16_LSAA DMA_TCD_32BASE02._0x0200 // R/W, TCD LSAA 16
#define DMA_TCD17_LSAA DMA_TCD_32BASE02._0x0220 // R/W, TCD LSAA 17
#define DMA_TCD18_LSAA DMA_TCD_32BASE02._0x0240 // R/W, TCD LSAA 18
#define DMA_TCD19_LSAA DMA_TCD_32BASE02._0x0260 // R/W, TCD LSAA 19

#define DMA_TCD20_LSAA DMA_TCD_32BASE02._0x0280 // R/W, TCD LSAA 20
#define DMA_TCD21_LSAA DMA_TCD_32BASE02._0x02a0 // R/W, TCD LSAA 21
#define DMA_TCD22_LSAA DMA_TCD_32BASE02._0x02c0 // R/W, TCD LSAA 22
#define DMA_TCD23_LSAA DMA_TCD_32BASE02._0x02e0 // R/W, TCD LSAA 23

#define DMA_TCD24_LSAA DMA_TCD_32BASE02._0x0300 // R/W, TCD LSAA 24
#define DMA_TCD25_LSAA DMA_TCD_32BASE02._0x0320 // R/W, TCD LSAA 25
#define DMA_TCD26_LSAA DMA_TCD_32BASE02._0x0340 // R/W, TCD LSAA 26
#define DMA_TCD27_LSAA DMA_TCD_32BASE02._0x0360 // R/W, TCD LSAA 27

#define DMA_TCD28_LSAA DMA_TCD_32BASE02._0x0380 // R/W, TCD LSAA 28
#define DMA_TCD29_LSAA DMA_TCD_32BASE02._0x03a0 // R/W, TCD LSAA 29
#define DMA_TCD30_LSAA DMA_TCD_32BASE02._0x03c0 // R/W, TCD LSAA 30
#define DMA_TCD31_LSAA DMA_TCD_32BASE02._0x03e0 // R/W, TCD LSAA 31
//==

// TCD Destination Address  [0,31] -- 6.6.5.26
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE03 MAP_32BIT_REGISTER(0x400e9010)
#define DMA_TCD00_DADDR DMA_TCD_32BASE03._0x0000 // R/W, TCD DADDR 00
#define DMA_TCD01_DADDR DMA_TCD_32BASE03._0x0020 // R/W, TCD DADDR 01
#define DMA_TCD02_DADDR DMA_TCD_32BASE03._0x0040 // R/W, TCD DADDR 02
#define DMA_TCD03_DADDR DMA_TCD_32BASE03._0x0060 // R/W, TCD DADDR 03

#define DMA_TCD04_DADDR DMA_TCD_32BASE03._0x0080 // R/W, TCD DADDR 04
#define DMA_TCD05_DADDR DMA_TCD_32BASE03._0x00a0 // R/W, TCD DADDR 05
#define DMA_TCD06_DADDR DMA_TCD_32BASE03._0x00c0 // R/W, TCD DADDR 06
#define DMA_TCD07_DADDR DMA_TCD_32BASE03._0x00e0 // R/W, TCD DADDR 07

#define DMA_TCD08_DADDR DMA_TCD_32BASE03._0x0100 // R/W, TCD DADDR 08
#define DMA_TCD09_DADDR DMA_TCD_32BASE03._0x0120 // R/W, TCD DADDR 09
#define DMA_TCD10_DADDR DMA_TCD_32BASE03._0x0140 // R/W, TCD DADDR 10
#define DMA_TCD11_DADDR DMA_TCD_32BASE03._0x0160 // R/W, TCD DADDR 11

#define DMA_TCD12_DADDR DMA_TCD_32BASE03._0x0180 // R/W, TCD DADDR 12
#define DMA_TCD13_DADDR DMA_TCD_32BASE03._0x01a0 // R/W, TCD DADDR 13
#define DMA_TCD14_DADDR DMA_TCD_32BASE03._0x01c0 // R/W, TCD DADDR 14
#define DMA_TCD15_DADDR DMA_TCD_32BASE03._0x01e0 // R/W, TCD DADDR 15

#define DMA_TCD16_DADDR DMA_TCD_32BASE03._0x0200 // R/W, TCD DADDR 16
#define DMA_TCD17_DADDR DMA_TCD_32BASE03._0x0220 // R/W, TCD DADDR 17
#define DMA_TCD18_DADDR DMA_TCD_32BASE03._0x0240 // R/W, TCD DADDR 18
#define DMA_TCD19_DADDR DMA_TCD_32BASE03._0x0260 // R/W, TCD DADDR 19

#define DMA_TCD20_DADDR DMA_TCD_32BASE03._0x0280 // R/W, TCD DADDR 20
#define DMA_TCD21_DADDR DMA_TCD_32BASE03._0x02a0 // R/W, TCD DADDR 21
#define DMA_TCD22_DADDR DMA_TCD_32BASE03._0x02c0 // R/W, TCD DADDR 22
#define DMA_TCD23_DADDR DMA_TCD_32BASE03._0x02e0 // R/W, TCD DADDR 23

#define DMA_TCD24_DADDR DMA_TCD_32BASE03._0x0300 // R/W, TCD DADDR 24
#define DMA_TCD25_DADDR DMA_TCD_32BASE03._0x0320 // R/W, TCD DADDR 25
#define DMA_TCD26_DADDR DMA_TCD_32BASE03._0x0340 // R/W, TCD DADDR 26
#define DMA_TCD27_DADDR DMA_TCD_32BASE03._0x0360 // R/W, TCD DADDR 27

#define DMA_TCD28_DADDR DMA_TCD_32BASE03._0x0380 // R/W, TCD DADDR 28
#define DMA_TCD29_DADDR DMA_TCD_32BASE03._0x03a0 // R/W, TCD DADDR 29
#define DMA_TCD30_DADDR DMA_TCD_32BASE03._0x03c0 // R/W, TCD DADDR 30
#define DMA_TCD31_DADDR DMA_TCD_32BASE03._0x03e0 // R/W, TCD DADDR 31

//==

// TCD Singed Destination Address Offset  [0,31] -- 6.6.5.27
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE02 MAP_16BIT_REGISTER(0x400e9014)
#define DMA_TCD00_SDOFF DMA_TCD_16BASE02._0x0000 // R/W, TCD SDOFF 00
#define DMA_TCD01_SDOFF DMA_TCD_16BASE02._0x0020 // R/W, TCD SDOFF 01
#define DMA_TCD02_SDOFF DMA_TCD_16BASE02._0x0040 // R/W, TCD SDOFF 02
#define DMA_TCD03_SDOFF DMA_TCD_16BASE02._0x0060 // R/W, TCD SDOFF 03

#define DMA_TCD04_SDOFF DMA_TCD_16BASE02._0x0080 // R/W, TCD SDOFF 04
#define DMA_TCD05_SDOFF DMA_TCD_16BASE02._0x00a0 // R/W, TCD SDOFF 05
#define DMA_TCD06_SDOFF DMA_TCD_16BASE02._0x00c0 // R/W, TCD SDOFF 06
#define DMA_TCD07_SDOFF DMA_TCD_16BASE02._0x00e0 // R/W, TCD SDOFF 07

#define DMA_TCD08_SDOFF DMA_TCD_16BASE02._0x0100 // R/W, TCD SDOFF 08
#define DMA_TCD09_SDOFF DMA_TCD_16BASE02._0x0120 // R/W, TCD SDOFF 09
#define DMA_TCD10_SDOFF DMA_TCD_16BASE02._0x0140 // R/W, TCD SDOFF 10
#define DMA_TCD11_SDOFF DMA_TCD_16BASE02._0x0160 // R/W, TCD SDOFF 11

#define DMA_TCD12_SDOFF DMA_TCD_16BASE02._0x0180 // R/W, TCD SDOFF 12
#define DMA_TCD13_SDOFF DMA_TCD_16BASE02._0x01a0 // R/W, TCD SDOFF 13
#define DMA_TCD14_SDOFF DMA_TCD_16BASE02._0x01c0 // R/W, TCD SDOFF 14
#define DMA_TCD15_SDOFF DMA_TCD_16BASE02._0x01e0 // R/W, TCD SDOFF 15

#define DMA_TCD16_SDOFF DMA_TCD_16BASE02._0x0200 // R/W, TCD SDOFF 16
#define DMA_TCD17_SDOFF DMA_TCD_16BASE02._0x0220 // R/W, TCD SDOFF 17
#define DMA_TCD18_SDOFF DMA_TCD_16BASE02._0x0240 // R/W, TCD SDOFF 18
#define DMA_TCD19_SDOFF DMA_TCD_16BASE02._0x0260 // R/W, TCD SDOFF 19

#define DMA_TCD20_SDOFF DMA_TCD_16BASE02._0x0280 // R/W, TCD SDOFF 20
#define DMA_TCD21_SDOFF DMA_TCD_16BASE02._0x02a0 // R/W, TCD SDOFF 21
#define DMA_TCD22_SDOFF DMA_TCD_16BASE02._0x02c0 // R/W, TCD SDOFF 22
#define DMA_TCD23_SDOFF DMA_TCD_16BASE02._0x02e0 // R/W, TCD SDOFF 23

#define DMA_TCD24_SDOFF DMA_TCD_16BASE02._0x0300 // R/W, TCD SDOFF 24
#define DMA_TCD25_SDOFF DMA_TCD_16BASE02._0x0320 // R/W, TCD SDOFF 25
#define DMA_TCD26_SDOFF DMA_TCD_16BASE02._0x0340 // R/W, TCD SDOFF 26
#define DMA_TCD27_SDOFF DMA_TCD_16BASE02._0x0360 // R/W, TCD SDOFF 27

#define DMA_TCD28_SDOFF DMA_TCD_16BASE02._0x0380 // R/W, TCD SDOFF 28
#define DMA_TCD29_SDOFF DMA_TCD_16BASE02._0x03a0 // R/W, TCD SDOFF 29
#define DMA_TCD30_SDOFF DMA_TCD_16BASE02._0x03c0 // R/W, TCD SDOFF 30
#define DMA_TCD31_SDOFF DMA_TCD_16BASE02._0x03e0 // R/W, TCD SDOFF 31

{
  {
  // CHANNEL LINK DISABLED
  // TCD Current Minor Loop Link, Major Loop Count (CMLMLC)  [0,31] -- 6.6.5.28
  // 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE03 MAP_16BIT_REGISTER(0x400e9016)
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0000 // R/W, TCD MLLMLC 00
#define DMA_TCD01_CITER_LNKNO DMA_TCD_16BASE03._0x0020 // R/W, TCD MLLMLC 01
#define DMA_TCD02_CITER_LNKNO DMA_TCD_16BASE03._0x0040 // R/W, TCD MLLMLC 02
#define DMA_TCD03_CITER_LNKNO DMA_TCD_16BASE03._0x0060 // R/W, TCD MLLMLC 03

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0080 // R/W, TCD MLLMLC 04
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00a0 // R/W, TCD MLLMLC 05
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00c0 // R/W, TCD MLLMLC 06
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00e0 // R/W, TCD MLLMLC 07

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0100 // R/W, TCD MLLMLC 08
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0120 // R/W, TCD MLLMLC 09
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0140 // R/W, TCD MLLMLC 10
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0160 // R/W, TCD MLLMLC 11

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0180 // R/W, TCD MLLMLC 12
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01a0 // R/W, TCD MLLMLC 13
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01c0 // R/W, TCD MLLMLC 14
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01e0 // R/W, TCD MLLMLC 15

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0200 // R/W, TCD MLLMLC 16
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0220 // R/W, TCD MLLMLC 17
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0240 // R/W, TCD MLLMLC 18
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0260 // R/W, TCD MLLMLC 19

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0280 // R/W, TCD MLLMLC 20
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02a0 // R/W, TCD MLLMLC 21
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02c0 // R/W, TCD MLLMLC 22
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02e0 // R/W, TCD MLLMLC 23

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0300 // R/W, TCD MLLMLC 24
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0320 // R/W, TCD MLLMLC 25
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0340 // R/W, TCD MLLMLC 26
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0360 // R/W, TCD MLLMLC 27

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0380 // R/W, TCD MLLMLC 28
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03a0 // R/W, TCD MLLMLC 29
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03c0 // R/W, TCD MLLMLC 30
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03e0 // R/W, TCD MLLMLC 31
  } {
    // CHANNEL LINK ENABLED
    // TCD Current Minor Loop Link, Major Loop Count (CMLMLC)  [0,31]
    // -- 6.6.5.29
    // 1000 + (N * 20), N = [0, 31]
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0000 // R/W, TCD MLLMLC 00
#define DMA_TCD01_CITER_LNKYES DMA_TCD_16BASE03._0x0020 // R/W, TCD MLLMLC 01
#define DMA_TCD02_CITER_LNKYES DMA_TCD_16BASE03._0x0040 // R/W, TCD MLLMLC 02
#define DMA_TCD03_CITER_LNKYES DMA_TCD_16BASE03._0x0060 // R/W, TCD MLLMLC 03

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0080 // R/W, TCD MLLMLC 04
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00a0 // R/W, TCD MLLMLC 05
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00c0 // R/W, TCD MLLMLC 06
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00e0 // R/W, TCD MLLMLC 07

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0100 // R/W, TCD MLLMLC 08
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0120 // R/W, TCD MLLMLC 09
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0140 // R/W, TCD MLLMLC 10
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0160 // R/W, TCD MLLMLC 11

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0180 // R/W, TCD MLLMLC 12
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01a0 // R/W, TCD MLLMLC 13
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01c0 // R/W, TCD MLLMLC 14
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01e0 // R/W, TCD MLLMLC 15

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0200 // R/W, TCD MLLMLC 16
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0220 // R/W, TCD MLLMLC 17
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0240 // R/W, TCD MLLMLC 18
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0260 // R/W, TCD MLLMLC 19

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0280 // R/W, TCD MLLMLC 20
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02a0 // R/W, TCD MLLMLC 21
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02c0 // R/W, TCD MLLMLC 22
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02e0 // R/W, TCD MLLMLC 23

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0300 // R/W, TCD MLLMLC 24
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0320 // R/W, TCD MLLMLC 25
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0340 // R/W, TCD MLLMLC 26
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0360 // R/W, TCD MLLMLC 27

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0380 // R/W, TCD MLLMLC 28
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03a0 // R/W, TCD MLLMLC 29
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03c0 // R/W, TCD MLLMLC 30
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03e0 // R/W, TCD MLLMLC 31
  }
}

//==

// TCD Last Destination Address Adjustment /
// Scatter Gather Address
// (DLASTSGA)  [0,31] -- 6.6.5.30
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE04 MAP_32BIT_REGISTER(0x400e9018)
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0000 // R/W, TCD DLASTSGA 00
#define DMA_TCD01_DLASTSGA DMA_TCD_32BASE04._0x0020 // R/W, TCD DLASTSGA 01
#define DMA_TCD02_DLASTSGA DMA_TCD_32BASE04._0x0040 // R/W, TCD DLASTSGA 02
#define DMA_TCD03_DLASTSGA DMA_TCD_32BASE04._0x0060 // R/W, TCD DLASTSGA 03

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0080 // R/W, TCD DLASTSGA 04
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00a0 // R/W, TCD DLASTSGA 05
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00c0 // R/W, TCD DLASTSGA 06
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00e0 // R/W, TCD DLASTSGA 07

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0100 // R/W, TCD DLASTSGA 08
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0120 // R/W, TCD DLASTSGA 09
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0140 // R/W, TCD DLASTSGA 10
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0160 // R/W, TCD DLASTSGA 11

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0180 // R/W, TCD DLASTSGA 12
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01a0 // R/W, TCD DLASTSGA 13
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01c0 // R/W, TCD DLASTSGA 14
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01e0 // R/W, TCD DLASTSGA 15

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0200 // R/W, TCD DLASTSGA 16
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0220 // R/W, TCD DLASTSGA 17
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0240 // R/W, TCD DLASTSGA 18
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0260 // R/W, TCD DLASTSGA 19

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0280 // R/W, TCD DLASTSGA 20
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02a0 // R/W, TCD DLASTSGA 21
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02c0 // R/W, TCD DLASTSGA 22
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02e0 // R/W, TCD DLASTSGA 23

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0300 // R/W, TCD DLASTSGA 24
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0320 // R/W, TCD DLASTSGA 25
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0340 // R/W, TCD DLASTSGA 26
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0360 // R/W, TCD DLASTSGA 27

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0380 // R/W, TCD DLASTSGA 28
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03a0 // R/W, TCD DLASTSGA 29
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03c0 // R/W, TCD DLASTSGA 30
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03e0 // R/W, TCD DLASTSGA 31

//==

// TCD Control and Status Registers (CMLMLC)  [0,31]
// -- 6.6.5.31
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE04 MAP_16BIT_REGISTER(0x400e901c)
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0000 // R/W, TCD CSR 00
#define DMA_TCD01_CSR DMA_TCD_16BASE04._0x0020 // R/W, TCD CSR 01
#define DMA_TCD02_CSR DMA_TCD_16BASE04._0x0040 // R/W, TCD CSR 02
#define DMA_TCD03_CSR DMA_TCD_16BASE04._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03e0 // R/W, TCD CSR 31

//==

{
#define DMA_TCD_16BASE05 MAP_16BIT_REGISTER(0x400e901e)
  // 1000 + (N * 20), N = [0, 31]
  {
// TCD Beginning Min. Loop Link, Maj. Loop Count (Channel Link disables)  [0,31]
// -- 6.6.5.32
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0000 // R/W, TCD CSR 00
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0020 // R/W, TCD CSR 01
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0040 // R/W, TCD CSR 02
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03e0 // R/W, TCD CSR 31
  } {
// TCD Beginning Min. Loop Link, Maj. Loop Count (Channel Link disables)  [0,31]
// -- 6.6.5.33
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0000 // R/W, TCD CSR 00
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0020 // R/W, TCD CSR 01
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0040 // R/W, TCD CSR 02
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03e0 // R/W, TCD CSR 31
  }
}

//===
// 11.4 IOMUXC GPR Memory Map/Register definition
#define IOMUXC_32BASE00 MAP_16BIT_REGISTER(0x400ac000)
#define IOMUXC_GPR_GPR00 IOMUXC_32BASE00._0x0000
#define IOMUXC_GPR_GPR01 IOMUXC_32BASE00._0x0004
#define IOMUXC_GPR_GPR02 IOMUXC_32BASE00._0x0008
#define IOMUXC_GPR_GPR03 IOMUXC_32BASE00._0x000c
#define IOMUXC_GPR_GPR04 IOMUXC_32BASE00._0x0010
#define IOMUXC_GPR_GPR05 IOMUXC_32BASE00._0x0014
#define IOMUXC_GPR_GPR06 IOMUXC_32BASE00._0x0018
#define IOMUXC_GPR_GPR07 IOMUXC_32BASE00._0x001c
#define IOMUXC_GPR_GPR08 IOMUXC_32BASE00._0x0020
#define IOMUXC_GPR_GPR09 IOMUXC_32BASE00._0x0024
#define IOMUXC_GPR_GPR10 IOMUXC_32BASE00._0x0028
#define IOMUXC_GPR_GPR11 IOMUXC_32BASE00._0x002c
#define IOMUXC_GPR_GPR12 IOMUXC_32BASE00._0x0030
#define IOMUXC_GPR_GPR13 IOMUXC_32BASE00._0x0034
#define IOMUXC_GPR_GPR14 IOMUXC_32BASE00._0x0038
#define IOMUXC_GPR_GPR15 IOMUXC_32BASE00._0x003c
#define IOMUXC_GPR_GPR16 IOMUXC_32BASE00._0x0040
#define IOMUXC_GPR_GPR17 IOMUXC_32BASE00._0x0044
#define IOMUXC_GPR_GPR18 IOMUXC_32BASE00._0x0048
#define IOMUXC_GPR_GPR19 IOMUXC_32BASE00._0x004c
#define IOMUXC_GPR_GPR20 IOMUXC_32BASE00._0x0050
#define IOMUXC_GPR_GPR21 IOMUXC_32BASE00._0x0054
#define IOMUXC_GPR_GPR22 IOMUXC_32BASE00._0x0058
#define IOMUXC_GPR_GPR23 IOMUXC_32BASE00._0x005c
#define IOMUXC_GPR_GPR24 IOMUXC_32BASE00._0x0060
#define IOMUXC_GPR_GPR25 IOMUXC_32BASE00._0x0064
#define IOMUXC_GPR_GPR26 IOMUXC_32BASE00._0x0068
#define IOMUXC_GPR_GPR27 IOMUXC_32BASE00._0x006c
#define IOMUXC_GPR_GPR28 IOMUXC_32BASE00._0x0070
#define IOMUXC_GPR_GPR29 IOMUXC_32BASE00._0x0074
#define IOMUXC_GPR_GPR30 IOMUXC_32BASE00._0x0078
#define IOMUXC_GPR_GPR31 IOMUXC_32BASE00._0x007c
#define IOMUXC_GPR_GPR32 IOMUXC_32BASE00._0x0080
#define IOMUXC_GPR_GPR33 IOMUXC_32BASE00._0x0084
#define IOMUXC_GPR_GPR34 IOMUXC_32BASE00._0x0088

//===
//===
// 11.5 IOMUXC SVNS Memory Map/Register definition
#define IOMUXC_32BASE01 MAP_32BIT_REGISTER(0x400a8000)

#define IOMUXC_SNVS_WAKEUP_MUX_CR IOMUXC_32BASE01._0x0000
#define IOMUXC_SNVS_PMIC_ON_REQ_MUX_CR IOMUXC_32BASE01._0x0004
#define IOMUXC_SNVS_PMIC_STBY_REQ_MUX_CR IOMUXC_32BASE01._0x0008
#define IOMUXC_SNVS_TEST_MODE_PAD_CR IOMUXC_32BASE01._0x000c
#define IOMUXC_SNVS_POR_PAD_CR IOMUXC_32BASE01._0x0010
#define IOMUXC_SNVS_ONOFF_PAD_CR IOMUXC_32BASE01._0x0014
#define IOMUXC_SNVS_WAKEUP_PAD_CR IOMUXC_32BASE01._0x0018
#define IOMUXC_SNVS_PMIC_ON_REQ_PAD_CR IOMUXC_32BASE01._0x001c
#define IOMUXC_SNVS_STBY_ON_REQ_PAD_CR IOMUXC_32BASE01._0x0020

//===
//===
// 11.6 IOMUXC SVNS/GPR Memory Map/Register definition
#define IOMUXC_32BASE02 MAP_32BIT_REGISTER(0x400a4000)
#define IOMUXC_SNVS_GPR_GPR0 IOMUXC_32BASE02._0x0000
#define IOMUXC_SNVS_GPR_GPR1 IOMUXC_32BASE02._0x0004
#define IOMUXC_SNVS_GPR_GPR2 IOMUXC_32BASE02._0x0008
#define IOMUXC_SNVS_GPR_GPR3 IOMUXC_32BASE02._0x000c

//===
//===
// 11.7 IOMUXC Memory Map/Register definition  p.403 - p.426
#define IOMUXC_32BASE03 MAP_32BIT_REGISTER(0x401f8014)
// SW_MUX_CTL_PAD_GPIO_EMC_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_EMC_CR00 IOMUXC_32BASE03._0x0000
#define IOMUXC_MUX_PAD_GPIO_EMC_CR01 IOMUXC_32BASE03._0x0004
#define IOMUXC_MUX_PAD_GPIO_EMC_CR02 IOMUXC_32BASE03._0x0008
#define IOMUXC_MUX_PAD_GPIO_EMC_CR03 IOMUXC_32BASE03._0x000c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR04 IOMUXC_32BASE03._0x0010
#define IOMUXC_MUX_PAD_GPIO_EMC_CR05 IOMUXC_32BASE03._0x0014
#define IOMUXC_MUX_PAD_GPIO_EMC_CR06 IOMUXC_32BASE03._0x0018
#define IOMUXC_MUX_PAD_GPIO_EMC_CR07 IOMUXC_32BASE03._0x001c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR08 IOMUXC_32BASE03._0x0020
#define IOMUXC_MUX_PAD_GPIO_EMC_CR09 IOMUXC_32BASE03._0x0024
#define IOMUXC_MUX_PAD_GPIO_EMC_CR10 IOMUXC_32BASE03._0x0028
#define IOMUXC_MUX_PAD_GPIO_EMC_CR11 IOMUXC_32BASE03._0x002c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR12 IOMUXC_32BASE03._0x0030
#define IOMUXC_MUX_PAD_GPIO_EMC_CR13 IOMUXC_32BASE03._0x0034
#define IOMUXC_MUX_PAD_GPIO_EMC_CR14 IOMUXC_32BASE03._0x0038
#define IOMUXC_MUX_PAD_GPIO_EMC_CR15 IOMUXC_32BASE03._0x003c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR16 IOMUXC_32BASE03._0x0040
#define IOMUXC_MUX_PAD_GPIO_EMC_CR17 IOMUXC_32BASE03._0x0044
#define IOMUXC_MUX_PAD_GPIO_EMC_CR18 IOMUXC_32BASE03._0x0048
#define IOMUXC_MUX_PAD_GPIO_EMC_CR19 IOMUXC_32BASE03._0x004c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR20 IOMUXC_32BASE03._0x0050
#define IOMUXC_MUX_PAD_GPIO_EMC_CR21 IOMUXC_32BASE03._0x0054
#define IOMUXC_MUX_PAD_GPIO_EMC_CR22 IOMUXC_32BASE03._0x0058
#define IOMUXC_MUX_PAD_GPIO_EMC_CR23 IOMUXC_32BASE03._0x005c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR24 IOMUXC_32BASE03._0x0060
#define IOMUXC_MUX_PAD_GPIO_EMC_CR25 IOMUXC_32BASE03._0x0064
#define IOMUXC_MUX_PAD_GPIO_EMC_CR26 IOMUXC_32BASE03._0x0068
#define IOMUXC_MUX_PAD_GPIO_EMC_CR27 IOMUXC_32BASE03._0x006c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR28 IOMUXC_32BASE03._0x0070
#define IOMUXC_MUX_PAD_GPIO_EMC_CR29 IOMUXC_32BASE03._0x0074
#define IOMUXC_MUX_PAD_GPIO_EMC_CR30 IOMUXC_32BASE03._0x0078
#define IOMUXC_MUX_PAD_GPIO_EMC_CR31 IOMUXC_32BASE03._0x007c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR32 IOMUXC_32BASE03._0x0080
#define IOMUXC_MUX_PAD_GPIO_EMC_CR33 IOMUXC_32BASE03._0x0084
#define IOMUXC_MUX_PAD_GPIO_EMC_CR34 IOMUXC_32BASE03._0x0088
#define IOMUXC_MUX_PAD_GPIO_EMC_CR35 IOMUXC_32BASE03._0x008c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR36 IOMUXC_32BASE03._0x0090
#define IOMUXC_MUX_PAD_GPIO_EMC_CR37 IOMUXC_32BASE03._0x0094
#define IOMUXC_MUX_PAD_GPIO_EMC_CR38 IOMUXC_32BASE03._0x0098
#define IOMUXC_MUX_PAD_GPIO_EMC_CR39 IOMUXC_32BASE03._0x009c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR40 IOMUXC_32BASE03._0x00a0
#define IOMUXC_MUX_PAD_GPIO_EMC_CR41 IOMUXC_32BASE03._0x00a4

// SW_MUX_PAD_GPIO_AD_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00a8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00ac
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00b0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00b4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00b8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00bc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00c0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00c4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00c8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00cc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00d0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00d4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00d8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00dc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00e0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00e4

// SW_MUX_PAD_GPIO_AD_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00e8
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00ec
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00f0
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00f4
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00f8
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00fc
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0100
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0104
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0108
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x010c
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0110
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0114
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0118
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x011c
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0120
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0124

// SW_MUX_PAD_GPIO_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0128
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x012c
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0130
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0134
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0138
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x013c
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0140
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0144
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0148
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x014c
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0150
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0154
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0158
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x015c
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0160
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0164

// SW_MUX_PAD_GPIO_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0168
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x016c
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0170
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0174
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0178
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x017c
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0180
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0184
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0188
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x018c
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0190
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0194
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0198
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x019c
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x01a0
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x01a4

// SW_MUX_PAD_GPIO_SD_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01a8
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01ac
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01b0
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01b4
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01b8
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01bc

// SW_MUX_PAD_GPIO_SD_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01c0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01c4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01c8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01cc
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01d0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01d4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01d8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01dc
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01e0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01e4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01e8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01ec

// SW IOMUXC PAD  == FIX NAMES
// SW_PAD_CTL_PAD_GPIO_EMC_xx Control Registers
#define IOMUXC_PAD_PAD_GPIO_EMC_CR00 IOMUXC_32BASE03._0x01f0
#define IOMUXC_PAD_PAD_GPIO_EMC_CR01 IOMUXC_32BASE03._0x01f4
#define IOMUXC_PAD_PAD_GPIO_EMC_CR02 IOMUXC_32BASE03._0x01f8
#define IOMUXC_PAD_PAD_GPIO_EMC_CR03 IOMUXC_32BASE03._0x01fc
#define IOMUXC_PAD_PAD_GPIO_EMC_CR04 IOMUXC_32BASE03._0x0200
#define IOMUXC_PAD_PAD_GPIO_EMC_CR05 IOMUXC_32BASE03._0x0204
#define IOMUXC_PAD_PAD_GPIO_EMC_CR06 IOMUXC_32BASE03._0x0208
#define IOMUXC_PAD_PAD_GPIO_EMC_CR07 IOMUXC_32BASE03._0x020c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR08 IOMUXC_32BASE03._0x0210
#define IOMUXC_PAD_PAD_GPIO_EMC_CR09 IOMUXC_32BASE03._0x0214
#define IOMUXC_PAD_PAD_GPIO_EMC_CR10 IOMUXC_32BASE03._0x0218
#define IOMUXC_PAD_PAD_GPIO_EMC_CR11 IOMUXC_32BASE03._0x021c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR12 IOMUXC_32BASE03._0x0220
#define IOMUXC_PAD_PAD_GPIO_EMC_CR13 IOMUXC_32BASE03._0x0224
#define IOMUXC_PAD_PAD_GPIO_EMC_CR14 IOMUXC_32BASE03._0x0228
#define IOMUXC_PAD_PAD_GPIO_EMC_CR15 IOMUXC_32BASE03._0x022c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR16 IOMUXC_32BASE03._0x0230
#define IOMUXC_PAD_PAD_GPIO_EMC_CR17 IOMUXC_32BASE03._0x0234
#define IOMUXC_PAD_PAD_GPIO_EMC_CR18 IOMUXC_32BASE03._0x0238
#define IOMUXC_PAD_PAD_GPIO_EMC_CR19 IOMUXC_32BASE03._0x023c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR20 IOMUXC_32BASE03._0x0240
#define IOMUXC_PAD_PAD_GPIO_EMC_CR21 IOMUXC_32BASE03._0x0244
#define IOMUXC_PAD_PAD_GPIO_EMC_CR22 IOMUXC_32BASE03._0x0248
#define IOMUXC_PAD_PAD_GPIO_EMC_CR23 IOMUXC_32BASE03._0x024c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR24 IOMUXC_32BASE03._0x0250
#define IOMUXC_PAD_PAD_GPIO_EMC_CR25 IOMUXC_32BASE03._0x0254
#define IOMUXC_PAD_PAD_GPIO_EMC_CR26 IOMUXC_32BASE03._0x0258
#define IOMUXC_PAD_PAD_GPIO_EMC_CR27 IOMUXC_32BASE03._0x025c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR28 IOMUXC_32BASE03._0x0260
#define IOMUXC_PAD_PAD_GPIO_EMC_CR29 IOMUXC_32BASE03._0x0264
#define IOMUXC_PAD_PAD_GPIO_EMC_CR30 IOMUXC_32BASE03._0x0268
#define IOMUXC_PAD_PAD_GPIO_EMC_CR31 IOMUXC_32BASE03._0x026c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR32 IOMUXC_32BASE03._0x0270
#define IOMUXC_PAD_PAD_GPIO_EMC_CR33 IOMUXC_32BASE03._0x0274
#define IOMUXC_PAD_PAD_GPIO_EMC_CR34 IOMUXC_32BASE03._0x0278
#define IOMUXC_PAD_PAD_GPIO_EMC_CR35 IOMUXC_32BASE03._0x027c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR36 IOMUXC_32BASE03._0x0280
#define IOMUXC_PAD_PAD_GPIO_EMC_CR37 IOMUXC_32BASE03._0x0284
#define IOMUXC_PAD_PAD_GPIO_EMC_CR38 IOMUXC_32BASE03._0x0288
#define IOMUXC_PAD_PAD_GPIO_EMC_CR39 IOMUXC_32BASE03._0x028c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR40 IOMUXC_32BASE03._0x0290
#define IOMUXC_PAD_PAD_GPIO_EMC_CR41 IOMUXC_32BASE03._0x0294
// SW_MUX_PAD_GPIO_AD_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x0298
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x029c
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02a0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02a4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02a8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02ac
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02b0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02b4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02b8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02bc
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02c0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02c4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02c8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02cc
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02d0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x02d4

// SW_MUX_PAD_GPIO_AD_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02d8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02dc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02e0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02e4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02e8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02ec
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02f0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02f4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02f8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02fc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0300
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0304
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0308
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x030c
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0310
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x0314

// SW_MUX_PAD_GPIO_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0318
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x031c
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0320
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0324
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0328
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x032c
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0330
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0334
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0338
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x033c
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0340
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0344
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0348
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x034c
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0350
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0354

// SW_MUX_PAD_GPIO_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0358
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x035c
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0360
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0364
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0368
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x036c
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0370
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0374
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0378
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x037c
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0380
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0384
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0388
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x038c
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0390
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0394

// SW_MUX_PAD_GPIO_SD_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x0398
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x039c
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x03a0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x03a4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x03a8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x03ac

// SW_MUX_PAD_GPIO_SD_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03b0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03b4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03b8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03bc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03c0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03c4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03c8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03cc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03d0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03d4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03d8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x03dc

// 11.7 IOMUXC Memory Map/Register definition, DAISY Registers
// p.417 - p.426
#define IOMUXC_32BASE04 MAP_32BIT_REGISTER(0x401f83f4)
#define IOMUXC_ANATOP_USBOTG1_ID__SLCT_IN_DR IOMUXC_32BASE04._0x0000
#define IOMUXC_ANATOP_USBOTG2_ID__SLCT_IN_DR IOMUXC_32BASE04._0x0004
#define IOMUXC_CCM_PMIC_RDY__SLCT_IN_DR IOMUXC_32BASE04._0x0008

// CSI
#define IOMUXC_CSI_DATA02__SLCT_IN_DR IOMUXC_32BASE04._0x000c
#define IOMUXC_CSI_DATA03__SLCT_IN_DR IOMUXC_32BASE04._0x0010
#define IOMUXC_CSI_DATA04__SLCT_IN_DR IOMUXC_32BASE04._0x0014
#define IOMUXC_CSI_DATA05__SLCT_IN_DR IOMUXC_32BASE04._0x0018
#define IOMUXC_CSI_DATA06__SLCT_IN_DR IOMUXC_32BASE04._0x001c
#define IOMUXC_CSI_DATA07__SLCT_IN_DR IOMUXC_32BASE04._0x0020
#define IOMUXC_CSI_DATA08__SLCT_IN_DR IOMUXC_32BASE04._0x0024
#define IOMUXC_CSI_DATA09__SLCT_IN_DR IOMUXC_32BASE04._0x0028

#define IOMUXC_CSI_HSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x002c
#define IOMUXC_CSI_PIXCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0030
#define IOMUXC_CSI_VSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0034

// ENET
#define IOMUXC_ENET_IPG_CLKRMII__SLCT_IN_DR IOMUXC_32BASE04._0x0038
#define IOMUXC_ENET_MDIO__SLCT_IN_DR IOMUXC_32BASE04._0x003c
#define IOMUXC_ENET_RXDATA__SLCT_IN_DR00 IOMUXC_32BASE04._0x0040
#define IOMUXC_ENET_RXDATA__SLCT_IN_DR01 IOMUXC_32BASE04._0x0044
#define IOMUXC_ENET_RXEN__SLCT_IN_DR IOMUXC_32BASE04._0x0048 // RX ENABLE
#define IOMUXC_ENET_RXERR__SLCT_IN_DR IOMUXC_32BASE04._0x004c // RX ERROR
#define IOMUXC_ENET_TIMER__SLCT_IN_DR00 IOMUXC_32BASE04._0x0050
#define IOMUXC_ENET_TXCLK__SLCT_IN_DR00 IOMUXC_32BASE04._0x0054

// FLEX
#define IOMUXC_FLEXCAN1_RX__SLCT_IN_DR00 IOMUXC_32BASE04._0x0058
#define IOMUXC_FLEXCAN2_RX__SLCT_IN_DR00 IOMUXC_32BASE04._0x005c

#define IOMUXC_FLEXPWM01_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x0060
#define IOMUXC_FLEXPWM01_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x0064
#define IOMUXC_FLEXPWM01_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x0068
#define IOMUXC_FLEXPWM01_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x006c
#define IOMUXC_FLEXPWM01_PWMB03__SLCT_IN_DR IOMUXC_32BASE04._0x0070
#define IOMUXC_FLEXPWM01_PWMB00__SLCT_IN_DR IOMUXC_32BASE04._0x0074
#define IOMUXC_FLEXPWM01_PWMB01__SLCT_IN_DR IOMUXC_32BASE04._0x0078
#define IOMUXC_FLEXPWM01_PWMB02__SLCT_IN_DR IOMUXC_32BASE04._0x007c
#define IOMUXC_FLEXPWM02_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x0080
#define IOMUXC_FLEXPWM02_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x0084
#define IOMUXC_FLEXPWM02_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x0088
#define IOMUXC_FLEXPWM02_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x008c
#define IOMUXC_FLEXPWM02_PWMB03__SLCT_IN_DR IOMUXC_32BASE04._0x0090
#define IOMUXC_FLEXPWM02_PWMB00__SLCT_IN_DR IOMUXC_32BASE04._0x0094
#define IOMUXC_FLEXPWM02_PWMB01__SLCT_IN_DR IOMUXC_32BASE04._0x0098
#define IOMUXC_FLEXPWM02_PWMB02__SLCT_IN_DR IOMUXC_32BASE04._0x009c
#define IOMUXC_FLEXPWM04_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x00a0
#define IOMUXC_FLEXPWM04_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x00a4
#define IOMUXC_FLEXPWM04_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x00a8
#define IOMUXC_FLEXPWM04_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x00ac

#define IOMUXC_FLEXSPIA_DQS_SLCT_IN_DR IOMUXC_32BASE04._0x00b0

#define IOMUXC_FLEXSPIA_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x00b4
#define IOMUXC_FLEXSPIA_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x00b8
#define IOMUXC_FLEXSPIA_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x00bc
#define IOMUXC_FLEXSPIA_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x00c0
#define IOMUXC_FLEXSPIB_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x00c4
#define IOMUXC_FLEXSPIB_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x00c8
#define IOMUXC_FLEXSPIB_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x00cc
#define IOMUXC_FLEXSPIB_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x00d0

#define IOMUXC_FLEXSPIA_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x00d4

// LPI2C
#define IOMUXC_LPI2C1_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00d8
#define IOMUXC_LPI2C1_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00dc
#define IOMUXC_LPI2C2_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00e0
#define IOMUXC_LPI2C2_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00e4
#define IOMUXC_LPI2C3_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00e8
#define IOMUXC_LPI2C3_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00ec
#define IOMUXC_LPI2C4_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00f0
#define IOMUXC_LPI2C4_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00f4

// LPSPI
#define IOMUXC_LPSPI1_PCS0__SLCT_IN_DR IOMUXC_32BASE04._0x00f8
#define IOMUXC_LPSPI1_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x00fc
#define IOMUXC_LPSPI1_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0100
#define IOMUXC_LPSPI1_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0104

#define IOMUXC_LPSPI2_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0108
#define IOMUXC_LPSPI2_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x010c
#define IOMUXC_LPSPI2_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0110
#define IOMUXC_LPSPI2_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0114

#define IOMUXC_LPSPI3_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0118
#define IOMUXC_LPSPI3_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x011c
#define IOMUXC_LPSPI3_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0120
#define IOMUXC_LPSPI3_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0124

#define IOMUXC_LPSPI4_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0128
#define IOMUXC_LPSPI4_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x012c
#define IOMUXC_LPSPI4_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0130
#define IOMUXC_LPSPI4_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0134

// LPUART 2-8 (15)
#define IOMUXC2_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0138
#define IOMUXC2_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x013c
#define IOMUXC3_LPUART_CTS_B__SLCT_IN_DR IOMUXC_32BASE04._0x0140
#define IOMUXC3_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0144
#define IOMUXC3_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0148
#define IOMUXC4_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x014c
#define IOMUXC4_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0150
#define IOMUXC5_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0154
#define IOMUXC5_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0158
#define IOMUXC6_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x015c
#define IOMUXC6_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0160
#define IOMUXC7_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0164
#define IOMUXC7_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0168
#define IOMUXC8_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x016c
#define IOMUXC9_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0170

#define IOMUXC_NMI_SLCT_IN_DR IOMUXC_32BASE03._0x0174

// QTIMER (8)

#define IOMUXC_QTIMER2_TIMER0__SLCT_IN_DR IOMUXC_32BASE04._0x0178
#define IOMUXC_QTIMER2_TIMER1__SLCT_IN_DR IOMUXC_32BASE04._0x017c
#define IOMUXC_QTIMER2_TIMER2__SLCT_IN_DR IOMUXC_32BASE04._0x0180
#define IOMUXC_QTIMER2_TIMER3__SLCT_IN_DR IOMUXC_32BASE04._0x0184
#define IOMUXC_QTIMER3_TIMER0__SLCT_IN_DR IOMUXC_32BASE04._0x0188
#define IOMUXC_QTIMER3_TIMER1__SLCT_IN_DR IOMUXC_32BASE04._0x018c
#define IOMUXC_QTIMER3_TIMER2__SLCT_IN_DR IOMUXC_32BASE04._0x0190
#define IOMUXC_QTIMER3_TIMER3__SLCT_IN_DR IOMUXC_32BASE04._0x0194

// SAI1,SAI2 (15)
#define IOMUXC_SAI1_MCLK2__SLCT_IN_DR IOMUXC_32BASE04._0x0198
#define IOMUXC_SAI1_RX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x019c
#define IOMUXC_SAI1_RX_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01a0
#define IOMUXC_SAI1_RX_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x01a4
#define IOMUXC_SAI1_RX_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x01a8
#define IOMUXC_SAI1_RX_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x01ac
#define IOMUXC_SAI1_RX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01b0
#define IOMUXC_SAI1_TX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01b4
#define IOMUXC_SAI1_TX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01b8
#define IOMUXC_SAI2_MCLK2__SLCT_IN_DR IOMUXC_32BASE04._0x01bc
#define IOMUXC_SAI2_RX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01c0
#define IOMUXC_SAI2_RX_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01c4
#define IOMUXC_SAI2_RX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01c8
#define IOMUXC_SAI2_TX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01cc
#define IOMUXC_SAI2_TX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01d0
#define IOMUXC_SPDIF_IN__SLCT_IN_DR IOMUXC_32BASE04._0x01d4

// USB (2)
#define IOMUXC_USB_OTG2_OC__SLCT_IN_DR IOMUXC_32BASE04._0x01d8
#define IOMUXC_USB_OTG1_OC__SLCT_IN_DR IOMUXC_32BASE04._0x01dc

// USDHC (14)
#define IOMUXC_USDHC1_CD_B__SLCT_IN_DR IOMUXC_32BASE04._0x01e0
#define IOMUXC_USDHC1_WP__SLCT_IN_DR IOMUXC_32BASE04._0x01e4
#define IOMUXC_USDHC2_CLK__SLCT_IN_DR IOMUXC_32BASE04._0x01e8
#define IOMUXC_USDHC2_CD_B__SLCT_IN_DR IOMUXC_32BASE04._0x01ec
#define IOMUXC_USDHC2_CMD__SLCT_IN_DR IOMUXC_32BASE04._0x01f0
#define IOMUXC_USDHC2_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01f4
#define IOMUXC_USDHC2_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x01f8
#define IOMUXC_USDHC2_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x01fc
#define IOMUXC_USDHC2_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x0200
#define IOMUXC_USDHC2_DATA4__SLCT_IN_DR IOMUXC_32BASE04._0x0204
#define IOMUXC_USDHC2_DATA5__SLCT_IN_DR IOMUXC_32BASE04._0x0208
#define IOMUXC_USDHC2_DATA6__SLCT_IN_DR IOMUXC_32BASE04._0x020c
#define IOMUXC_USDHC2_DATA7__SLCT_IN_DR IOMUXC_32BASE04._0x0210
#define IOMUXC_USDHC2_WP__SLCT_IN_DR IOMUXC_32BASE04._0x0214

// XBAR (20) p.423-p.424
#define IOMUXC_XBAR1_IN02__SLCT_IN_DR IOMUXC_32BASE04._0x0218
#define IOMUXC_XBAR1_IN03__SLCT_IN_DR IOMUXC_32BASE04._0x021c
#define IOMUXC_XBAR1_IN04__SLCT_IN_DR IOMUXC_32BASE04._0x0220
#define IOMUXC_XBAR1_IN05__SLCT_IN_DR IOMUXC_32BASE04._0x0224
#define IOMUXC_XBAR1_IN06__SLCT_IN_DR IOMUXC_32BASE04._0x0228
#define IOMUXC_XBAR1_IN07__SLCT_IN_DR IOMUXC_32BASE04._0x022c
#define IOMUXC_XBAR1_IN08__SLCT_IN_DR IOMUXC_32BASE04._0x0230
#define IOMUXC_XBAR1_IN09__SLCT_IN_DR IOMUXC_32BASE04._0x0234
#define IOMUXC_XBAR1_IN17__SLCT_IN_DR IOMUXC_32BASE04._0x0238
#define IOMUXC_XBAR1_IN18__SLCT_IN_DR IOMUXC_32BASE04._0x023c
#define IOMUXC_XBAR1_IN20__SLCT_IN_DR IOMUXC_32BASE04._0x0240
#define IOMUXC_XBAR1_IN22__SLCT_IN_DR IOMUXC_32BASE04._0x0244
#define IOMUXC_XBAR1_IN23__SLCT_IN_DR IOMUXC_32BASE04._0x0248
#define IOMUXC_XBAR1_IN24__SLCT_IN_DR IOMUXC_32BASE04._0x024c
#define IOMUXC_XBAR1_IN14__SLCT_IN_DR IOMUXC_32BASE04._0x0250
#define IOMUXC_XBAR1_IN15__SLCT_IN_DR IOMUXC_32BASE04._0x0254
#define IOMUXC_XBAR1_IN16__SLCT_IN_DR IOMUXC_32BASE04._0x0258
#define IOMUXC_XBAR1_IN25__SLCT_IN_DR IOMUXC_32BASE04._0x025c
#define IOMUXC_XBAR1_IN19__SLCT_IN_DR IOMUXC_32BASE04._0x0260
#define IOMUXC_XBAR1_IN23__SLCT_IN_DR IOMUXC_32BASE04._0x0264

// ENET2 (8)
#define IOMUXC_ENET2_IPG_CLK_RMII__SLCT_IN_DR IOMUXC_32BASE04._0x0318
#define IOMUXC_ENET2_IPP_IND_MAC0_MDIO__SLCT_IN_DR IOMUXC_32BASE04._0x031c
#define IOMUXC_ENET2_IPP_IND_MAC0_RXDATA0__SLCT_IN_DR IOMUXC_32BASE04._0x0320
#define IOMUXC_ENET2_IPP_IND_MAC0_RXDATA1__SLCT_IN_DR IOMUXC_32BASE04._0x0324
#define IOMUXC_ENET2_IPP_IND_MAC0_RXEN__SLCT_IN_DR IOMUXC_32BASE04._0x0328
#define IOMUXC_ENET2_IPP_IND_MAC0_RXERR__SLCT_IN_DR IOMUXC_32BASE04._0x032c
#define IOMUXC_ENET2_IPP_IND_MAC0_TIMER__SLCT_IN_DR IOMUXC_32BASE04._0x0330
#define IOMUXC_ENET2_IPP_IND_MAC0_TXCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0334

// FLEXSPI2 (11)
#define IOMUXC_FLEXSPI2_IPP_IND_DQS_FA__SLCT_IN_DR IOMUXC_32BASE04._0x0338
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0__SLCT_IN_DR IOMUXC_32BASE04._0x033c
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1__SLCT_IN_DR IOMUXC_32BASE04._0x0340
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2__SLCT_IN_DR IOMUXC_32BASE04._0x0344
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3__SLCT_IN_DR IOMUXC_32BASE04._0x0348
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT0__SLCT_IN_DR IOMUXC_32BASE04._0x034c
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT1__SLCT_IN_DR IOMUXC_32BASE04._0x0350
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT2__SLCT_IN_DR IOMUXC_32BASE04._0x0354
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT3__SLCT_IN_DR IOMUXC_32BASE04._0x0358
#define IOMUXC_FLEXSPI2_IPP_IND_SCK_FA__SLCT_IN_DR IOMUXC_32BASE04._0x035c
#define IOMUXC_FLEXSPI2_IPP_IND_SCK_FB__SLCT_IN_DR IOMUXC_32BASE04._0x0360

// GPT (6)
#define IOMUXC_GPT1_IPP_IND_CAPIN1__SLCT_IN_DR IOMUXC_32BASE04._0x0364
#define IOMUXC_GPT1_IPP_IND_CAPIN2__SLCT_IN_DR IOMUXC_32BASE04._0x0368
#define IOMUXC_GPT1_IPP_IND_CLKIN__SLCT_IN_DR IOMUXC_32BASE04._0x036c
#define IOMUXC_GPT2_IPP_IND_CAPIN1__SLCT_IN_DR IOMUXC_32BASE04._0x0370
#define IOMUXC_GPT2_IPP_IND_CAPIN2__SLCT_IN_DR IOMUXC_32BASE04._0x0374
#define IOMUXC_GPT2_IPP_IND_CLKIN__SLCT_IN_DR IOMUXC_32BASE04._0x0378

// SAI3 (6)
#define IOMUXC_SAI3_IPG_CLK_SAI_MCLK__SLCT_IN_DR IOMUXC_32BASE04._0x037c
#define IOMUXC_SAI3_IPP_IND_RXBCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0380
#define IOMUXC_SAI3_IPP_IND_RXDATA__SLCT_IN_DR IOMUXC_32BASE04._0x0384
#define IOMUXC_SAI3_IPP_IND_RXDSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0388
#define IOMUXC_SAI3_IPP_IND_TXBCLK__SLCT_IN_DR IOMUXC_32BASE04._0x038c
#define IOMUXC_SAI3_IPP_IND_TXSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0390

// SEMC (1)
#define IOMUXC_SEMC_IPP_IND_DQS4__SLCT_IN_DR IOMUXC_32BASE04._0x0394

// CANFD (1)
#define IOMUXC_CANFD_IPP_IND_CANRX__SLCT_IN_DR IOMUXC_32BASE04._0x0398

//===

/**
 * @brief: GPIO Memory Map, 12.5.1, p.261
 * GPIOn base address: 401B_8000h + (n-1)×4000h, where n is from 1 to 4.
 * GPIO5 base address: 400C_0000h.
 * GPIOn base address: 4200_0000h + (n-6)×4000h, where n is from 6 to 9.
 *
 **/

#define GPIO_1_4_32BASE00 MAP_32BIT_REGISTER(0x401b8000)
#define GPIO_1_4_32BASE01 MAP_32BIT_REGISTER(0x401bc000)
#define GPIO_1_4_32BASE02 MAP_32BIT_REGISTER(0x401c0000)
#define GPIO_1_4_32BASE03 MAP_32BIT_REGISTER(0x401c4000)
#define GPIO_5_32BASE00 MAP_32BIT_REGISTER(0x400c0000)
#define GPIO_6_9_32BASE00 MAP_32BIT_REGISTER(0x42000000)
#define GPIO_6_9_32BASE01 MAP_32BIT_REGISTER(0x42004000)
#define GPIO_6_9_32BASE02 MAP_32BIT_REGISTER(0x42008000)
#define GPIO_6_9_32BASE03 MAP_32BIT_REGISTER(0x4200c000)
#define GPIO_6_9_32BASE04 MAP_32BIT_REGISTER(0x42010000)
#define GPIO_6_9_32BASE05 MAP_32BIT_REGISTER(0x42014000)

// GPIO1
#define GPIO1_DR GPIO_1_4_32BASE00._0x0000
#define GPIO1_DIRR GPIO_1_4_32BASE00._0x0004
#define GPIO1_PSR GPIO_1_4_32BASE00._0x0008
#define GPIO1_ICR1 GPIO_1_4_32BASE00._0x000c
#define GPIO1_ICR2 GPIO_1_4_32BASE00._0x0010
#define GPIO1_IMR GPIO_1_4_32BASE00._0x0014
#define GPIO1_ISR GPIO_1_4_32BASE00._0x0018
#define GPIO1_EDGE_SEL GPIO_1_4_32BASE00._0x001c
#define GPIO1_DR_SET GPIO_1_4_32BASE00._0x0084
#define GPIO1_DR_CLEAR GPIO_1_4_32BASE00._0x0088
#define GPIO1_DR_TOGGLE GPIO_1_4_32BASE00._0x008c

// GPIO2
#define GPIO2_DR GPIO_1_4_32BASE01._0x0000
#define GPIO2_DIRR GPIO_1_4_32BASE01._0x0004
#define GPIO2_PSR GPIO_1_4_32BASE01._0x0008
#define GPIO2_ICR1 GPIO_1_4_32BASE01._0x000c
#define GPIO2_ICR2 GPIO_1_4_32BASE01._0x0010
#define GPIO2_IMR GPIO_1_4_32BASE01._0x0014
#define GPIO2_ISR GPIO_1_4_32BASE01._0x0018
#define GPIO2_EDGE_SEL GPIO_1_4_32BASE01._0x001c
#define GPIO2_DR_SET GPIO_1_4_32BASE01._0x0084
#define GPIO2_DR_CLEAR GPIO_1_4_32BASE01._0x0088
#define GPIO2_DR_TOGGLE GPIO_1_4_32BASE01._0x008c

// GPIO3
#define GPIO3_DR GPIO_1_4_32BASE02._0x0000
#define GPIO3_DIRR GPIO_1_4_32BASE02._0x0004
#define GPIO3_PSR GPIO_1_4_32BASE02._0x0008
#define GPIO3_ICR1 GPIO_1_4_32BASE02._0x000c
#define GPIO3_ICR2 GPIO_1_4_32BASE02._0x0010
#define GPIO3_IMR GPIO_1_4_32BASE02._0x0014
#define GPIO3_ISR GPIO_1_4_32BASE02._0x0018
#define GPIO3_EDGE_SEL GPIO_1_4_32BASE02._0x001c
#define GPIO3_DR_SET GPIO_1_4_32BASE02._0x0084
#define GPIO3_DR_CLEAR GPIO_1_4_32BASE02._0x0088
#define GPIO3_DR_TOGGLE GPIO_1_4_32BASE02._0x008c

// GPIO4
#define GPIO4_DR GPIO_1_4_32BASE03._0x0000
#define GPIO4_DIRR GPIO_1_4_32BASE03._0x0004
#define GPIO4_PSR GPIO_1_4_32BASE03._0x0008
#define GPIO4_ICR1 GPIO_1_4_32BASE03._0x000c
#define GPIO4_ICR2 GPIO_1_4_32BASE03._0x0010
#define GPIO4_IMR GPIO_1_4_32BASE03._0x0014
#define GPIO4_ISR GPIO_1_4_32BASE03._0x0018
#define GPIO4_EDGE_SEL GPIO_1_4_32BASE03._0x001c
#define GPIO4_DR_SET GPIO_1_4_32BASE03._0x0084
#define GPIO4_DR_CLEAR GPIO_1_4_32BASE03._0x0088
#define GPIO4_DR_TOGGLE GPIO_1_4_32BASE03._0x008c

// GPIO5
#define GPIO5_DR GPIO_5_32BASE00._0x0000
#define GPIO5_DIRR GPIO_5_32BASE00._0x0004
#define GPIO5_PSR GPIO_5_32BASE00._0x0008
#define GPIO5_ICR1 GPIO_5_32BASE00._0x000c
#define GPIO5_ICR2 GPIO_5_32BASE00._0x0010
#define GPIO5_IMR GPIO_5_32BASE00._0x0014
#define GPIO5_ISR GPIO_5_32BASE00._0x0018
#define GPIO5_EDGE_SEL GPIO_5_32BASE00._0x001c
#define GPIO5_DR_SET GPIO_5_32BASE00._0x0084
#define GPIO5_DR_CLEAR GPIO_5_32BASE00._0x0088
#define GPIO5_DR_TOGGLE GPIO_5_32BASE00._0x008c

// GPIO6
#define GPIO6_DR GPIO_6_9_32BASE00._0x0000
#define GPIO6_DIRR GPIO_6_9_32BASE00._0x0004
#define GPIO6_PSR GPIO_6_9_32BASE00._0x0008
#define GPIO6_ICR1 GPIO_6_9_32BASE00._0x000c
#define GPIO6_ICR2 GPIO_6_9_32BASE00._0x0010
#define GPIO6_IMR GPIO_6_9_32BASE00._0x0014
#define GPIO6_ISR GPIO_6_9_32BASE00._0x0018
#define GPIO6_EDGE_SEL GPIO_6_9_32BASE00._0x001c
#define GPIO6_DR_SET GPIO_6_9_32BASE00._0x0084
#define GPIO6_DR_CLEAR GPIO_6_9_32BASE00._0x0088
#define GPIO6_DR_TOGGLE GPIO_6_9_32BASE00._0x008c

// GPIO7
#define GPIO7_DR GPIO_6_9_32BASE01._0x0000
#define GPIO7_DIRR GPIO_6_9_32BASE01._0x0004
#define GPIO7_PSR GPIO_6_9_32BASE01._0x0008
#define GPIO7_ICR1 GPIO_6_9_32BASE01._0x000c
#define GPIO7_ICR2 GPIO_6_9_32BASE01._0x0010
#define GPIO7_IMR GPIO_6_9_32BASE01._0x0014
#define GPIO7_ISR GPIO_6_9_32BASE01._0x0018
#define GPIO7_EDGE_SEL GPIO_6_9_32BASE01._0x001c
#define GPIO7_DR_SET GPIO_6_9_32BASE01._0x0084
#define GPIO7_DR_CLEAR GPIO_6_9_32BASE01._0x0088
#define GPIO7_DR_TOGGLE GPIO_6_9_32BASE01._0x008c

// GPIO8
#define GPIO8_DR GPIO_6_9_32BASE02._0x0000
#define GPIO8_DIRR GPIO_6_9_32BASE02._0x0004
#define GPIO8_PSR GPIO_6_9_32BASE02._0x0008
#define GPIO8_ICR1 GPIO_6_9_32BASE02._0x000c
#define GPIO8_ICR2 GPIO_6_9_32BASE02._0x0010
#define GPIO8_IMR GPIO_6_9_32BASE02._0x0014
#define GPIO8_ISR GPIO_6_9_32BASE02._0x0018
#define GPIO8_EDGE_SEL GPIO_6_9_32BASE02._0x001c
#define GPIO8_DR_SET GPIO_6_9_32BASE02._0x0084
#define GPIO8_DR_CLEAR GPIO_6_9_32BASE02._0x0088
#define GPIO8_DR_TOGGLE GPIO_6_9_32BASE02._0x008c

// GPIO9
#define GPIO9_DR GPIO_6_9_32BASE03._0x0000
#define GPIO9_DIRR GPIO_6_9_32BASE03._0x0004
#define GPIO9_PSR GPIO_6_9_32BASE03._0x0008
#define GPIO9_ICR1 GPIO_6_9_32BASE03._0x000c
#define GPIO9_ICR2 GPIO_6_9_32BASE03._0x0010
#define GPIO9_IMR GPIO_6_9_32BASE03._0x0014
#define GPIO9_ISR GPIO_6_9_32BASE03._0x0018
#define GPIO9_EDGE_SEL GPIO_6_9_32BASE03._0x001c
#define GPIO9_DR_SET GPIO_6_9_32BASE03._0x0084
#define GPIO9_DR_CLEAR GPIO_6_9_32BASE03._0x0088
#define GPIO9_DR_TOGGLE GPIO_6_9_32BASE03._0x008c

/**
 * @brief: CCM Memory Map, 14.7, p.1045
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 **/
#define CCM_BASE MAP_32BIT_REGISTER(0x400fc000)
#define CCM_C_CR CCM_BASE._0x0000 // Control Register
#define CCM_C_SR CCM_BASE._0x0008 // Read-Only, Status Register
#define CCM_C_CSR CCM_BASE._0x000c // CLock Switcher Register
#define CCM_C_ACRR CCM_BASE._0x0010 // Arm Clock Root Register
#define CCM_C_BCDR CCM_BASE._0x0014 // Bus Clock Divider Register
#define CCM_C_BCMR CCM_BASE._0x0018 // Bus Clock Multiplexer Register
#define CCM_C_SCMR1 CCM_BASE._0x001c // Serial Clock Multiplexer Register 1
#define CCM_C_SCMR2 CCM_BASE._0x0020 // Serial Clock Multiplexer Register 2

#define CCM_C_SCDR1 CCM_BASE._0x0024 // Serial Clock Divider Register 1
#define CCM_C_S1CDR CCM_BASE._0x0028 // Clock Divider Register 1
#define CCM_C_S2CDR CCM_BASE._0x002c // Clock Divider Register 2
#define CCM_C_DCDR CCM_BASE._0x0030 // D1 Clock Divider Register
#define CCM_C_SCDR2 CCM_BASE._0x0038 // Serial Clock Divider Register 2
#define CCM_C_SCDR3 CCM_BASE._0x003c // Serial Clock Divider Register 3
#define CCM_C_DHIPR                                                            \
  CCM_BASE._0x0048 // Read-Only, Divider Handshake In-Process Register
#define CCM_C_LPCR CCM_BASE._0x0054 // Lowe Power Control Register
#define CCM_C_ISR CCM_BASE._0x0058 // w1c, Interrupt Status Register
#define CCM_C_IMR CCM_BASE._0x005c // Interrupt Mask Register
#define CCM_C_COSR CCM_BASE._0x0060 // Clock Output Source Register
#define CCM_C_GPR CCM_BASE._0x0064 // General Purpose Register
#define CCM_C_CGR0 CCM_BASE._0x0068 // Clock Gating Register 0
#define CCM_C_CGR1 CCM_BASE._0x006c // Clock Gating Register 1
#define CCM_C_CGR2 CCM_BASE._0x0070 // Clock Gating Register 2
#define CCM_C_CGR3 CCM_BASE._0x0074 // Clock Gating Register 3
#define CCM_C_CGR4 CCM_BASE._0x0078 // Clock Gating Register 4
#define CCM_C_CGR5 CCM_BASE._0x007c // Clock Gating Register 5
#define CCM_C_CGR6 CCM_BASE._0x0080 // Clock Gating Register 6
#define CCM_C_CGR7 CCM_BASE._0x0084 // Clock Gating Register 7
#define CCM_C_MEOR CCM_BASE._0x0088 // Module Enable Overide Register

/**
 * @brief: CCM Analog Memory Map, 14.8, p.1096
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 * This section describes the registers for the analog PLLs.
 * The registers which have the same description are grouped within {}.
 * The register offsets for the various PLLs are:
 * •  ARM PLL: {0h000, 0h004, 0h008, 0h00C}.
 * •  USB1 PLL: {0h010, 0h014, 0h018, 0h01C}, {0h0F0, 0h0F4, 0h0F8, 0h0FC}.
 * •  System PLL: {0h030, 0h034, 0h038, 0h03C}, 0h040, 0h050, 0h060,
 *    {0h100,0h104,0h108, 0h10C}.
 * • Audio / Video PLL: {0h070, 0h074, 0h078, 0h07C},
 *    0h080, 0h090, {0h0A0, 0h0A4,0h0A8, 0h0AC}, 0h0B0, 0h0C0
 *
 **/
#define CCM_ANALOG_BASE MAP_32BIT_REGISTER(0x400d8000)
// ARM PLL
#define CCM_ANALOG_PLL_ARM CCM_ANALOG_BASE._0x0000
#define CCM_ANALOG_PLL_ARM_SET CCM_ANALOG_BASE._0x0004
#define CCM_ANALOG_PLL_ARM_CLR CCM_ANALOG_BASE._0x0008
#define CCM_ANALOG_PLL_ARM_TOG CCM_ANALOG_BASE._0x000c

// UBS1 PLL
#define CCM_ANALOG_PLL_USB1 CCM_ANALOG_BASE._0x0010
#define CCM_ANALOG_PLL_USB1_SET CCM_ANALOG_BASE._0x0014
#define CCM_ANALOG_PLL_USB1_CLR CCM_ANALOG_BASE._0x0018
#define CCM_ANALOG_PLL_USB1_TOG CCM_ANALOG_BASE._0x001c

// USB2 PLL
#define CCM_ANALOG_PLL_USB2 CCM_ANALOG_BASE._0x0020
#define CCM_ANALOG_PLL_USB2_SET CCM_ANALOG_BASE._0x0024
#define CCM_ANALOG_PLL_USB2_CLR CCM_ANALOG_BASE._0x0028
#define CCM_ANALOG_PLL_USB2_TOG CCM_ANALOG_BASE._0x002c

// ANALOG SYSTEM PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_PLL_SYS CCM_ANALOG_BASE._0x0030
#define CCM_ANALOG_PLL_SYS_SET CCM_ANALOG_BASE._0x0034
#define CCM_ANALOG_PLL_SYS_CLR CCM_ANALOG_BASE._0x0038
#define CCM_ANALOG_PLL_SYS_TOG CCM_ANALOG_BASE._0x003c
#define CCM_ANALOG_528M_PLL_SYS_SSR CCM_ANALOG_BASE._0x0040
#define CCM_NUMERATOR_528M_PLL_SYS_NUM CCM_ANALOG_BASE._0x0050
#define CCM_DENOMINATOR_528M_PLL_SYS_NUM CCM_ANALOG_BASE._0x0060

// ANALOG AUDIO PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_AUDIO_PLL CCM_ANALOG_BASE._0x0070
#define CCM_ANALOG_AUDIO_PLL_SET CCM_ANALOG_BASE._0x0074
#define CCM_ANALOG_AUDIO_PLL_CLR CCM_ANALOG_BASE._0x0078
#define CCM_ANALOG_AUDIO_PLL_TOG CCM_ANALOG_BASE._0x007c
#define CCM_ANALOG_AUDIO_PLL_NUM CCM_ANALOG_BASE._0x0080
#define CCM_ANALOG_AUDIO_PLL_DENOM CCM_ANALOG_BASE._0x0090

// ANALOG VIDEO PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_VIDEO_PLL CCM_ANALOG_BASE._0x00a0
#define CCM_ANALOG_VIDEO_PLL_SET CCM_ANALOG_BASE._0x00a4
#define CCM_ANALOG_VIDEO_PLL_CLR CCM_ANALOG_BASE._0x00a8
#define CCM_ANALOG_VIDEO_PLL_TOG CCM_ANALOG_BASE._0x00ac
#define CCM_ANALOG_VIDEO_PLL_NUM CCM_ANALOG_BASE._0x00b0
#define CCM_ANALOG_VIDEO_PLL_DENOM CCM_ANALOG_BASE._0x00c0

// ANALOG ETHERNET PLL  [0x00e0, 0x00ec]
#define CCM_ANALOG_PLL_ENET CCM_ANALOG_BASE._0x00e0
#define CCM_ANALOG_PLL_ENET_SET CCM_ANALOG_BASE._0x00e4
#define CCM_ANALOG_PLL_ENET_CLR CCM_ANALOG_BASE._0x00e8
#define CCM_ANALOG_PLL_ENET_TOG CCM_ANALOG_BASE._0x00ec

// Phase Fractional Divider 480MHz (PLL3) [0x00f0, 0x00fc]
#define CCM_ANALOG_PFD480 CCM_ANALOG_BASE._0x00f0
#define CCM_ANALOG_PFD480_SET CCM_ANALOG_BASE._0x00f4
#define CCM_ANALOG_PFD480_CLR CCM_ANALOG_BASE._0x00f8
#define CCM_ANALOG_PFD480_TOG CCM_ANALOG_BASE._0x00fc

// Phase Fractional Divider 528MHz (PLL2) [0x0100, 0x010c]
#define CCM_ANALOG_PFD528 CCM_ANALOG_BASE._0x0100
#define CCM_ANALOG_PFD528_SET CCM_ANALOG_BASE._0x0104
#define CCM_ANALOG_PFD528_CLR CCM_ANALOG_BASE._0x0108
#define CCM_ANALOG_PFD528_TOG CCM_ANALOG_BASE._0x010c

// MISC.  [0x0150, 0x017c]
#define CCM_ANALOG_MISC0 CCM_ANALOG_BASE._0x0150
#define CCM_ANALOG_MISC0_SET CCM_ANALOG_BASE._0x0154
#define CCM_ANALOG_MISC0_CLR CCM_ANALOG_BASE._0x0158
#define CCM_ANALOG_MISC0_TOG CCM_ANALOG_BASE._0x015c
#define CCM_ANALOG_MISC1 CCM_ANALOG_BASE._0x0160
#define CCM_ANALOG_MISC1_SET CCM_ANALOG_BASE._0x0164
#define CCM_ANALOG_MISC1_CLR CCM_ANALOG_BASE._0x0168
#define CCM_ANALOG_MISC1_TOG CCM_ANALOG_BASE._0x016c
#define CCM_ANALOG_MISC2 CCM_ANALOG_BASE._0x0170
#define CCM_ANALOG_MISC2_SET CCM_ANALOG_BASE._0x0174
#define CCM_ANALOG_MISC2_CLR CCM_ANALOG_BASE._0x0178
#define CCM_ANALOG_MISC2_TOG CCM_ANALOG_BASE._0x017c

/**
 * @brief: XTALOSC 24MHz, CRYSTAL OSCILLATOR, Memory Map/Register, 15.6, p.1142
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 **/
#define XOSC_BASE MAP_32BIT_REGISTER(0x400d8150)
#define XOSC_24M_MISC XOSC_BASE._0x0000
#define XOSC_24M_MISC_SET XOSC_BASE._0x0004
#define XOSC_24M_MISC_CLR XOSC_BASE._0x0008
#define XOSC_24M_MISC_TOG XOSC_BASE._0x000c

#define XOSC_24M_LOWPWR_CTRL XOSC_BASE._0x0120
#define XOSC_24M_LOWPWR_CTRL_SET XOSC_BASE._0x0124
#define XOSC_24M_LOWPWR_CTRL_CLR XOSC_BASE._0x0128
#define XOSC_24M_LOWPWR_CTRL_TOG XOSC_BASE._0x012c

#define XOSC_24M_OSC_CONF0 XOSC_BASE._0x0150
#define XOSC_24M_OSC_CONF0_SET XOSC_BASE._0x0154
#define XOSC_24M_OSC_CONF0_CLR XOSC_BASE._0x0158
#define XOSC_24M_OSC_CONF0_TOG XOSC_BASE._0x015c

#define XOSC_24M_OSC_CONF1 XOSC_BASE._0x0160
#define XOSC_24M_OSC_CONF1_SET XOSC_BASE._0x0164
#define XOSC_24M_OSC_CONF1_CLR XOSC_BASE._0x0168
#define XOSC_24M_OSC_CONF1_TOG XOSC_BASE._0x016c

#define XOSC_24M_OSC_CONF2 XOSC_BASE._0x0170
#define XOSC_24M_OSC_CONF2_SET XOSC_BASE._0x0174
#define XOSC_24M_OSC_CONF2_CLR XOSC_BASE._0x0178
#define XOSC_24M_OSC_CONF2_TOG XOSC_BASE._0x017c

/**
 * @brief: PMU Memory Map/Register, 16.6, p.1142
 * The register definitions that affect the behavior
 * of the digital LDO regulators follow.
 *
 * NOTE: Some of the registers are collections of bits that affect
 * multiple components on the chip. Those that are not pertinent
 * to this chapter have comments in the related register bitfields.
 * If a full description is desired, please consult the full
 * register programming reference in the related block
 *
 **/
#define PMU_BASE MAP_32BIT_REGISTER(0x400d8110)
#define PMU_REG_1P1 PMU_BASE._0x0000
#define PMU_REG_1P1_SET PMU_BASE._0x0004
#define PMU_REG_1P1_CLR PMU_BASE._0x0008
#define PMU_REG_1P1_TOG PMU_BASE._0x000c

#define PMU_REG_3P0 PMU_BASE._0x0010
#define PMU_REG_3P0_SET PMU_BASE._0x0014
#define PMU_REG_3P0_CLR PMU_BASE._0x0018
#define PMU_REG_3P0_TOG PMU_BASE._0x001c

#define PMU_REG_2P5 PMU_BASE._0x0020
#define PMU_REG_2P5_SET PMU_BASE._0x0024
#define PMU_REG_2P5_CLR PMU_BASE._0x0028
#define PMU_REG_2P5_TOG PMU_BASE._0x002c

#define PMU_REG_CORE PMU_BASE._0x0030
#define PMU_REG_CORE_SET PMU_BASE._0x0034
#define PMU_REG_CORE_CLR PMU_BASE._0x0038
#define PMU_REG_CORE_TOG PMU_BASE._0x003c

#define PMU_MISC0 PMU_BASE._0x0040
#define PMU_MISC0_SET PMU_BASE._0x0044
#define PMU_MISC0_CLR PMU_BASE._0x0048
#define PMU_MISC0_TOG PMU_BASE._0x004c

#define PMU_MISC1 PMU_BASE._0x0050
#define PMU_MISC1_SET PMU_BASE._0x0054
#define PMU_MISC1_CLR PMU_BASE._0x0058
#define PMU_MISC1_TOG PMU_BASE._0x005c

#define PMU_MISC2 PMU_BASE._0x0060
#define PMU_MISC2_SET PMU_BASE._0x0064
#define PMU_MISC2_CLR PMU_BASE._0x0068
#define PMU_MISC2_TOG PMU_BASE._0x006c

/**
 * @brief: (General Power Controller) GPC Memory Map/Register, 17.6, p.1190
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define GPC_BASE MAP_32BIT_REGISTER(0x400f4000)
#define GPC_ICTRL GPC_BASE._0x0000
#define GPC_IRQ_MR1 GPC_BASE._0x0008
#define GPC_IRQ_MR2 GPC_BASE._0x000c
#define GPC_IRQ_MR3 GPC_BASE._0x0010
#define GPC_IRQ_MR4 GPC_BASE._0x0014
#define GPC_IRQ_SR GPC_BASE._0x0018
#define GPC_IRQ_SR GPC_BASE._0x001c
#define GPC_IRQ_SR GPC_BASE._0x0020
#define GPC_IRQ_SR GPC_BASE._0x0024
#define GPC_IRQ_MR5 GPC_BASE._0x0034
#define GPC_IRQ_SR5 GPC_BASE._0x0038

/**
 * @brief: PGC Memory Map/Register, 17.7, p.1196
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define PGC_BASE MAP_32BIT_REGISTER(0x400f4220)
#define PGC_MEGA_CTRL PGC_BASE._0x0000
#define PGC_MEGA_PUPSCR PGC_BASE._0x0004
#define PGC_MEGA_PDNSCR PGC_BASE._0x0008
#define PGC_MEGA_SR PGC_BASE._0x000c
#define PGC_CPU_CTRL PGC_BASE._0x00a0
#define PGC_CPU_PUPSCR PGC_BASE._0x00a4
#define PGC_PDCSCR PGC_BASE._0x00a8
#define PGC_CPU_SR PGC_BASE._0x00ac

/**
 * @brief: DCDC Memory Map/Register, 18.7, p.1209
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define DCDC_BASE MAP_32BIT_REGISTER(0x40080000)
#define DCDC_REG0 DCDC_BASE._0x0000
#define DCDC_REG1 DCDC_BASE._0x0004
#define DCDC_REG2 DCDC_BASE._0x0008
#define DCDC_REG3 DCDC_BASE._0x000c

/**
 * @brief: TEMPMON Memory Map/Register, 19.4, p.1224
 *
 **/
#define TEMPMON_BASE MAP_32BIT_REGISTER(0x400d8180)
#define TEMPMON_TEMPSENSE0 TEMPMON_BASE._0x0000
#define TEMPMON_TEMPSENSE0_SET TEMPMON_BASE._0x0004
#define TEMPMON_TEMPSENSE0_CLR TEMPMON_BASE._0x0008
#define TEMPMON_TEMPSENSE0_TOG TEMPMON_BASE._0x000c
#define TEMPMON_TEMPSENSE1 TEMPMON_BASE._0x0010
#define TEMPMON_TEMPSENSE1_SET TEMPMON_BASE._0x0014
#define TEMPMON_TEMPSENSE1_CLR TEMPMON_BASE._0x0018
#define TEMPMON_TEMPSENSE1_TOG TEMPMON_BASE._0x001c
#define TEMPMON_TEMPSENSE2 TEMPMON_BASE._0x0020
#define TEMPMON_TEMPSENSE2_SET TEMPMON_BASE._0x0024
#define TEMPMON_TEMPSENSE2_CLR TEMPMON_BASE._0x0028
#define TEMPMON_TEMPSENSE2_TOG TEMPMON_BASE._0x002c

/**
 * @brief: SVNS Memory Map/Register, 20.6.1, p.1224
 *
 **/
#define SVNS_BASE MAP_32BIT_REGISTER(0x400d4000)
#define SVNS_HP_LR SVNS_BASE._0x0000 // Lock Register
#define SVNS_HP_COMR SVNS_BASE._0x0004 // Command Register
#define SVNS_HP_CR SVNS_BASE._0x0008 // Control Register
#define SVNS_HP_ST SVNS_BASE._0x0014 // Status Register
#define SVNS_HP_RTCMR SVNS_BASE._0x0024 // Realtime Counter MSB Register
#define SVNS_HP_RTCLR SVNS_BASE._0x0028 // Realtime Counter LSB Register
#define SVNS_HP_TAMR SVNS_BASE._0x002c // Time Alarm MSB Register
#define SVNS_HP_TALR SVNS_BASE._0x0030 // Time Alarm LSB Register

#define SVNS_LP_LR SVNS_BASE._0x0034 // Lock Register
#define SVNS_LP_CR SVNS_BASE._0x0038 // Control Register
#define SVNS_LP_SR SVNS_BASE._0x004c // Status Register
#define SVNS_LP_SMCMR SVNS_BASE._0x005c // Secure Monotonic Counter MSB Register
#define SVNS_LP_SMCLR SVNS_BASE._0x0060 // Secure Monotonic Counter LSB Register
#define SVNS_LP_GPR0_LEGACY SVNS_BASE._0x0068 // GeneralPurposeRegister0 Legacy

#define SVNS_LP_GPR0_ALIAS SVNS_BASE._0x0090 // General Purpose Register0 alias
#define SVNS_LP_GPR1_ALIAS SVNS_BASE._0x0094 // General Purpose Register1 alias
#define SVNS_LP_GPR2_ALIAS SVNS_BASE._0x0098 // General Purpose Register2 alias
#define SVNS_LP_GPR3_ALIAS SVNS_BASE._0x009c // General Purpose Register3 alias

#define SVNS_LP_GPR0 SVNS_BASE._0x0100 // General Purpose Register0
#define SVNS_LP_GPR1 SVNS_BASE._0x0104 // General Purpose Register1
#define SVNS_LP_GPR2 SVNS_BASE._0x0108 // General Purpose Register2
#define SVNS_LP_GPR4 SVNS_BASE._0x010c // General Purpose Register3

#define SVNS_HP_VIDR1 SVNS_BASE._0x0bf8 // Version ID Register
#define SVNS_HP_VIDR2 SVNS_BASE._0x0bfc // Version ID Register

/**
 * @brief: SRC Memory Map/Register, 21.8, p.1224
 *
 **/
#define SRC_BASE MAP_32BIT_REGISTER(0x400f8000)
#define SRC_CR SRC_BASE._0x0000 // Control Register
#define SRC_BMR1 SRC_BASE._0x0004 // Boot Mode Register 1
#define SRC_RSR SRC_BASE._0x0008 // Reset Status Register
#define SRC_BMR2 SRC_BASE._0x001c // Boot Mode Register 2
#define SRC_GPR01 SRC_BASE._0x0020 // General Purpose Register 1
#define SRC_GPR02 SRC_BASE._0x0024 // General Purpose Register 2
#define SRC_GPR03 SRC_BASE._0x0028 // General Purpose Register 3
#define SRC_GPR04 SRC_BASE._0x002c // General Purpose Register 4
#define SRC_GPR05 SRC_BASE._0x0030 // General Purpose Register 5
#define SRC_GPR06 SRC_BASE._0x0034 // General Purpose Register 6
#define SRC_GPR07 SRC_BASE._0x0038 // General Purpose Register 7
#define SRC_GPR08 SRC_BASE._0x003c // General Purpose Register 8
#define SRC_GPR09 SRC_BASE._0x0040 // General Purpose Register 9
#define SRC_GPR10 SRC_BASE._0x0044 // General Purpose Register 10

/**
 * @brief: OTP Memory Map/Register, 23.6, p.1331
 *
 **/
#define OTP_BASE00 MAP_32BIT_REGISTER(0x401f4000)
#define OTP_CRSR SRC_BASE00._0x0000 // OTP Controller Control & Status
#define OTP_CRSR_SET SRC_BASE00._0x0004 // OTP Contr. Control & Status,SET
#define OTP_CRSR_CLR SRC_BASE00._0x0008 // OTP Contr. Control & Status,CLR
#define OTP_CRSR_TOG SRC_BASE00._0x000c // OTP Contr. Control & Status,TOG
#define OTP_TIMING SRC_BASE00._0x0010 // OTP Controller Timing Register
#define OTP_WDATA SRC_BASE00._0x0020 // OTP Controller Write Data Register
#define OTP_W_READCTRL SRC_BASE00._0x0030 // OTP Controller W/ Data Register
#define OTP_R_DR SRC_BASE00._0x0040 // OTP Controller R/ Data Register
#define OTP_SCS SRC_BASE00._0x0060 // Software Controllable Signal
#define OTP_SCS_SET SRC_BASE00._0x0064 // Software Controllable Signal Set
#define OTP_SCS_CLR SRC_BASE00._0x0068 // SoftwareControllableSignal Clear
#define OTP_SCS_TOG SRC_BASE00._0x006c // SoftwareControllableSignal Toggle
#define OTP_VERSION SRC_BASE00._0x0090 // OTP Controller Version Register
#define OTP_TIMING2 SRC_BASE00._0x0100 // OTP Controller Timing Register 2

#define OTP_BASE MAP_32BIT_REGISTER(0x401f4400)
#define OTP_GPR05 SRC_BASE01._0x0000 // Value of OTP Bank0 Word0 (LOCK)
#define OTP_GPR06 SRC_BASE01._0x0010 // Value of OTP Bank0 Word1 (CFG0)
#define OTP_GPR07 SRC_BASE01._0x0020 // Value of OTP Bank0 Word2 (CFG1)
#define OTP_GPR08 SRC_BASE01._0x0030 // Value of OTP Bank0 Word3 (CFG2)
#define OTP_GPR09 SRC_BASE01._0x0040 // Value of OTP Bank0 Word4 (CFG3)
#define OTP_GPR10 SRC_BASE01._0x0050 // Value of OTP Bank0 Word5 (CFG4)
#define OTP_GPR01 SRC_BASE01._0x0060 // Value of OTP Bank0 Word6 (CFG5)
#define OTP_GPR02 SRC_BASE01._0x0070 // Value of OTP Bank0 Word7 (CFG6)
#define OTP_GPR03 SRC_BASE01._0x00f0 // Value of OTP Bank1 Word7 (Analog info)

#define OTP_BASE00 MAP_32BIT_REGISTER(0x401f4600)
#define OTP_SJC_RESP0 SRC_BASE02._0x0000 // Value of OTP Bank4 Word0
#define OTP_SJC_RESP1 SRC_BASE02._0x0010 // Value of OTP Bank4 Word1
#define OTP_MAC0 SRC_BASE02._0x0020 // Value of OTP Bank4 Word2
#define OTP_MAC1 SRC_BASE02._0x0030 // Value of OTP Bank4 Word3
#define OTP_MAC2 SRC_BASE02._0x0040 // Value of OTP Bank4 Word4
#define OTP_GP1 SRC_BASE02._0x0060 // Value of OTP Bank4 Word6
#define OTP_GP2 SRC_BASE02._0x0070 // Value of OTP Bank4 Word7
#define OTP_B5W0_SW SRC_BASE02._0x0080 // Value of OTP Bank5 Word0
#define OTP_B5W5_MISC SRC_BASE02._0x00d0 // Value of OTP Bank5 Word5
#define OTP_B5W6_MISC SRC_BASE02._0x00e0 // Value of OTP Bank5 Word6
#define OTP_B7W0 SRC_BASE02._0x0280 // Value of OTP Bank7 Word0
#define OTP_B7W1 SRC_BASE02._0x0290 // Value of OTP Bank7 Word1
#define OTP_B7W2 SRC_BASE02._0x02a0 // Value of OTP Bank7 Word2
#define OTP_B7W3 SRC_BASE02._0x02b0 // Value of OTP Bank7 Word3

/**
 * @brief: SEMC Memory Map/Register, 25.4.1.1, p.1385
 *
 **/
#define SEMC_BASE00 MAP_32BIT_REGISTER(0x402f0000)
#define SEMC_MCR SEMC_BASE00._0x0000 // Module Control Register
#define SEMC_IOCR SEMC_BASE00._0x0004 // IO MUX Control Register
#define SEMC_BMCR0 SEMC_BASE00._0x0008 // Bus Master Control Register 0
#define SEMC_BMCR1 SEMC_BASE00._0x000c // Bus Master Control Register 1
#define SEMC_BR0 SEMC_BASE00._0x0010 // Base Register for SDRAMCS0
#define SEMC_BR1 SEMC_BASE00._0x0014 // Base Register for SDRAMCS1
#define SEMC_BR2 SEMC_BASE00._0x0018 // Base Register for SDRAMCS2
#define SEMC_BR3 SEMC_BASE00._0x001c // Base Register for SDRAMCS3
#define SEMC_BR4 SEMC_BASE00._0x0020 // Base Register for NAND Device
#define SEMC_BR5 SEMC_BASE00._0x0024 // Base Register for NOR Device
#define SEMC_BR6 SEMC_BASE00._0x0028 // Base Register for PSRAM
#define SEMC_BR7 SEMC_BASE00._0x002c // Base Register for DBI-B
#define SEMC_BR8 SEMC_BASE00._0x0030 // Base Register for NAND Device
#define SEMC_DLLCR SEMC_BASE00._0x0034 // DLL Control Register (DLLCR)
#define SEMC_BR8 SEMC_BASE00._0x0038 // Interrupt Enable Register (INTEN)
#define SEMC_BR8 SEMC_BASE00._0x003c // Interrupt Enable Register (INTR)
#define SEMC_SDRAMCR0 SEMC_BASE00._0x0040 // SDRAM control register 0
#define SEMC_SDRAMCR1 SEMC_BASE00._0x0044 // SDRAM control register 1
#define SEMC_SDRAMCR2 SEMC_BASE00._0x0048 // SDRAM control register 2
#define SEMC_SDRAMCR3 SEMC_BASE00._0x004c // SDRAM control register 3
#define SEMC_NANDCR0 SEMC_BASE00._0x0050 // NAND control register 0
#define SEMC_NANDCR1 SEMC_BASE00._0x0054 // NAND control register 1
#define SEMC_NANDCR2 SEMC_BASE00._0x0058 // NAND control register 2
#define SEMC_NANDCR3 SEMC_BASE00._0x005c // NAND control register 3
#define SEMC_NORCR0 SEMC_BASE00._0x0060 // NOR control register 0
#define SEMC_NORCR1 SEMC_BASE00._0x0064 // NOR control register 1
#define SEMC_NORCR2 SEMC_BASE00._0x0068 // NOR control register 2
#define SEMC_NORCR3 SEMC_BASE00._0x006c // NOR control register 3
#define SEMC_SRAMCR0 SEMC_BASE00._0x0070 // SRAM control register 0
#define SEMC_SRAMCR1 SEMC_BASE00._0x0074 // SRAM control register 1
#define SEMC_SRAMCR2 SEMC_BASE00._0x0078 // SRAM control register 2
#define SEMC_SRAMCR3 SEMC_BASE00._0x007c // SRAM control register 3
#define SEMC_DBICR0 SEMC_BASE00._0x0080 // DBI-B control register 0
#define SEMC_DBICR1 SEMC_BASE00._0x0084 // DBI-B control register 1
#define SEMC_IPCR0 SEMC_BASE00._0x0090 // IP Command control register 0 (IPCR0)
#define SEMC_IPCR1 SEMC_BASE00._0x0094 // IP Command control register 1 (IPCR1)
#define SEMC_IPCR2 SEMC_BASE00._0x0098 // IP Command control register 2 (IPCR2)
#define SEMC_IPCMD SEMC_BASE00._0x009c // IP Command register _ _ (IPCMD)
#define SEMC_IPTXDAT SEMC_BASE00._0x00a0 // TX DATA register (IPCOMD)
#define SEMC_IPRXDAT SEMC_BASE00._0x00b0 // RX DATA register (IPCOMD)
#define SEMC_STS00 SEMC_BASE00._0x00c0 // Status register 0 (STS00)
#define SEMC_STS01 SEMC_BASE00._0x00c4 // Status register 0 (STS01)
#define SEMC_STS02 SEMC_BASE00._0x00c8 // Status register 0 (STS02)
#define SEMC_STS03 SEMC_BASE00._0x00cc // Status register 0 (STS03)
#define SEMC_STS04 SEMC_BASE00._0x00d0 // Status register 0 (STS04)
#define SEMC_STS05 SEMC_BASE00._0x00d4 // Status register 0 (STS05)
#define SEMC_STS06 SEMC_BASE00._0x00d8 // Status register 0 (STS06)
#define SEMC_STS07 SEMC_BASE00._0x00dc // Status register 0 (STS07)
#define SEMC_STS08 SEMC_BASE00._0x00e0 // Status register 0 (STS08)
#define SEMC_STS09 SEMC_BASE00._0x00e4 // Status register 0 (STS09)
#define SEMC_STS10 SEMC_BASE00._0x00e8 // Status register 0 (STS10)
#define SEMC_STS11 SEMC_BASE00._0x00ec // Status register 0 (STS11)
#define SEMC_STS12 SEMC_BASE00._0x00f0 // Status register 0 (STS12)
#define SEMC_STS13 SEMC_BASE00._0x00f4 // Status register 0 (STS13)
#define SEMC_STS14 SEMC_BASE00._0x00f8 // Status register 0 (STS14)
#define SEMC_STS15 SEMC_BASE00._0x00fc // Status register 0 (STS15)

/**
 * @brief: uSDHC Memory Map/Register, 26.9.1, p.1553
 * This section includes the module memory map
 * and detailed descriptions of all registers.
 * See the table on p.1553 for the register memory map for the uSDHC.
 * All these registers only support 32-bit accesses.
 * Base address:
 * 402C_0000h uSDHC1,
 * 402C_4000h for uSDHC2
 **/
#define uSDHC1_BASE MAP_32BIT_REGISTER(0x402c0000) // uSDHC1
#define uSDHC2_BASE MAP_32BIT_REGISTER(0x402c4000) // uSDHC2

#define uSDHC1_DS_ADDR uSDHC1_BASE._0x0000 // DMA Systems Address
#define uSDHC2_DS_ADDR uSDHC2_BASE._0x0000 //
#define uSDHC1_BLK_ATTR uSDHC1_BASE._0x0004 // Block Attributes
#define uSDHC2_BLK_ATTR uSDHC2_BASE._0x0004 //
#define uSDHC1_CMD_ARG uSDHC1_BASE._0x0008 // Command Argument
#define uSDHC2_CMD_ARG uSDHC2_BASE._0x0008 //
#define uSDHC1_CMD_TX_TYPE uSDHC1_BASE._0x000c // Command Transfer Type
#define uSDHC2_CMD_TX_TYPE uSDHC2_BASE._0x000c //
#define uSDHC1_CMD_RSP0 uSDHC1_BASE._0x0010 // Command Response 0
#define uSDHC2_CMD_RSP0 uSDHC2_BASE._0x0010 //
#define uSDHC1_CMD_RSP1 uSDHC1_BASE._0x0014 // Command Response 1
#define uSDHC2_CMD_RSP1 uSDHC2_BASE._0x0014 //
#define uSDHC1_CMD_RSP2 uSDHC1_BASE._0x0018 // Command Response 2
#define uSDHC2_CMD_RSP2 uSDHC2_BASE._0x0018 //
#define uSDHC1_CMD_RSP3 uSDHC1_BASE._0x001c // Command Response 3
#define uSDHC2_CMD_RSP3 uSDHC2_BASE._0x001c //
#define uSDHC1_DATABUF_ACCSS_PORT uSDHC1_BASE._0x0020 // Data Buf. Access Port
#define uSDHC2_DATABUF_ACCSS_PORT uSDHC2_BASE._0x0020 //
#define uSDHC1_PRES_STATE uSDHC1_BASE._0x0024 // Present State
#define uSDHC2_PRES_STATE uSDHC2_BASE._0x0024 //
#define uSDHC1_PRTCL_CTRL uSDHC1_BASE._0x0028 // Protocol Control
#define uSDHC2_PRTCL_CTRL uSDHC2_BASE._0x0028 //
#define uSDHC1_SYS_CTRL uSDHC1_BASE._0x002c // System Control
#define uSDHC2_SYS_CTRL uSDHC2_BASE._0x002c //
#define uSDHC1_INT_STATUS uSDHC1_BASE._0x0030 // Interrupt Status
#define uSDHC2_INT_STATUS uSDHC2_BASE._0x0030 //
#define uSDHC1_INT_STATUS_EN uSDHC1_BASE._0x0034 // Interrupt Status Enable
#define uSDHC2_INT_STATUS_EN uSDHC2_BASE._0x0034 //
#define uSDHC1_INT_SIGNAL_EN uSDHC1_BASE._0x0038 // Interrupt Signal Enable
#define uSDHC2_INT_SIGNAL_EN uSDHC2_BASE._0x0038 //
#define uSDHC1_AUTOCMD12_ERRSTAT uSDHC1_BASE._0x003c // Auto CMD12 ERRSTAT
#define uSDHC2_AUTOCMD12_ERRSTAT uSDHC2_BASE._0x003c //
#define uSDHC1_HOST_CTRL_CAP uSDHC1_BASE._0x0040 // Host Ctrller Capabilities
#define uSDHC2_HOST_CTRL_CAP uSDHC2_BASE._0x0040 //
#define uSDHC1_WATMK_LVL uSDHC1_BASE._0x0044 // Watermark Level
#define uSDHC2_WATMK_LVL uSDHC2_BASE._0x0044 //
#define uSDHC1_MIX_CTRL uSDHC1_BASE._0x0048 // Mixer Control
#define uSDHC2_MIX_CTRL uSDHC2_BASE._0x0048 //
#define uSDHC1_FORCE_EVENT uSDHC1_BASE._0x0050 // Force Event
#define uSDHC2_FORCE_EVENT uSDHC2_BASE._0x0050 //
#define uSDHC1_ADMA_ERRSTAT uSDHC1_BASE._0x0054 // ADMA Err Stat Register
#define uSDHC2_ADMA_ERRSTAT uSDHC2_BASE._0x0054 //
#define uSDHC1_ADMA_SYS_ADDR uSDHC1_BASE._0x0058 // ADMA Systems Address
#define uSDHC2_ADMA_SYS_ADDR uSDHC2_BASE._0x0058 //
#define uSDHC1_DLL_CTRL uSDHC1_BASE._0x0060 // Delay Line Control
#define uSDHC2_DLL_CTRL uSDHC2_BASE._0x0060 //
#define uSDHC1_DLL_STAT uSDHC1_BASE._0x0064 // Delay Line Status, READONLY
#define uSDHC2_DLL_STAT uSDHC2_BASE._0x0064 //
#define uSDHC1_TUNE_CTRL_STAT uSDHC1_BASE._0x0068 // CLK Tuning ctrl & stat
#define uSDHC2_TUNE_CTRL_STAT uSDHC2_BASE._0x0068 //
#define uSDHC1_VEND_SPEC uSDHC1_BASE._0x00c0 //  Vendor Specific 2 Register
#define uSDHC2_VEND_SPEC uSDHC2_BASE._0x00c0 //
#define uSDHC1_MMC_BOOT uSDHC1_BASE._0x00c4 // MMC Boot Register
#define uSDHC2_MMC_BOOT uSDHC2_BASE._0x00c4 //
#define uSDHC1_VEND_SPEC2 uSDHC1_BASE._0x00c8 // Vendor Specific 2 Register
#define uSDHC2_VEND_SPEC2 uSDHC2_BASE._0x00c8 //
#define uSDHC1_TUNING_CTRL uSDHC1_BASE._0x00cc // DMA Systems Address
#define uSDHC2_TUNING_CTRL uSDHC2_BASE._0x00cc //

// Such a long list for FLEXSPI, put it into a seperate header
#include "flexspi_addr.h"

/**
 * @brief: ARM-Cortex M7 Memory Map/Register, 29.4, p.1744
 * The bus system is composed of five instances:
 * SIM_M7, SIM_PER, SIM_M,SIM_MAIN and SIM_EMS.
 * Three of them have GPV registers which are
 * helpful for busarbitration and performance.
 *
 * These registers are are NOT aimplemented on chip:
 * IB registers. Address region control registers.
 *
 * These are the available registers:
 * SIM_MAIN registers,
 * SIM_M registers,
 * SIM_M7 registers,
 * Periphial ID registers.
 * (The peripheral ID registers are implemented in SIM_MAIN, SIM_M,
 * and SIM_M7.For more details, please see the below mentioned document.)
 *
 *
 * For detailed descriptions of these registers,
 * see the ARMdocument which is in Resources/teenssy4_1_docs/:
 * DI0397I_corelink_network_interconnect_nic301_r2p3_trm.pdf.
 **/

/**
 * @brief: 1.SIM_MAIN registers
 * The SIM_MAIN GPV base address is GPV0_BASE = 0x41000000. The
 * following registers are implemented in this NIC.
 * REGISTERGROUP_REGISTERNAME_MODULENAME_PORTNAME
 **/
#define GPV0_BASE MAP_32BIT_REGISTER(0x41000000)
#define SIM_MAIN_RESRVD_S GPV0_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV0_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV0_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV0_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV0_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV0_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV0_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV0_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV0_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV0_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV0_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV0_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV0_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV0_BASE._0x0000 + 0x0fffc)

#define SIM_MAIN_READQOS_LCD_MA2 (GPV0_BASE._0x0100 + 0x44000)
#define SIM_MAIN_READQOS_CSI_MA3 (GPV0_BASE._0x0100 + 0x45000)
#define SIM_MAIN_READQOS_PXP_MA4 (GPV0_BASE._0x0100 + 0x46000)

#define SIM_MAIN_WRITEQOS_LCD_MA2 (GPV0_BASE._0x0104 + 0x44000)
#define SIM_MAIN_WRITEQOS_CSI_MA3 (GPV0_BASE._0x0104 + 0x45000)
#define SIM_MAIN_WRITEQOS_PXP_MA4 (GPV0_BASE._0x0104 + 0x46000)

#define SIM_MAIN_FNMOD_LCD_MA2 (GPV0_BASE._0x0108 + 0x44000)
#define SIM_MAIN_FNMOD_CSI_MA3 (GPV0_BASE._0x0108 + 0x45000)
#define SIM_MAIN_FNMOD_PXP_MA4 (GPV0_BASE._0x0108 + 0x46000)

/**
 * @brief: 2.SIM_M registers
 * The SIM_M GPV base address is GPV1_BASE = 0x41100000. The
 * following registers are implemented in this NIC.
 **/
#define GPV1_BASE MAP_32BIT_REGISTER(0x41100000)

#define SIM_MAIN_RESRVD_S GPV1_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV1_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV1_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV1_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV1_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV1_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV1_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV1_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV1_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV1_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV1_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV1_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV1_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV1_BASE._0x0000 + 0x0ffc)

#define SIM_MAIN_FNMOD2_DCP_MC0 (GPV1_BASE._0x0024 + 0x42000)
#define SIM_MAIN_FNMODAHB_ENET_MC1 (GPV1_BASE._0x0028 + 0x43000)
#define SIM_MAIN_FNMODAHB_TEST_MC5 (GPV1_BASE._0x0028 + 0x47000)
#define SIM_MAIN_FNMODAHB_ENET2_MC6 (GPV1_BASE._0x0100 + 0x48000)

#define SIM_MAIN_READQOS_DCP_MC0 (GPV1_BASE._0x0100 + 0x42000)
#define SIM_MAIN_READQOS_ENET_MC1 (GPV1_BASE._0x0100 + 0x43000)
#define SIM_MAIN_READQOS_USBO2_MC2 (GPV1_BASE._0x0100 + 0x44000)
#define SIM_MAIN_READQOS_USDHC1_MC3 (GPV1_BASE._0x0100 + 0x45000)
#define SIM_MAIN_READQOS_USDHC2_MC4 (GPV1_BASE._0x0100 + 0x46000)
#define SIM_MAIN_READQOS_TEST_MC5 (GPV1_BASE._0x0100 + 0x47000)
#define SIM_MAIN_READQOS_ENET2_MC6 (GPV1_BASE._0x0100 + 0x48000)
//
#define SIM_MAIN_WRITEQOS_DCP_MC0 (GPV1_BASE._0x0104 + 0x42000)
#define SIM_MAIN_WRITEQOS_ENET_MC0 (GPV1_BASE._0x0104 + 0x43000)
#define SIM_MAIN_WRITEQOS_USBO2_MC0 (GPV1_BASE._0x0104 + 0x44000)
#define SIM_MAIN_WRITEQOS_USDHC1_MC0 (GPV1_BASE._0x0104 + 0x45000)
#define SIM_MAIN_WRITEQOS_USDHC2_MC0 (GPV1_BASE._0x0104 + 0x46000)
#define SIM_MAIN_WRITEQOS_TEST_MC0 (GPV1_BASE._0x0104 + 0x47000)
#define SIM_MAIN_WRITEQOS_ENET2_MC0 (GPV1_BASE._0x0104 + 0x48000)
//
#define SIM_MAIN_FNMOD_DCP_MC0 (GPV1_BASE._0x0108 + 0x42000)
#define SIM_MAIN_FNMOD_ENET_MC0 (GPV1_BASE._0x0108 + 0x43000)
#define SIM_MAIN_FNMOD_USBO2_MC0 (GPV1_BASE._0x0108 + 0x44000)
#define SIM_MAIN_FNMOD_USDHC1_MC0 (GPV1_BASE._0x0108 + 0x45000)
#define SIM_MAIN_FNMOD_USDHC2_MC0 (GPV1_BASE._0x0108 + 0x46000)
#define SIM_MAIN_FNMOD_TEST_MC0 (GPV1_BASE._0x0108 + 0x47000)
#define SIM_MAIN_FNMOD_ENET2_MC0 (GPV1_BASE._0x0108 + 0x48000)

/**
 * @brief: 3.SIM_M7 registers
 * The SIM_M7 GPV base address is GPV4_BASE = 0x41400000. The
 * following registers are implemented in this NIC.
 **/
#define GPV4_BASE MAP_32BIT_REGISTER(0x41400000)

#define SIM_MAIN_RESRVD_S GPV4_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV4_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV4_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV4_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV4_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV4_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV4_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV4_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV4_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV4_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV4_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV4_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV4_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV4_BASE._0x0000 + 0x0ffc)

#define SIM_MAIN_FNMODAHB_DMA_MB1 (GPV4_BASE._0x0028 + 0x43000)
#define SIM_MAIN_WRTIDEMARK_CM7_MB0 (GPV4_BASE._0x0040 + 0x42000)
#define SIM_MAIN_READQOS_CM7_MB0 (GPV4_BASE._0x0100 + 0x42000)
#define SIM_MAIN_READQOS_DMA_MB1 (GPV4_BASE._0x0100 + 0x43000)
#define SIM_MAIN_WRITEQOS_CM7_MB0 (GPV4_BASE._0x0104 + 0x42000)
#define SIM_MAIN_WRITEQOS_DMA_MB1 (GPV4_BASE._0x0104 + 0x43000)
#define SIM_MAIN_FNMOD_CM7_MB0 (GPV4_BASE._0x0108 + 0x42000)
#define SIM_MAIN_FNMOD_DMA_MB1 (GPV4_BASE._0x0108 + 0x43000)

/**
 * @brief: FlexRAM, Flexible Memory Array Map/Register
 * 31.4, p.1766
 * FlexRAM base address: 0x400b0000
 **/
#define FLEXRAM_BASE MAP_32BIT_REGISTER(0x400b0000)
#define FLEXRAM_TCM_CTRL FLEXRAM_BASE._0x0000
#define FLEXRAM_INT_STATUS FLEXRAM_BASE._0x0010
#define FLEXRAM_INT_STAT_EN FLEXRAM_BASE._0x0014
#define FLEXRAM_INT_SIG_EN FLEXRAM_BASE._0x0018

/**
 * @brief: AIPSTZ, AHB to IP Bridge Memory Map/Register
 * 32.8, p.1778
 *
 *  Each AIPSTZx_MPR specifies 16 4-bit fields defining the access privilege
 *  level associated with a bus master in the platform, as well as specifying
 *  whether write accesses from this master are bufferable shown in Table 32-5
 *
 * AIPSTZ base address: 0x4007c000
 **/
#define AIPSTZ_BASE00 MAP_32BIT_REGISTER(0x4007c000)
// Master Priviledge Register (AIPSTZ1_MPR)
#define AIPSTZ1_MPR AIPSTZ_BASE00._0x0000
#define AIPSTZ1_OPACR AIPSTZ_BASE00._0x0040
#define AIPSTZ1_OPACR1 AIPSTZ_BASE00._0x0044
#define AIPSTZ1_OPACR2 AIPSTZ_BASE00._0x0048
#define AIPSTZ1_OPACR3 AIPSTZ_BASE00._0x004c
#define AIPSTZ1_OPACR4 AIPSTZ_BASE00._0x0050

#define AIPSTZ_BASE01 MAP_32BIT_REGISTER(0x4017c000)
// Master Priviledge Register (AIPSTZ2_MPR)
#define AIPSTZ2_MPR AIPSTZ_BASE01._0x0000
#define AIPSTZ2_OPACR AIPSTZ_BASE01._0x0040
#define AIPSTZ2_OPACR1 AIPSTZ_BASE01._0x0044
#define AIPSTZ2_OPACR2 AIPSTZ_BASE01._0x0048
#define AIPSTZ2_OPACR3 AIPSTZ_BASE01._0x004c
#define AIPSTZ2_OPACR4 AIPSTZ_BASE01._0x0050

#define AIPSTZ_BASE02 MAP_32BIT_REGISTER(0x4027c000)
// Master Priviledge Register (AIPSTZ3_MPR)
#define AIPSTZ3_MPR AIPSTZ_BASE02._0x0000
#define AIPSTZ3_OPACR AIPSTZ_BASE02._0x0040
#define AIPSTZ3_OPACR1 AIPSTZ_BASE02._0x0044
#define AIPSTZ3_OPACR2 AIPSTZ_BASE02._0x0048
#define AIPSTZ3_OPACR3 AIPSTZ_BASE02._0x004c
#define AIPSTZ3_OPACR4 AIPSTZ_BASE02._0x0050

#define AIPSTZ_BASE03 MAP_32BIT_REGISTER(0x4037c000)
// Master Priviledge Register (AIPSTZ4_MPR)
#define AIPSTZ4_MPR AIPSTZ_BASE03._0x0000
#define AIPSTZ4_OPACR AIPSTZ_BASE03._0x0040
#define AIPSTZ4_OPACR1 AIPSTZ_BASE03._0x0044
#define AIPSTZ4_OPACR2 AIPSTZ_BASE03._0x0048
#define AIPSTZ4_OPACR3 AIPSTZ_BASE03._0x004c
#define AIPSTZ4_OPACR4 AIPSTZ_BASE03._0x0050

/**
 * @brief: CSI, CMOS Sensor Interface Memory Map/Register
 * 34.8, p.1818
 * CSI base address: 0x402bc000
 **/
#define CSI_BASE MAP_32BIT_REGISTER(0x402bc000)
#define CSI_CR1 CSI_BASE._0x0000
#define CSI_CR2 CSI_BASE._0x0004
#define CSI_CR3 CSI_BASE._0x0008
#define CSI_STATFIFO CSI_BASE._0x000c
#define CSI_RXFIFO CSI_BASE._0x0010
#define CSI_RXCOUNT CSI_BASE._0x0014
#define CSI_SR CSI_BASE._0x0018
#define CSI_DMA_SAR_STATFIFO CSI_BASE._0x0020
#define CSI_DMA_TSR_STATFIFO CSI_BASE._0x0024
#define CSI_DMA_TSR_FB1 CSI_BASE._0x0028
#define CSI_DMA_TSR_FB2 CSI_BASE._0x002c
#define CSI_BUF_PARAMR CSI_BASE._0x0030
#define CSI_IMG_PARAMR CSI_BASE._0x0034
#define CSI_CR18 CSI_BASE._0x0048
#define CSI_CR19 CSI_BASE._0x004c

/**
 * @brief: LCDIF, Enhanced LCD Interface Memory Map/Register
 * 35.7, p.1861
 *
 *
 * Some of the LCDIF registers (XXX_SET, XXX_CLR, and XXX_TOG)
 * allow direct bitfield masking and access.
 * •  When writing 1 to XXX_SET bit fields, these registers allow
 *    setting the masked 1 bitfields, while keeping unchanged all
 *    bit fields which remain on 0 logic state.

 * •  When writing 1 to XXX_CLR bit fields, these registers allow
 *    clearing the masked 1bit fields, while keeping unchanged all
 *    other bit fields which remained on 0 logicstate.
 *
 * •  When writing 1 to XXX_TOG bit fields, these registers allow
 *    inverting the logicstate of all masked 1 bit fields, while
 *    they keep unchanged the remaining bit fields
 *    which were kept on 0 logic state.
 *
 * LCDIF base address: 0x402b8000
 **/
#define LCDIF_BASE00 MAP_32BIT_REGISTER(0x402b8000)
#define LCDIF_CTRL0 LCDIF_BASE00._0x0000
#define LCDIF_CTRL0_SET LCDIF_BASE00._0x0004
#define LCDIF_CTRL0_CLR LCDIF_BASE00._0x0008
#define LCDIF_CTRL0_TOG LCDIF_BASE00._0x000c

#define LCDIF_CTRL1 LCDIF_BASE00._0x0010
#define LCDIF_CTRL1_SET LCDIF_BASE00._0x0014
#define LCDIF_CTRL1_CLR LCDIF_BASE00._0x0018
#define LCDIF_CTRL1_TOG LCDIF_BASE00._0x001c

#define LCDIF_CTRL2 LCDIF_BASE00._0x0020
#define LCDIF_CTRL2_SET LCDIF_BASE00._0x0024
#define LCDIF_CTRL2_CLR LCDIF_BASE00._0x0028
#define LCDIF_CTRL2_TOG LCDIF_BASE00._0x002c

// LCDIF Horizontal and Certical Valid Data Count Register
#define LCDIF_TX_COUNT LCDIF_BASE00._0x0030

// LCD Interface Current Buffer Address Register
#define LCDIF_CUR_BUF LCDIF_BASE00._0x0040

// LCD Interface Next Buffer Address Register
#define LCDIF_NEXT_BUF LCDIF_BASE00._0x0060

// LCDIF VSYNC Mode and Dotclk Mode Control Register 0
#define LCDIF_VDCTRL0 LCDIF_BASE00._0x0070
#define LCDIF_VDCTRL0_SET LCDIF_BASE00._0x0074
#define LCDIF_VDCTRL0_CLR LCDIF_BASE00._0x0078
#define LCDIF_VDCTRL0_TOG LCDIF_BASE00._0x007c

// LCDIF VSYNC Mode and Dotclk Mode Control Register [1,4]
#define LCDIF_VDCTRL1 LCDIF_BASE00._0x0080
#define LCDIF_VDCTRL2 LCDIF_BASE00._0x0090
#define LCDIF_VDCTRL3 LCDIF_BASE00._0x00a0
#define LCDIF_VDCTRL4 LCDIF_BASE00._0x00b0

// Bus Master Error Status Register
#define LCDIF_BM_ERRSTAT LCDIF_BASE00._0x0190

// CRC and LCD Interface Status Registers
#define LCDIF_CRC_SR LCDIF_BASE00._0x01a0
#define LCDIF_SR LCDIF_BASE00._0x01b0

// LCDIF Pigeon Mode Control Registers
#define LCDIF_PIGEONCTRL0 LCDIF_BASE00._0x0380
#define LCDIF_PIGEONCTRL0_SET LCDIF_BASE00._0x0384
#define LCDIF_PIGEONCTRL0_CLR LCDIF_BASE00._0x0388
#define LCDIF_PIGEONCTRL0_TOG LCDIF_BASE00._0x038c

#define LCDIF_PIGEONCTRL1 LCDIF_BASE00._0x0390
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE00._0x0394
#define LCDIF_PIGEONCTRL1_CLR LCDIF_BASE00._0x0398
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE00._0x039c

#define LCDIF_PIGEONCTRL2 LCDIF_BASE00._0x03a0
#define LCDIF_PIGEONCTRL2_SET LCDIF_BASE00._0x03a4
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE00._0x03a8
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE00._0x03ac

#define LCDIF_BASE01 MAP_32BIT_REGISTER(0x402b8800)
#define LCDIF_PIGEON_0_0 LCDIF_BASE01._0x0000
#define LCDIF_PIGEON_0_1 LCDIF_BASE01._0x0010
#define LCDIF_PIGEON_0_2 LCDIF_BASE01._0x0020

#define LCDIF_PIGEON_1_0 LCDIF_BASE01._0x0040
#define LCDIF_PIGEON_1_1 LCDIF_BASE01._0x0050
#define LCDIF_PIGEON_1_2 LCDIF_BASE01._0x0060

#define LCDIF_PIGEON_2_0 LCDIF_BASE01._0x0080
#define LCDIF_PIGEON_2_1 LCDIF_BASE01._0x0090
#define LCDIF_PIGEON_2_2 LCDIF_BASE01._0x00a0

#define LCDIF_PIGEON_3_0 LCDIF_BASE01._0x00c0
#define LCDIF_PIGEON_3_1 LCDIF_BASE01._0x00d0
#define LCDIF_PIGEON_3_2 LCDIF_BASE01._0x00e0

#define LCDIF_PIGEON_4_0 LCDIF_BASE01._0x0100
#define LCDIF_PIGEON_4_1 LCDIF_BASE01._0x0110
#define LCDIF_PIGEON_4_2 LCDIF_BASE01._0x0120

#define LCDIF_PIGEON_5_0 LCDIF_BASE01._0x0140
#define LCDIF_PIGEONCTRL1 LCDIF_BASE01._0x0150
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE01._0x0160

#define LCDIF_PIGEON_6_0 LCDIF_BASE01._0x0180
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE01._0x0190
#define LCDIF_PIGEONCTRL2 LCDIF_BASE01._0x01a0

#define LCDIF_PIGEON_7_0 LCDIF_BASE01._0x01c0
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE01._0x01d0
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE01._0x01e0

#define LCDIF_PIGEON_8_0 LCDIF_BASE01._0x0200
#define LCDIF_PIGEONCTRL0_SET LCDIF_BASE01._0x0210
#define LCDIF_PIGEONCTRL0_CLR LCDIF_BASE01._0x0220

#define LCDIF_PIGEON_9_0 LCDIF_BASE01._0x0240
#define LCDIF_PIGEONCTRL1 LCDIF_BASE01._0x0250
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE01._0x0260

#define LCDIF_PIGEON_10_0 LCDIF_BASE01._0x0280
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE01._0x0290
#define LCDIF_PIGEONCTRL2 LCDIF_BASE01._0x02a0

#define LCDIF_PIGEON_11_0 LCDIF_BASE01._0x02c0
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE01._0x02d0
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE01._0x02e0

#define LCDIF_LUT_CTRL LCDIF_BASE01._0x0300
#define LCDIF_LUT0_ADDR LCDIF_BASE01._0x0310
#define LCDIF_LUT0_DATA LCDIF_BASE01._0x0320
#define LCDIF_LUT1_ADDR LCDIF_BASE01._0x0340
#define LCDIF_LUT1_DATA LCDIF_BASE01._0x0350

/**
 * @brief: PXP, PiXel Pipeline Memory Map/Register
 * 36.8, p.1923
 * PXP base address: 0x402b4000
 **/
#define PXP_BASE00 MAP_32BIT_REGISTER(0x402b4000)
#define PXP_CTRL0 PXP_BASE00._0x0000
#define PXP_CTRL0_SET PXP_BASE00._0x0004
#define PXP_CTRL0_CLR PXP_BASE00._0x0008
#define PXP_CTRL0_TOG PXP_BASE00._0x000c

#define PXP_STAT PXP_BASE00._0x0010
#define PXP_STAT_SET PXP_BASE00._0x0014
#define PXP_STAT_CLR PXP_BASE00._0x0018
#define PXP_STAT_TOG PXP_BASE00._0x001c

#define PXP_OUTBUF_CR PXP_BASE00._0x0020
#define PXP_OUTBUF_CR_SET PXP_BASE00._0x0024
#define PXP_OUTBUF_CR_CLR PXP_BASE00._0x0028
#define PXP_OUTBUF_CR_TOG PXP_BASE00._0x002c

#define PXP_OUT_FRAMBUF PXP_BASE00._0x0030
#define PXP_OUT_FRAMBUF2 PXP_BASE00._0x0040
#define PXP_OUT_BUF_PITCH PXP_BASE00._0x0050
#define PXP_OUT_LRC PXP_BASE00._0x0060

#define PXP_OUT_PS_ULC PXP_BASE00._0x0070
#define PXP_OUT_PS_LRC PXP_BASE00._0x0080
#define PXP_OUT_AS_ULC PXP_BASE00._0x0090
#define PXP_OUT_AS_LRC PXP_BASE00._0x00a0

#define PXP_PS_CTRL PXP_BASE00._0x00b0
#define PXP_PS_CTRL_SET PXP_BASE00._0x00b4
#define PXP_PS_CTRL_CLR PXP_BASE00._0x00b8
#define PXP_PS_CTRL_TOG PXP_BASE00._0x00bc

#define PXP_IN_PS_BUF PXP_BASE00._0x00c0
#define PXP_PS_UBUF PXP_BASE00._0x00d0
#define PXP_IN_VBUF PXP_BASE00._0x00e0
#define PXP_PS_PITCH PXP_BASE00._0x00f0

#define PXP_PS_BG PXP_BASE00._0x0100
#define PXP_PS_SCALE PXP_BASE00._0x0110
#define PXP_PS_OFFSET PXP_BASE00._0x0120
#define PXP_PS_CLRKEYLOW PXP_BASE00._0x0130

#define PXP_PS_CLRKEYHIGH PXP_BASE00._0x0140
#define PXP_AS_CTRL PXP_BASE00._0x0150
#define PXP_AS_BUF PXP_BASE00._0x0160
#define PXP_AS_PITCH PXP_BASE00._0x0170

#define PXP_AS_CLRKEYLOW PXP_BASE00._0x0180
#define PXP_AS_CLRKEYHIGH PXP_BASE00._0x0190

#define PXP_CSC1_COEF0 PXP_BASE00._0x01a0
#define PXP_CSC1_COEF1 PXP_BASE00._0x01b0
#define PXP_CSC1_COEF2 PXP_BASE00._0x01c0

#define PXP_POWER PXP_BASE00._0x0320
#define PXP_NEXT (PXP_BASE00._0x0100 + 0x0300)
#define PXP_PORTER_DUFF_CTRL (PXP_BASE00._0x0100 + 0x0340)

/**
 * @brief: SAI, Synchrounous Audio Interface Memory Map/Register
 * 38.5, p.1981
 * SAI1 base address: 0x40384000
 * SAI2 base address: 0x40388000
 * SAI3 base address: 0x4038c000
 **/
#define SAI1_BASE00 MAP_32BIT_REGISTER(0x40384000)
#define SAI2_BASE00 MAP_32BIT_REGISTER(0x40388000)
#define SAI3_BASE00 MAP_32BIT_REGISTER(0x4038c000)

// SAI1
#define SAI1_VERID SAI1_BASE00._0x0000
#define SAI1_PARAMR SAI1_BASE00._0x0004
// TX ADDRESSES
#define SAI1_TX_CR SAI1_BASE00._0x0008
#define SAI1_TX_CONFR1 SAI1_BASE00._0x000c
#define SAI1_TX_CONFR2 SAI1_BASE00._0x0010
#define SAI1_TX_CONFR3 SAI1_BASE00._0x0014
#define SAI1_TX_CONFR4 SAI1_BASE00._0x0018
#define SAI1_TX_CONFR5 SAI1_BASE00._0x001c
#define SAI1_TX_DR0 SAI1_BASE00._0x0020
#define SAI1_TX_DR1 SAI1_BASE00._0x0024
#define SAI1_TX_DR2 SAI1_BASE00._0x0028
#define SAI1_TX_DR3 SAI1_BASE00._0x002c
#define SAI1_TX_FR0 SAI1_BASE00._0x0040
#define SAI1_TX_FR1 SAI1_BASE00._0x0044
#define SAI1_TX_FR2 SAI1_BASE00._0x0048
#define SAI1_TX_FR3 SAI1_BASE00._0x004c
#define SAI1_TX_MR SAI1_BASE00._0x0060
// RX ADDRESSES
#define SAI1_RX_CR SAI1_BASE00._0x0088
#define SAI1_RX_CONFR1 SAI1_BASE00._0x008c
#define SAI1_RX_CONFR2 SAI1_BASE00._0x0090
#define SAI1_RX_CONFR3 SAI1_BASE00._0x0094
#define SAI1_RX_CONFR4 SAI1_BASE00._0x0098
#define SAI1_RX_CONFR5 SAI1_BASE00._0x009c
#define SAI1_RX_DR0 SAI1_BASE00._0x00a0
#define SAI1_RX_DR1 SAI1_BASE00._0x00a4
#define SAI1_RX_DR2 SAI1_BASE00._0x00a8
#define SAI1_RX_DR3 SAI1_BASE00._0x00ac
#define SAI1_RX_FR0 SAI1_BASE00._0x00c0
#define SAI1_RX_FR1 SAI1_BASE00._0x00c4
#define SAI1_RX_FR2 SAI1_BASE00._0x00c8
#define SAI1_RX_FR3 SAI1_BASE00._0x00cc
#define SAI1_RX_MR SAI1_BASE00._0x00e0

// SAI2
#define SAI2_BASE00 MAP_32BIT_REGISTER(0x40388000)
#define SAI2_VERID SAI2_BASE00._0x0000
#define SAI2_PARAMR SAI2_BASE00._0x0004
// TX ADDRESSES
#define SAI2_TX_CR SAI2_BASE00._0x0008
#define SAI2_TX_CONFR1 SAI2_BASE00._0x000c
#define SAI2_TX_CONFR2 SAI2_BASE00._0x0010
#define SAI2_TX_CONFR3 SAI2_BASE00._0x0014
#define SAI2_TX_CONFR4 SAI2_BASE00._0x0018
#define SAI2_TX_CONFR5 SAI2_BASE00._0x001c
#define SAI2_TX_DR0 SAI2_BASE00._0x0020
#define SAI2_TX_DR1 SAI2_BASE00._0x0024
#define SAI2_TX_DR2 SAI2_BASE00._0x0028
#define SAI2_TX_DR3 SAI2_BASE00._0x002c
#define SAI2_TX_FR0 SAI2_BASE00._0x0040
#define SAI2_TX_FR1 SAI2_BASE00._0x0044
#define SAI2_TX_FR2 SAI2_BASE00._0x0048
#define SAI2_TX_FR3 SAI2_BASE00._0x004c
#define SAI2_TX_MR SAI2_BASE00._0x0060
// RX ADDRESSES
#define SAI2_RX_CR SAI2_BASE00._0x0088
#define SAI2_RX_CONFR1 SAI2_BASE00._0x008c
#define SAI2_RX_CONFR2 SAI2_BASE00._0x0090
#define SAI2_RX_CONFR3 SAI2_BASE00._0x0094
#define SAI2_RX_CONFR4 SAI2_BASE00._0x0098
#define SAI2_RX_CONFR5 SAI2_BASE00._0x009c
#define SAI2_RX_DR0 SAI2_BASE00._0x00a0
#define SAI2_RX_DR1 SAI2_BASE00._0x00a4
#define SAI2_RX_DR2 SAI2_BASE00._0x00a8
#define SAI2_RX_DR3 SAI2_BASE00._0x00ac
#define SAI2_RX_FR0 SAI2_BASE00._0x00c0
#define SAI2_RX_FR1 SAI2_BASE00._0x00c4
#define SAI2_RX_FR2 SAI2_BASE00._0x00c8
#define SAI2_RX_FR3 SAI2_BASE00._0x00cc
#define SAI2_RX_MR SAI2_BASE00._0x00e0

// SAI3
#define SAI3_BASE00 MAP_32BIT_REGISTER(0x4038c000)
#define SAI3_VERID SAI3_BASE00._0x0000
#define SAI3_PARAMR SAI3_BASE00._0x0004
// TX ADDRESSES
#define SAI3_TX_CR SAI3_BASE00._0x0008
#define SAI3_TX_CONFR1 SAI3_BASE00._0x000c
#define SAI3_TX_CONFR2 SAI3_BASE00._0x0010
#define SAI3_TX_CONFR3 SAI3_BASE00._0x0014
#define SAI3_TX_CONFR4 SAI3_BASE00._0x0018
#define SAI3_TX_CONFR5 SAI3_BASE00._0x001c
#define SAI3_TX_DR0 SAI3_BASE00._0x0020
#define SAI3_TX_DR1 SAI3_BASE00._0x0024
#define SAI3_TX_DR2 SAI3_BASE00._0x0028
#define SAI3_TX_DR3 SAI3_BASE00._0x002c
#define SAI3_TX_FR0 SAI3_BASE00._0x0040
#define SAI3_TX_FR1 SAI3_BASE00._0x0044
#define SAI3_TX_FR2 SAI3_BASE00._0x0048
#define SAI3_TX_FR3 SAI3_BASE00._0x004c
#define SAI3_TX_MR SAI3_BASE00._0x0060
// RX ADDRESSES
#define SAI3_RX_CR SAI3_BASE00._0x0088
#define SAI3_RX_CONFR1 SAI3_BASE00._0x008c
#define SAI3_RX_CONFR2 SAI3_BASE00._0x0090
#define SAI3_RX_CONFR3 SAI3_BASE00._0x0094
#define SAI3_RX_CONFR4 SAI3_BASE00._0x0098
#define SAI3_RX_CONFR5 SAI3_BASE00._0x009c
#define SAI3_RX_DR0 SAI3_BASE00._0x00a0
#define SAI3_RX_DR1 SAI3_BASE00._0x00a4
#define SAI3_RX_DR2 SAI3_BASE00._0x00a8
#define SAI3_RX_DR3 SAI3_BASE00._0x00ac
#define SAI3_RX_FR0 SAI3_BASE00._0x00c0
#define SAI3_RX_FR1 SAI3_BASE00._0x00c4
#define SAI3_RX_FR2 SAI3_BASE00._0x00c8
#define SAI3_RX_FR3 SAI3_BASE00._0x00cc
#define SAI1_RX_MR SAI3_BASE00._0x00e0

/**
 * @brief: SPDIF, Sony/Philips Digital Interface Memory Map/Register
 * 40.6, p.2036
 * SPDIF base address: 0x40380000
 **/
#define SPDIF_BASE MAP_32BIT_REGISTER(0x4038c000)
#define SPDIF_SCR SPDIF_BASE._0x0000
#define SPDIF_SRCD SPDIF_BASE._0x0004
#define SPDIF_SRPC SPDIF_BASE._0x0008
#define SPDIF_SIE SPDIF_BASE._0x000c
#define SPDIF_SIS SPDIF_BASE._0x0010
#define SPDIF_SIC SPDIF_BASE._0x0010 // both at 0x10
#define SPDIF_SRL SPDIF_BASE._0x0014
#define SPDIF_SRR SPDIF_BASE._0x0018
#define SPDIF_SRCSH SPDIF_BASE._0x001c
#define SPDIF_SRCSL SPDIF_BASE._0x0020
#define SPDIF_SRU SPDIF_BASE._0x0024
#define SPDIF_SRQ SPDIF_BASE._0x0028
#define SPDIF_STL SPDIF_BASE._0x002c
#define SPDIF_STR SPDIF_BASE._0x0030
#define SPDIF_SRCSCH SPDIF_BASE._0x0034
#define SPDIF_STCSCL SPDIF_BASE._0x0038
#define SPDIF_SRFM SPDIF_BASE._0x0044
#define SPDIF_STC SPDIF_BASE._0x0050

/**
 * @brief: ENET, Ethernet MAC
 * 41.6, p.2068
 *
 * ENET registers must be read or written with 32-bit accesses.
 * Non-32 bit accesses willterminate with an error.
 * Reserved bits should be written with 0 and ignored on read.
 * Unused registers read zeroand a write has no effect
 *
 * Register Map Summary
 * 0x0000 – 0x01FF    Configuration
 *                    Core control and status registers
 *
 * 0x0200 – 0x03FF    Statistics counters
 *                    MIB and Remote Network Monitoring (RFC 2819) registers
 *
 * 0x0400 – 0x0430    1588 control
 *                    1588 adjustable timer (TSM) and 1588 frame control
 *
 * 0x0600 – 0x07FC    Capture/Comp block
 *                    Registers for the Capture/Compare block
 **/
#define ENET_BASE00 MAP_32BIT_REGISTER(0x402d4000)
#define ENET2_EIR ENET_BASE00._0x0004
#define ENET2_EIMR ENET_BASE00._0x0008
#define ENET2_RX_DAR ENET_BASE00._0x0010
#define ENET2_TX_DAR ENET_BASE00._0x0014
#define ENET2_ECR ENET_BASE00._0x0024
#define ENET2_MMFR ENET_BASE00._0x0040
#define ENET2_MSCR ENET_BASE00._0x0044
#define ENET2_MIBC ENET_BASE00._0x0064
#define ENET2_RX_CR ENET_BASE00._0x0084
#define ENET2_TC_CR ENET_BASE00._0x00c4
#define ENET2_PALR ENET_BASE00._0x00e4
#define ENET2_PAUR ENET_BASE00._0x00e8
#define ENET2_OPD ENET_BASE00._0x00ec
#define ENET2_TX_IC ENET_BASE00._0x00f0
#define ENET2_RX_IC ENET_BASE00._0x0100
#define ENET2_IAUR ENET_BASE00._0x0118
#define ENET2_IALR ENET_BASE00._0x011c
#define ENET2_GAUR ENET_BASE00._0x0120
#define ENET2_GALR ENET_BASE00._0x0124
#define ENET2_TFWR ENET_BASE00._0x0144
#define ENET2_RX_DSR ENET_BASE00._0x0180
#define ENET2_TX_DSR ENET_BASE00._0x0184
#define ENET2_MRBR ENET_BASE00._0x0188
#define ENET2_RX_FSL ENET_BASE00._0x0190
#define ENET2_RX_FSEM ENET_BASE00._0x0194
#define ENET2_RX_FAEM ENET_BASE00._0x0198
#define ENET2_RX_AFL ENET_BASE00._0x019c
#define ENET2_TX_SEM ENET_BASE00._0x01a0
#define ENET2_TX_AEM ENET_BASE00._0x01a4
#define ENET2_TX_AFL ENET_BASE00._0x01a8
#define ENET2_TX_IPG ENET_BASE00._0x01ac
#define ENET2_FTRL ENET_BASE00._0x01b0
#define ENET2_TX_ACC ENET_BASE00._0x01c0
#define ENET2_RX_ACC ENET_BASE00._0x01c4

// TX RMON
#define ENET2_RMON_TXDROP ENET_BASE00._0x0200
#define ENET2_RMON_T_PACKETS ENET_BASE00._0x0204
#define ENET2_RMON_T_BC_PKT ENET_BASE00._0x0208
#define ENET2_RMON_T_MC_PKT ENET_BASE00._0x020c
#define ENET2_RMON_T_CRC_ALIGN ENET_BASE00._0x0210
#define ENET2_RMON_T_UNDERSIZE ENET_BASE00._0x0214
#define ENET2_RMON_T_OVERSIZE ENET_BASE00._0x0218
#define ENET2_RMON_T_FRAG ENET_BASE00._0x021c
#define ENET2_RMON_T_JAB ENET_BASE00._0x0220
#define ENET2_RMON_T_COL ENET_BASE00._0x0224
#define ENET2_RMON_T_P64 ENET_BASE00._0x0228
#define ENET2_RMON_T_P65TO127 ENET_BASE00._0x022c
#define ENET2_RMON_T_P128TO255 ENET_BASE00._0x0230
#define ENET2_RMON_T_P256TO511 ENET_BASE00._0x0234
#define ENET2_RMON_T_P512TO1023 ENET_BASE00._0x0238
#define ENET2_RMON_T_P1024TO2047 ENET_BASE00._0x023c
#define ENET2_RMON_T_P_GTE2048 ENET_BASE00._0x0240
#define ENET2_RMON_T_OCTETS ENET_BASE00._0x0244

// TX IEEE
#define ENET2_IEEE_T_DROP ENET_BASE00._0x0248
#define ENET2_IEEE_T_FRAME_OK ENET_BASE00._0x024c
#define ENET2_IEEE_T_1COL ENET_BASE00._0x0250
#define ENET2_IEEE_T_MCOL ENET_BASE00._0x0254
#define ENET2_IEEE_T_DEF ENET_BASE00._0x0258
#define ENET2_IEEE_T_LCOL ENET_BASE00._0x025c
#define ENET2_IEEE_T_EXCOL ENET_BASE00._0x0260
#define ENET2_IEEE_T_MACERR ENET_BASE00._0x0264
#define ENET2_IEEE_T_CSERR ENET_BASE00._0x0268
#define ENET2_IEEE_T_SQE ENET_BASE00._0x026c
#define ENET2_IEEE_T_FDXFC ENET_BASE00._0x0270
#define ENET2_IEEE_T_OCTETS_OK ENET_BASE00._0x0274

// RX RMON
#define ENET2_RMON_R_PACKETS ENET_BASE00._0x0284
#define ENET2_RMON_R_BC_PKT ENET_BASE00._0x0288
#define ENET2_RMON_R_MC_PKT ENET_BASE00._0x028c
#define ENET2_RMON_R_CRC_ALIGN ENET_BASE00._0x0290
#define ENET2_RMON_R_UNDERSIZE ENET_BASE00._0x0294
#define ENET2_RMON_R_OVERSIZE ENET_BASE00._0x0298
#define ENET2_RMON_R_FRAG ENET_BASE00._0x029c
#define ENET2_RMON_R_JAB ENET_BASE00._0x02a0
#define ENET2_RMON_R_RESVD_0 ENET_BASE00._0x02a4
#define ENET2_RMON_R_P64 ENET_BASE00._0x02a8
#define ENET2_RMON_R_P65TO127 ENET_BASE00._0x02ac
#define ENET2_RMON_R_P128TO255 ENET_BASE00._0x02b0
#define ENET2_RMON_R_P256TO511 ENET_BASE00._0x02b4
#define ENET2_RMON_R_P512TO1023 ENET_BASE00._0x02b8
#define ENET2_RMON_R_P1024TO2047 ENET_BASE00._0x02bc
#define ENET2_RMON_R_P_GTE2048 ENET_BASE00._0x02c0
#define ENET2_RMON_R_OCTETS ENET_BASE00._0x02c4

// RX IEEE
#define ENET2_IEEE_R_DROP ENET_BASE00._0x02c8
#define ENET2_IEEE_R_FRAME_OK ENET_BASE00._0x02cc
#define ENET2_IEEE_R_CRC ENET_BASE00._0x02d0
#define ENET2_IEEE_R_ALIGN ENET_BASE00._0x02d4
#define ENET2_IEEE_R_MACERR ENET_BASE00._0x02d8
#define ENET2_IEEE_R_FDXFC ENET_BASE00._0x02dc
#define ENET2_IEEE_R_OCTETS_OK ENET_BASE00._0x02e0

#define EB0 ENET_BASE00._0x0000
#define ENET2_ATCR _OFFSET(EB0, 0x400)
#define ENET2_ATVR _OFFSET(EB0, 0x404)
#define ENET2_ATOFF _OFFSET(EB0, 0x408)
#define ENET2_ATPER _OFFSET(EB0, 0x40c)
#define ENET2_ATCOR _OFFSET(EB0, 0x410)
#define ENET2_ATINC _OFFSET(EB0, 0x414)
#define ENET2_ATSTMP _OFFSET(EB0, 0x418)
#define ENET2_TGSR _OFFSET(EB0, 0x604)
#define ENET2_TCSR0 _OFFSET(EB0, 0x608)
#define ENET2_TCCR0 _OFFSET(EB0, 0x60c)
#define ENET2_TCSR1 _OFFSET(EB0, 0x610)
#define ENET2_TCCR1 _OFFSET(EB0, 0x614)
#define ENET2_TCSR2 _OFFSET(EB0, 0x618)
#define ENET2_TCCR2 _OFFSET(EB0, 0x61c)
#define ENET2_TCSR3 _OFFSET(EB0, 0x620)
#define ENET2_TCCR3 _OFFSET(EB0, 0x624)

#define ENET_BASE20 MAP_32BIT_REGISTER(0x402d8000)
#define ENET_EIR ENET_BASE20._0x0004
#define ENET_EIMR ENET_BASE20._0x0008
#define ENET_RX_DAR ENET_BASE20._0x0010
#define ENET_TX_DAR ENET_BASE20._0x0014
#define ENET_ECR ENET_BASE20._0x0024
#define ENET_MMFR ENET_BASE20._0x0040
#define ENET_MSCR ENET_BASE20._0x0044
#define ENET_MIBC ENET_BASE20._0x0064
#define ENET_RX_CR ENET_BASE20._0x0084
#define ENET_TC_CR ENET_BASE20._0x00c4
#define ENET_PALR ENET_BASE20._0x00e4
#define ENET_PAUR ENET_BASE20._0x00e8
#define ENET_OPD ENET_BASE20._0x00ec
#define ENET_TX_IC ENET_BASE20._0x00f0
#define ENET_RX_IC ENET_BASE20._0x0100
#define ENET_IAUR ENET_BASE20._0x0118
#define ENET_IALR ENET_BASE20._0x011c
#define ENET_GAUR ENET_BASE20._0x0120
#define ENET_GALR ENET_BASE20._0x0124
#define ENET_TFWR ENET_BASE20._0x0144
#define ENET_RX_DSR ENET_BASE20._0x0180
#define ENET_TX_DSR ENET_BASE20._0x0184
#define ENET_MRBR ENET_BASE20._0x0188
#define ENET_RX_FSL ENET_BASE20._0x0190
#define ENET_RX_FSEM ENET_BASE20._0x0194
#define ENET_RX_FAEM ENET_BASE20._0x0198
#define ENET_RX_AFL ENET_BASE20._0x019c
#define ENET_TX_SEM ENET_BASE20._0x01a0
#define ENET_TX_AEM ENET_BASE20._0x01a4
#define ENET_TX_AFL ENET_BASE20._0x01a8
#define ENET_TX_IPG ENET_BASE20._0x01ac
#define ENET_FTRL ENET_BASE20._0x01b0
#define ENET_TX_ACC ENET_BASE20._0x01c0
#define ENET_RX_ACC ENET_BASE20._0x01c4

// TX RMON
#define ENET_RMON_TXDROP ENET_BASE20._0x0200
#define ENET_RMON_T_PACKETS ENET_BASE20._0x0204
#define ENET_RMON_T_BC_PKT ENET_BASE20._0x0208
#define ENET_RMON_T_MC_PKT ENET_BASE20._0x020c
#define ENET_RMON_T_CRC_ALIGN ENET_BASE20._0x0210
#define ENET_RMON_T_UNDERSIZE ENET_BASE20._0x0214
#define ENET_RMON_T_OVERSIZE ENET_BASE20._0x0218
#define ENET_RMON_T_FRAG ENET_BASE20._0x021c
#define ENET_RMON_T_JAB ENET_BASE20._0x0220
#define ENET_RMON_T_COL ENET_BASE20._0x0224
#define ENET_RMON_T_P64 ENET_BASE20._0x0228
#define ENET_RMON_T_P65TO127 ENET_BASE20._0x022c
#define ENET_RMON_T_P128TO255 ENET_BASE20._0x0230
#define ENET_RMON_T_P256TO511 ENET_BASE20._0x0234
#define ENET_RMON_T_P512TO1023 ENET_BASE20._0x0238
#define ENET_RMON_T_P1024TO2047 ENET_BASE20._0x023c
#define ENET_RMON_T_P_GTE2048 ENET_BASE20._0x0240
#define ENET_RMON_T_OCTETS ENET_BASE20._0x0244

// TX IEEE
#define ENET_IEEE_T_DROP ENET_BASE20._0x0248
#define ENET_IEEE_T_FRAME_OK ENET_BASE20._0x024c
#define ENET_IEEE_T_1COL ENET_BASE20._0x0250
#define ENET_IEEE_T_MCOL ENET_BASE20._0x0254
#define ENET_IEEE_T_DEF ENET_BASE20._0x0258
#define ENET_IEEE_T_LCOL ENET_BASE20._0x025c
#define ENET_IEEE_T_EXCOL ENET_BASE20._0x0260
#define ENET_IEEE_T_MACERR ENET_BASE20._0x0264
#define ENET_IEEE_T_CSERR ENET_BASE20._0x0268
#define ENET_IEEE_T_SQE ENET_BASE20._0x026c
#define ENET_IEEE_T_FDXFC ENET_BASE20._0x0270
#define ENET_IEEE_T_OCTETS_OK ENET_BASE20._0x0274

// RX RMON
#define ENET_RMON_R_PACKETS ENET_BASE20._0x0284
#define ENET_RMON_R_BC_PKT ENET_BASE20._0x0288
#define ENET_RMON_R_MC_PKT ENET_BASE20._0x028c
#define ENET_RMON_R_CRC_ALIGN ENET_BASE20._0x0290
#define ENET_RMON_R_UNDERSIZE ENET_BASE20._0x0294
#define ENET_RMON_R_OVERSIZE ENET_BASE20._0x0298
#define ENET_RMON_R_FRAG ENET_BASE20._0x029c
#define ENET_RMON_R_JAB ENET_BASE20._0x02a0
#define ENET_RMON_R_RESVD_0 ENET_BASE20._0x02a4
#define ENET_RMON_R_P64 ENET_BASE20._0x02a8
#define ENET_RMON_R_P65TO127 ENET_BASE20._0x02ac
#define ENET_RMON_R_P128TO255 ENET_BASE20._0x02b0
#define ENET_RMON_R_P256TO511 ENET_BASE20._0x02b4
#define ENET_RMON_R_P512TO1023 ENET_BASE20._0x02b8
#define ENET_RMON_R_P1024TO2047 ENET_BASE20._0x02bc
#define ENET_RMON_R_P_GTE2048 ENET_BASE20._0x02c0
#define ENET_RMON_R_OCTETS ENET_BASE20._0x02c4

// RX IEEE
#define ENET_IEEE_R_DROP ENET_BASE20._0x02c8
#define ENET_IEEE_R_FRAME_OK ENET_BASE20._0x02cc
#define ENET_IEEE_R_CRC ENET_BASE20._0x02d0
#define ENET_IEEE_R_ALIGN ENET_BASE20._0x02d4
#define ENET_IEEE_R_MACERR ENET_BASE20._0x02d8
#define ENET_IEEE_R_FDXFC ENET_BASE20._0x02dc
#define ENET_IEEE_R_OCTETS_OK ENET_BASE20._0x02e0

#define EB1 ENET_BASE20._0x0000
#define ENET_ATCR _OFFSET(EB1, 0x400)
#define ENET_ATVR _OFFSET(EB1, 0x404)
#define ENET_ATOFF _OFFSET(EB1, 0x408)
#define ENET_ATPER _OFFSET(EB1, 0x40c)
#define ENET_ATCOR _OFFSET(EB1, 0x410)
#define ENET_ATINC _OFFSET(EB1, 0x414)
#define ENET_ATSTMP _OFFSET(EB1, 0x418)
#define ENET_TGSR _OFFSET(EB1, 0x604)
#define ENET_TCSR0 _OFFSET(EB1, 0x608)
#define ENET_TCCR0 _OFFSET(EB1, 0x60c)
#define ENET_TCSR1 _OFFSET(EB1, 0x610)
#define ENET_TCCR1 _OFFSET(EB1, 0x614)
#define ENET_TCSR2 _OFFSET(EB1, 0x618)
#define ENET_TCCR2 _OFFSET(EB1, 0x61c)
#define ENET_TCSR3 _OFFSET(EB1, 0x620)
#define ENET_TCCR3 _OFFSET(EB1, 0x624)

/**
 * @brief: USB, Non-Core and Core Memory Map
 * 42.6 + 42.7, p.2376
 *
 *  There are two kinds of registers in the USB module: USB core registers and
 *  USB non-core registers. USB core registers are used to control USB core
 *  functions, and moreindependent of USB features. Each USB controller core has
 *  its own core registers. USBnon-core registers are additional to USB core
 *  registers, and more dependent on USBfeatures. i.MX series products vary in
 *  non-core registers.
 *
 *  USBNC denotes the Non Core mappings
 *
 **/
#define USBCORE_BASE MAP_32BIT_REGISTER(0x402e0000)
#define USBCB0 USBCORE_BASE._0x0000
#define USBNC_USB_OTG1_CTRL _OFFSET(USBCB0, 0x800)
#define USBNC_USB_OTG2_CTRL _OFFSET(USBCB0, 0x804)
#define USBNC_USB_OTG1_PHY_CTRL_0 _OFFSET(USBCB0, 0x818)
#define USBNC_USB_OTG2_PHY_CTRL_0 _OFFSET(USBCB0, 0x81c)

#define USB_UOG1_ID USBCORE_BASE._0x0000
#define USB_UOG1_HWGENERAL USBCORE_BASE._0x0004
#define USB_UOG1_HWHOST USBCORE_BASE._0x0008
#define USB_UOG1_HWTXBUF USBCORE_BASE._0x000c
#define USB_UOG1_HWTXBUF USBCORE_BASE._0x0010
#define USB_UOG1_HWRXBUF USBCORE_BASE._0x0014

#define USB_UOG1_GPTIMER0LD USBCORE_BASE._0x0080
#define USB_UOG1_GPTIMER0CTRL USBCORE_BASE._0x0084
#define USB_UOG1_GPTIMER1LD USBCORE_BASE._0x0088
#define USB_UOG1_GPTIMER1CTRL USBCORE_BASE._0x008c
#define USB_UOG1_SBUSCFG USBCORE_BASE._0x0090
#define USB_UOG1_CAPLENGTH USBCORE_BASE._0x0100
#define USB_UOG1_HCIVERSION USBCORE_BASE._0x0102

#define USB_UOG1_HCSPARAMS USBCORE_BASE._0x0104
#define USB_UOG1_HCCPARAMS USBCORE_BASE._0x0108
#define USB_UOG1_DCIVERSION USBCORE_BASE._0x0120
#define USB_UOG1_DCCPARAMS USBCORE_BASE._0x0124
#define USB_UOG1_USBCMD USBCORE_BASE._0x0140
#define USB_UOG1_USBSTS USBCORE_BASE._0x0144
#define USB_UOG1_USBINTR USBCORE_BASE._0x0148
#define USB_UOG1_FRINDEX USBCORE_BASE._0x014c
#define USB_UOG1_PERIODICLISTBASE USBCORE_BASE._0x0154 // Host Controller Only
#define USB_UOG1_DEVICEADDR USBCORE_BASE._0x0154 // Device Controller only
#define USB_UOG1_ASYNCLISTADDR USBCORE_BASE._0x0158 // Host Controller Only
#define USB_UOG1_ENDPTLISTADDR USBCORE_BASE._0x0158 // Device Controller Only

#define USB_UOG1_BURSTSIZE USBCORE_BASE._0x0160
#define USB_UOG1_TXFILLTUNING USBCORE_BASE._0x0164
#define USB_UOG1_ENDPTNAK USBCORE_BASE._0x0178
#define USB_UOG1_ENDPTNAKEN USBCORE_BASE._0x017c
#define USB_UOG1_CONFIGFLAG USBCORE_BASE._0x0180
#define USB_UOG1_PORTSC1 USBCORE_BASE._0x0184
#define USB_UOG1_OTGSC USBCORE_BASE._0x01a4
#define USB_UOG1_USBMODE USBCORE_BASE._0x01a8
#define USB_UOG1_ENDPTSETUPSTAT USBCORE_BASE._0x01ac
#define USB_UOG1_ENDPTPRIME USBCORE_BASE._0x01b0
#define USB_UOG1_ENDPTFLUSH USBCORE_BASE._0x01b4
#define USB_UOG1_ENDPTSTAT USBCORE_BASE._0x01b8
#define USB_UOG1_ENDPTCOMPLETE USBCORE_BASE._0x01bc
#define USB_UOG1_ENDPTCTRL0 USBCORE_BASE._0x01c0
#define USB_UOG1_ENDPTCTRL1 USBCORE_BASE._0x01c4
#define USB_UOG1_ENDPTCTRL2 USBCORE_BASE._0x01c8
#define USB_UOG1_ENDPTCTRL3 USBCORE_BASE._0x01cc
#define USB_UOG1_ENDPTCTRL4 USBCORE_BASE._0x01d0
#define USB_UOG1_ENDPTCTRL5 USBCORE_BASE._0x01d4
#define USB_UOG1_ENDPTCTRL6 USBCORE_BASE._0x01d8
#define USB_UOG1_ENDPTCTRL7 USBCORE_BASE._0x01dc

// UOB2
#define USB_UOG2_ID USBCORE_BASE._0x0200
#define USB_UOG2_HWGENERAL USBCORE_BASE._0x0204
#define USB_UOG2_HWHOST USBCORE_BASE._0x0208
#define USB_UOG2_HWDEVICE USBCORE_BASE._0x020c
#define USB_UOG2_HWTXBUF USBCORE_BASE._0x0210
#define USB_UOG2_HWRXBUF USBCORE_BASE._0x0214
#define USB_UOG2_GPTIMER0LD USBCORE_BASE._0x0280
#define USB_UOG2_GPTIMER0CTRL USBCORE_BASE._0x0284
#define USB_UOG2_GPTIMER1LD USBCORE_BASE._0x0288
#define USB_UOG2_GPTIMER1CTRL USBCORE_BASE._0x028c
#define USB_UOG2_SBUSCFG USBCORE_BASE._0x0290
#define USB_UOG2_CAPLENGTH USBCORE_BASE._0x0300
#define USB_UOG2_HCIVERSION USBCORE_BASE._0x0302
#define USB_UOG2_HCSPARAMS USBCORE_BASE._0x0304
#define USB_UOG2_HCCPARAMS USBCORE_BASE._0x0308
#define USB_UOG2_DCIVERSION USBCORE_BASE._0x0320
#define USB_UOG2_DCCPARAMS USBCORE_BASE._0x0324
#define USB_UOG2_USBCMD USBCORE_BASE._0x0340
#define USB_UOG2_USBSTS USBCORE_BASE._0x0344
#define USB_UOG2_USBINTR USBCORE_BASE._0x0348
#define USB_UOG2_FRINDEX USBCORE_BASE._0x034c
#define USB_UOG2_PERIODICLISTBASE USBCORE_BASE._0x0354 // Host Controller only
#define USB_UOG2_DEVICEADDR USBCORE_BASE._0x0354 // Device Controller only
#define USB_UOG2_ASYNCLISTADDR USBCORE_BASE._0x0358 // Host Controller only
#define USB_UOG2_ENDPTLISTADDR USBCORE_BASE._0x0358 // Device Controller only

#define USB_UOG2_BURSTSIZE USBCORE_BASE._0x0360
#define USB_UOG2_TXFILLTUNING USBCORE_BASE._0x0364
#define USB_UOG2_ENDPTNAK USBCORE_BASE._0x0378
#define USB_UOG2_ENDPTNAKEN USBCORE_BASE._0x037c
#define USB_UOG2_CONFIGFLAG USBCORE_BASE._0x0380
#define USB_UOG2_PORTSC1 USBCORE_BASE._0x0384
#define USB_UOG2_OTGSC USBCORE_BASE._0x03a4
#define USB_UOG2_USBMODE USBCORE_BASE._0x03a8
#define USB_UOG2_ENDPTSETUPSTAT USBCORE_BASE._0x03ac
#define USB_UOG2_ENDPTPRIME USBCORE_BASE._0x03b0
#define USB_UOG2_ENDPTFLUSH USBCORE_BASE._0x03b4
#define USB_UOG2_ENDPTSTAT USBCORE_BASE._0x03b8
#define USB_UOG2_ENDPTCOMPLETE USBCORE_BASE._0x03bc
#define USB_UOG2_ENDPTCTRL0 USBCORE_BASE._0x03c0
#define USB_UOG2_ENDPTCTRL1 USBCORE_BASE._0x03c4
#define USB_UOG2_ENDPTCTRL2 USBCORE_BASE._0x03c8
#define USB_UOG2_ENDPTCTRL3 USBCORE_BASE._0x03cc
#define USB_UOG2_ENDPTCTRL4 USBCORE_BASE._0x03d0
#define USB_UOG2_ENDPTCTRL5 USBCORE_BASE._0x03d4
#define USB_UOG2_ENDPTCTRL6 USBCORE_BASE._0x03d8
#define USB_UOG2_ENDPTCTRL7 USBCORE_BASE._0x03dc

/**
 * USB-PHY Chapter 43, p.2463
 */
{ /**
   * @brief: USBPHY Memory Map
   * 43.4, p.2475
   *
   * USBPHY Hardware Register Format Summary
   * Base Address: 0x400d9000
   * // 54 registers
   **/
#define USBPHY_BASE0 MAP_32BIT_REGISTER(0x400d9000)
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD USBPHY_BASE0._0x0000

/**
 * @brief: USBPHY ANALOG Memory Map
 * 43.5, p.2491
 *
 * USBPHY Hardware Register Format Summary
 * Base Address: 0x400c81a0
 * 
 * // 37 registers
 **/}
#define USB_PA_BASE0 MAP_32BIT_REGISTER(0x400c81a0)
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT_SET USB_PA_BASE0._0x0004
#define USB_ANALOG_USB1_VBUS_DETECT_CLR USB_PA_BASE0._0x0008
#define USB_ANALOG_USB1_VBUS_DETECT_TOG USB_PA_BASE0._0x000c
#define USB_ANALOG_USB1_CHRG_DETECT USB_PA_BASE0._0x0010
#define USB_ANALOG_USB1_CHRG_DETECT_SET USB_PA_BASE0._0x0014
#define USB_ANALOG_USB1_CHRG_DETECT_CLR USB_PA_BASE0._0x0018
#define USB_ANALOG_USB1_CHRG_DETECT_TOG USB_PA_BASE0._0x001c
#define USB_ANALOG_USB1_VBUS_DETECT_STAT USB_PA_BASE0._0x0020
#define USB_ANALOG_USB1_CHRG_DETECT_STAT USB_PA_BASE0._0x0030
#define USB_ANALOG_USB1_LOOPBACK USB_PA_BASE0._0x0040
#define USB_ANALOG_USB1_LOOPBACK_SET USB_PA_BASE0._0x0044
#define USB_ANALOG_USB1_LOOPBACK_CLR USB_PA_BASE0._0x0048
#define USB_ANALOG_USB1_LOOPBACK_TOG USB_PA_BASE0._0x004c
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000

/**


 * @brief Analog MUX Channel Mappings
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 *
 * The Analog MUX (ANMUX) provides a circuit for selecting an analog input
 * signal from eight channels. One signal is provided by the 6-bit
 * digital-to-analog converter (DAC). The mux circuit is designed to operate
 * across the full range of the supply voltage.
 *
 * The ANMUX has the following features:
 * • Two 8-to-1 channel mux
 * • Operational over the entire supply range
 *
 */

/**
 * @brief DAC, Digital to Analog Converter
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 * The 6-bit DAC is 64-tap resistor ladder network which provides a selectable
 * voltagereference for applications where voltage reference is needed. The
 * 64-tap resistor laddernetwork divides the supply reference Vin into 64
 * voltage levels. A 6-bit digital signal input selects the output voltage
 * level, which varies from Vin to Vin/64. Vin can be selectedfrom two voltage
 * sources, Vin1 and Vin2. The 6-bit DAC from a comparator is availableas an
 * on-chip internal signal only and is not available externally to a pin.
 *
 * The 6-bit DAC has the following features:
 * • 6-bit resolution
 * • Selectable supply reference source
 * • Power Down mode to conserve power when not in use
 * • Option to route the output to internal comparator input
 *
 */

/**
 * @brief Comparator Module Mappings
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 * The comparator (CMP) module provides a circuit for comparing two analog
 * input voltages.
 * The comparator circuit is designed to operate across the full
 * range of the supply voltage, known as rail-to-rail operation.
 *
 * The CMP has the following features:
 * • Operational over the entire supply range
 * • Inputs may range from rail to rail
 * • Programmable hysteresis control
 * • Selectable interrupt on rising-edge, falling-edge, or both rising or
 *   falling edges of the comparator output
 * • Selectable inversion on comparator output
 * • Capability to produce a wide range of outputs such as:
 *    • Sampled
 *    • Windowed, which is ideal for certain PWM
 *      zero-crossing-detection applications
 *    • Digitally filtered:
 *        • Filter can be bypassed
 *        • Can be clocked via external SAMPLE signal or scaled bus clock
 *    • External hysteresis can be used at the same time that the output filter
 *      is used for internal functions
 *    • Two software selectable performance levels:
 *        • Shorter propagation delay at the expense of higher power
 *        •  Low power, with longer propagation delay
 *    • DMA transfer support
 *        •  A comparison event can be selected to trigger a DMA transfer
 *    • Functional in all modes of operation
 *    • The window and filter functions are not available in the following
 *      modes:
 *      • Stop
 *      • VLPS
 *
 * In the CMP block diagram (p. 3301):
 * • The Window Control block is bypassed when CR1[WE] = 0
 * • If CR1[WE] = 1, the comparator output will be sampled on every bus clock
 *   when WINDOW=1 to generate COUTA. Sampling does NOT occur when WINDOW = 0.
 * • The Filter block is bypassed when not in use.
 * • The Filter block acts as a simple sampler if the filter is bypassed
 *   and CR0[FILTER_CNT] is set to 0x01.
 * • The Filter block filters based on multiple samples when the filter is
 *   bypassed andCR0[FILTER_CNT] is set greater than 0x01.
 * • If CR1[SE] = 1, the external SAMPLE input is used as sampling clock
 * • If CR1[SE] = 0, the divided bus clock is used as sampling clock
 * • If enabled, the Filter block will incur up to one bus clock additional
 *   latency penalty on COUT due to the fact that COUT, which is crossing clock
 *   domain boundaries,must be resynchronized to the bus clock.
 * •  CR1[WE] and CR1[SE] are mutually exclusive.
 */

// CMP CONTROL REGISTERS, p.3301 - p.3324 in
// IMXRT1060_Processor_Reference_Manual CMP1
#define CMP_BASE MAP_8BIT_REGISTER(0x40094000)
#define CMP1_CR0 CMP_BASE._0x000 // R/W, CMP Control Register 0
#define CMP1_CR1 CMP_BASE._0x001 // R/W, CMP Control Register 1
#define CMP1_FPR CMP_BASE._0x002 // R/W, CMP Filter Period Register
#define CMP1_SCR CMP_BASE._0x003 // R/W, CMP Status and Control Register
#define CMP1_DACCR CMP_BASE._0x004 // R/W, DAC Control Register
#define CMP1_MUXCR CMP_BASE._0x005 // R/W, MUX Control Register

// CMP2
#define CMP2_CR0 CMP_BASE._0x008 // R/W, CMP Control Register 0
#define CMP2_CR1 CMP_BASE._0x009 // R/W, CMP Control Register 1
#define CMP2_FPR CMP_BASE._0x00a // R/W, CMP Filter Period Register
#define CMP2_SCR CMP_BASE._0x00b // R/W, CMP Status and Control Register
#define CMP2_DACCR CMP_BASE._0x00c // R/W, DAC Control Register
#define CMP2_MUXCR CMP_BASE._0x00d // R/W, MUX Control Register

// CMP3
#define CMP3_CR0 CMP_BASE._0x010 // R/W, CMP Control Register 0
#define CMP3_CR1 CMP_BASE._0x011 // R/W, CMP Control Register 1
#define CMP3_FPR CMP_BASE._0x012 // R/W, CMP Filter Period Register
#define CMP3_SCR CMP_BASE._0x013 // R/W, CMP Status and Control Register
#define CMP3_DACCR CMP_BASE._0x014 // R/W, DAC Control Register
#define CMP3_MUXCR CMP_BASE._0x015 // R/W, MUX Control Register

// CMP4
#define CMP4_CR0 CMP_BASE._0x018 // R/W, CMP Control Register 0
#define CMP4_CR1 CMP_BASE._0x019 // R/W, CMP Control Register 1
#define CMP4_FPR CMP_BASE._0x01a // R/W, CMP Filter Period Register
#define CMP4_SCR CMP_BASE._0x01b // R/W, CMP Status and Control Register
#define CMP4_DACCR CMP_BASE._0x01c // R/W, DAC Control Register
#define CMP4_MUXCR CMP_BASE._0x01d // R/W, MUX Control Register

/**
 * @brief ADC, Analog to Digital Converter p.3325
 * The analog-to-digital converter (ADC) is a successive approximation ADC
 * designed foroperation within an integrated microcontroller
 *
 * The features of the ADC are as follows:
 * • Configuration registers
 * • 32-bit, word aligned, byte enabled registers.
 *   (byte and half word access is not supported)
 * • Linear successive approximation algorithm with up
 *   to 12-bit resolution with 10/11bit accuracy.
 * • Up to 10 ENOB (dedicated single ended channels)
 * • Up to 1MS/s sampling rate
 * • Up to 16 single-ended external analog inputs
 * • Single or continuous conversion
 *   (automatic return to idle after single conversion)
 * • Output Modes: (in right-justified unsigned format)
 *    • 12-bit
 *    • 10-bit
 *    • 8-bit
 * • Configurable sample time and conversion speed/power
 * • Conversion complete and hardware average complete flag and interrupt
 * • Input clock selectable from up to three sources
 * • Asynchronous clock source for lower noise operation
 *   with option to output the clock
 * • Selectable asynchronous hardware conversion trigger
 *   with hardware channel select
 * • Automatic compare with interrupt for less-than, greater-than
 *   or equal-to, withinrange, or out-of-range, programmable value
 * • Operation in low power modes for lower noise operation
 * • Hardware average function
 * • Self-calibration mode
 */

// ADC1
// ADC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define ADC1_BASE MAP_32BIT_REGISTER(0x400c4000)
// // Control Registers for hardware triggers
#define ADC1_HC0 ADC1_BASE._0x0000
#define ADC1_HC1 ADC1_BASE._0x0004
#define ADC1_HC2 ADC1_BASE._0x0008
#define ADC1_HC3 ADC1_BASE._0x000c
#define ADC1_HC4 ADC1_BASE._0x0010
#define ADC1_HC5 ADC1_BASE._0x0014
#define ADC1_HC6 ADC1_BASE._0x0018
#define ADC1_HC7 ADC1_BASE._0x001c

// // Status Register for HW Triggers
#define ADC1_HS ADC1_BASE._0x0020

// // Data result registers for HW triggers
#define ADC1_R0 ADC1_BASE._0x0024
#define ADC1_R1 ADC1_BASE._0x0028
#define ADC1_R2 ADC1_BASE._0x002c
#define ADC1_R3 ADC1_BASE._0x0030
#define ADC1_R4 ADC1_BASE._0x0034
#define ADC1_R5 ADC1_BASE._0x0038
#define ADC1_R6 ADC1_BASE._0x003c
#define ADC1_R7 ADC1_BASE._0x0040

// // Other registers
#define ADC1_CFG ADC1_BASE._0x0044 // Config. Register
#define ADC1_GC ADC1_BASE._0x0048 // General control register
#define ADC1_GS ADC1_BASE._0x004c // General status register
#define ADC1_CV ADC1_BASE._0x0050 // Compare value register
#define ADC1_OFS ADC1_BASE._0x0054 // Offset correction calue register
#define ADC1_CAL ADC1_BASE._0x0058 // Calibration value register

// ADC2
// ADC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define ADC2_BASE MAP_32BIT_REGISTER(0x400c8000)
// // Control Registers for hardware triggers
#define ADC2_HC0 ADC2_BASE._0x0000
#define ADC2_HC1 ADC2_BASE._0x0004
#define ADC2_HC2 ADC2_BASE._0x0008
#define ADC2_HC3 ADC2_BASE._0x000c
#define ADC2_HC4 ADC2_BASE._0x0010
#define ADC2_HC5 ADC2_BASE._0x0014
#define ADC2_HC6 ADC2_BASE._0x0018
#define ADC2_HC7 ADC2_BASE._0x001c

// // Status Register for HW Triggers
#define ADC2_HS ADC2_BASE._0x0020

// // Data result registers for HW triggers
#define ADC2_R0 ADC2_BASE._0x0024
#define ADC2_R1 ADC2_BASE._0x0028
#define ADC2_R2 ADC2_BASE._0x002c
#define ADC2_R3 ADC2_BASE._0x0030
#define ADC2_R4 ADC2_BASE._0x0034
#define ADC2_R5 ADC2_BASE._0x0038
#define ADC2_R6 ADC2_BASE._0x003c
#define ADC2_R7 ADC2_BASE._0x0040

/**
 * @brief ADC_ETC, Analog to Digital Converter p.3371
 *
 *  The ADC_ETC module enables multiple users to share the ADC modules in a
 *  TIME-Division-Multiplexing (TDM) way.
 *  The external triggers can be from the Cross BAR(XBAR) and
 *  TSC (Touch Screen Controller) in SOC.
 *  The ADC_ETC has one TSCexternal trigger and 8 external triggers from XBAR.
 *  The TSC external trigger is sharedby TSC0 and TSC1.
 *  The triggers trig0~trig3 from XBAR and TSC0 belong to
 *  channel 0 and control ADC1, and trig4~trig7 and TSC1 belong to
 *  channel 1 and share ADC2 with the TSC external trigger.
 *  When TSC_BYPASS is set, TSC external trigger will control ADC2 directly.
 *  The ADC_ETC also supports SyncMode.
 *  When set as SyncMode, the ADC_ETC trigger source will
 *  control ADC1 and ADC2 synchronously.
 *  In SyncMode, the initial delay is controlled by the registers of
 *  trig0~trig3, while other settings are independent.
 *  The SyncMode can not be used when TSC_BYPASS is active. TheADC_ETC can
 *  support interrupt mode and DMA mode (controlled independently).
 *
 * The ADC_ETC includes the following features:
 * • ADC trigger control interface with dual ADCs, support up to 8 Hardware
 *   External Trigger (ext_hwts[7:0]) control for each ADC
 * • Capable of triggering dual ADC in SyncMode or AsyncMode:
 *    • In SyncMode ADC1 and ADC2 are controlled by the
 *      same trigger source of ADC_ETC.
 *    • In AsyncMode ADC1 and ADC2 are controlled by
 *      separate trigger source of ADC_ETC.
 * • Support up to four external trigger inputs for each ADC
 *   (trig0~trig3 for ADC1, andtrig4~trig7 for ADC2):
 *    • Four single to multiple (up to 8) trigger sources.
 *    One external trigger of ADC_ETC results in multiple sequential triggers,
 *    which are named as triggerchain, to ADC.
 *    • Flexible ADC trigger interval and initial delay control.
 *    • Each trigger sources can be configured as HW or SW trigger mode.
 *
 * • ADC result holding and status reporting
 * • External trigger auto hold and arbitration
 * • Each external trigger can be configured with a fixed priority.
 *   External trigger with the highest priority is severed first.
 *
 * • Hold one trigger event upon arbitration lose or ADC busy.
 * • Support ADC trigger interface cascading
 * • Support interrupt mode. When interrupt mode is selected and one
 *   ADC conversion is done, an interrupt request signal will be
 *   generated on one of the Done0~Done2 interrupt outputs.
 *
 * • Support DMA mode. When DMA is enabled and one ADC conversion is done,
 *   aDMA request will be sent. 2 trigger modes of DMA can be selected by
 *   configuring DMA_MODE_SEL bitfield.
 */
// ADC_ETC
// ADC_ETC MEMORY ADDRESS MAPPINGS p.3376-p.3398
#define ADC_ETC_BASE MAP_32BIT_REGISTER(0x403b0000)
// // Control Registers for hardware triggers
#define ADC_ETC_GCR ADC_ETC_BASE._0x0000 // ADC_ETC Global Control Register
#define ADC_HC1 ADC_ETC_BASE._0x0004 // ETC DONE0 and DONE1 IRQ State Register
#define ADC_HC2 ADC_ETC_BASE._0x0008 // ETC DONE2 and DONE3 IRQ State Register
#define ADC_HC3 ADC_ETC_BASE._0x000c // ETC DMA Control Register

// TRIG0
#define ADC_TRIG0_CR ADC_ETC_BASE._0x0010 // ETC TRIG0 Control Register
#define ADC_TRIG0_COUNTERR ADC_ETC_BASE._0x0014 // ETC TRIG0 COUNTER Register
#define ADC_TRIG0_CHAIN_1_0 ADC_ETC_BASE._0x0018 // ETC TRIG0 Chain 0/1 Reg.
#define ADC_TRIG0_CHAIN_3_2 ADC_ETC_BASE._0x001c // ETC TRIG0 Chain 2/3 Reg.
#define ADC_TRIG0_CHAIN_5_4 ADC_ETC_BASE._0x0020 // ETC TRIG0 Chain 4/5 Reg.
#define ADC_TRIG0_CHAIN_7_6 ADC_ETC_BASE._0x0024 // ETC TRIG0 Chain 6/7 Reg.
#define ADC_TRIG0_RES_1_0 ADC_ETC_BASE._0x0028 // ETC TRIG0 Result Data 0/1 Reg.
#define ADC_TRIG0_RES_3_2 ADC_ETC_BASE._0x002c // ETC TRIG0 Result Data 2/3 Reg.
#define ADC_TRIG0_RES_5_4 ADC_ETC_BASE._0x0030 // ETC TRIG0 Result Data 4/5 Reg.
#define ADC_TRIG0_RES_7_6 ADC_ETC_BASE._0x0034 // ETC TRIG0 Result Data 6/7 Reg.

// TRIG1
#define ADC_TRIG1_CR ADC_ETC_BASE._0x0038 // ETC TRIG1 Control Register
#define ADC_TRIG1_COUNTERR ADC_ETC_BASE._0x003c // ETC TRIG1 COUNTER Register
#define ADC_TRIG1_CHAIN_1_0 ADC_ETC_BASE._0x0040 // ETC TRIG1 Chain 0/1 Reg.
#define ADC_TRIG1_CHAIN_3_2 ADC_ETC_BASE._0x0044 // ETC TRIG1 Chain 2/3 Reg.
#define ADC_TRIG1_CHAIN_5_4 ADC_ETC_BASE._0x0048 // ETC TRIG1 Chain 4/5 Reg.
#define ADC_TRIG1_CHAIN_7_6 ADC_ETC_BASE._0x004c // ETC TRIG1 Chain 6/7 Reg.
#define ADC_TRIG1_RES_1_0 ADC_ETC_BASE._0x0050 // ETC TRIG1 Result Data 0/1 Reg.
#define ADC_TRIG1_RES_3_2 ADC_ETC_BASE._0x0054 // ETC TRIG1 Result Data 2/3 Reg.
#define ADC_TRIG1_RES_5_4 ADC_ETC_BASE._0x0058 // ETC TRIG1 Result Data 4/5 Reg.
#define ADC_TRIG1_RES_7_6 ADC_ETC_BASE._0x005c // ETC TRIG1 Result Data 6/7 Reg.

// TRIG2
#define ADC_TRIG2_CR ADC_ETC_BASE._0x0060 // ETC TRIG2 Control Register
#define ADC_TRIG2_COUNTERR ADC_ETC_BASE._0x0064 // ETC TRIG2 COUNTER Register
#define ADC_TRIG2_CHAIN_1_0 ADC_ETC_BASE._0x0068 // ETC TRIG2 Chain 0/1 Reg.
#define ADC_TRIG2_CHAIN_3_2 ADC_ETC_BASE._0x006c // ETC TRIG2 Chain 2/3 Reg.
#define ADC_TRIG2_CHAIN_5_4 ADC_ETC_BASE._0x0070 // ETC TRIG2 Chain 4/5 Reg.
#define ADC_TRIG2_CHAIN_7_6 ADC_ETC_BASE._0x0074 // ETC TRIG2 Chain 6/7 Reg.
#define ADC_TRIG2_RES_1_0 ADC_ETC_BASE._0x0078 // ETC TRIG2 Result Data 0/1 Reg.
#define ADC_TRIG2_RES_3_2 ADC_ETC_BASE._0x007c // ETC TRIG2 Result Data 2/3 Reg.
#define ADC_TRIG2_RES_5_4 ADC_ETC_BASE._0x0080 // ETC TRIG2 Result Data 4/5 Reg.
#define ADC_TRIG2_RES_7_6 ADC_ETC_BASE._0x0084 // ETC TRIG2 Result Data 6/7 Reg.

// TRIG3
#define ADC_TRIG3_CR ADC_ETC_BASE._0x0088 // ETC TRIG3 Control Register
#define ADC_TRIG3_COUNTERR ADC_ETC_BASE._0x008c // ETC TRIG3 COUNTER Register
#define ADC_TRIG3_CHAIN_1_0 ADC_ETC_BASE._0x0090 // ETC TRIG3 Chain 0/1 Reg.
#define ADC_TRIG3_CHAIN_3_2 ADC_ETC_BASE._0x0094 // ETC TRIG3 Chain 2/3 Reg.
#define ADC_TRIG3_CHAIN_5_4 ADC_ETC_BASE._0x0098 // ETC TRIG3 Chain 4/5 Reg.
#define ADC_TRIG3_CHAIN_7_6 ADC_ETC_BASE._0x009c // ETC TRIG3 Chain 6/7 Reg.
#define ADC_TRIG3_RES_1_0 ADC_ETC_BASE._0x00a0 // ETC TRIG3 Result Data 0/1 Reg.
#define ADC_TRIG3_RES_3_2 ADC_ETC_BASE._0x00a4 // ETC TRIG3 Result Data 2/3 Reg.
#define ADC_TRIG3_RES_5_4 ADC_ETC_BASE._0x00a8 // ETC TRIG3 Result Data 4/5 Reg.
#define ADC_TRIG3_RES_7_6 ADC_ETC_BASE._0x00ac // ETC TRIG3 Result Data 6/7 Reg.

// TRIG4
#define ADC_TRIG4_CR ADC_ETC_BASE._0x00b0 // ETC TRIG4 Control Register
#define ADC_TRIG4_COUNTERR ADC_ETC_BASE._0x00b4 // ETC TRIG4 COUNTER Register
#define ADC_TRIG4_CHAIN_1_0 ADC_ETC_BASE._0x00b8 // ETC TRIG4 Chain 0/1 Reg.
#define ADC_TRIG4_CHAIN_3_2 ADC_ETC_BASE._0x00bc // ETC TRIG4 Chain 2/3 Reg.
#define ADC_TRIG4_CHAIN_5_4 ADC_ETC_BASE._0x00c0 // ETC TRIG4 Chain 4/5 Reg.
#define ADC_TRIG4_CHAIN_7_6 ADC_ETC_BASE._0x00c4 // ETC TRIG4 Chain 6/7 Reg.
#define ADC_TRIG4_RES_1_0 ADC_ETC_BASE._0x00c8 // ETC TRIG4 Result Data 0/1 Reg.
#define ADC_TRIG4_RES_3_2 ADC_ETC_BASE._0x00cc // ETC TRIG4 Result Data 2/3 Reg.
#define ADC_TRIG4_RES_5_4 ADC_ETC_BASE._0x00d0 // ETC TRIG4 Result Data 4/5 Reg.
#define ADC_TRIG4_RES_7_6 ADC_ETC_BASE._0x00d4 // ETC TRIG4 Result Data 6/7 Reg.

// TRIG5
#define ADC_TRIG5_CR ADC_ETC_BASE._0x00d8 // ETC TRIG5 Control Register
#define ADC_TRIG5_COUNTERR ADC_ETC_BASE._0x00dc // ETC TRIG5 COUNTER Register
#define ADC_TRIG5_CHAIN_1_0 ADC_ETC_BASE._0x00e0 // ETC TRIG5 Chain 0/1 Reg.
#define ADC_TRIG5_CHAIN_3_2 ADC_ETC_BASE._0x00e4 // ETC TRIG5 Chain 2/3 Reg.
#define ADC_TRIG5_CHAIN_5_4 ADC_ETC_BASE._0x00e8 // ETC TRIG5 Chain 4/5 Reg.
#define ADC_TRIG5_CHAIN_7_6 ADC_ETC_BASE._0x00ec // ETC TRIG5 Chain 6/7 Reg.
#define ADC_TRIG5_RES_1_0 ADC_ETC_BASE._0x00f0 // ETC TRIG5 Result Data 0/1 Reg.
#define ADC_TRIG5_RES_3_2 ADC_ETC_BASE._0x00f4 // ETC TRIG5 Result Data 2/3 Reg.
#define ADC_TRIG5_RES_5_4 ADC_ETC_BASE._0x00f8 // ETC TRIG5 Result Data 4/5 Reg.
#define ADC_TRIG5_RES_7_6 ADC_ETC_BASE._0x00fc // ETC TRIG5 Result Data 6/7 Reg.

// TRIG6
#define ADC_TRIG6_CR ADC_ETC_BASE._0x0100 // ETC TRIG6 Control Register
#define ADC_TRIG6_COUNTERR ADC_ETC_BASE._0x0104 // ETC TRIG6 COUNTER Register
#define ADC_TRIG6_CHAIN_1_0 ADC_ETC_BASE._0x0108 // ETC TRIG6 Chain 0/1 Reg.
#define ADC_TRIG6_CHAIN_3_2 ADC_ETC_BASE._0x010c // ETC TRIG6 Chain 2/3 Reg.
#define ADC_TRIG6_CHAIN_5_4 ADC_ETC_BASE._0x0110 // ETC TRIG6 Chain 4/5 Reg.
#define ADC_TRIG6_CHAIN_7_6 ADC_ETC_BASE._0x0114 // ETC TRIG6 Chain 6/7 Reg.
#define ADC_TRIG6_RES_1_0 ADC_ETC_BASE._0x0118 // ETC TRIG6 Result Data 0/1 Reg.
#define ADC_TRIG6_RES_3_2 ADC_ETC_BASE._0x011c // ETC TRIG6 Result Data 2/3 Reg.
#define ADC_TRIG6_RES_5_4 ADC_ETC_BASE._0x0120 // ETC TRIG6 Result Data 4/5 Reg.
#define ADC_TRIG6_RES_7_6 ADC_ETC_BASE._0x0124 // ETC TRIG6 Result Data 6/7 Reg.

// TRIG7
#define ADC_TRIG7_CR ADC_ETC_BASE._0x0128 // ETC TRIG7 Control Register
#define ADC_TRIG7_COUNTERR ADC_ETC_BASE._0x012c // ETC TRIG7 COUNTER Register
#define ADC_TRIG7_CHAIN_1_0 ADC_ETC_BASE._0x0120 // ETC TRIG7 Chain 0/1 Reg.
#define ADC_TRIG7_CHAIN_3_2 ADC_ETC_BASE._0x0124 // ETC TRIG7 Chain 2/3 Reg.
#define ADC_TRIG7_CHAIN_5_4 ADC_ETC_BASE._0x0128 // ETC TRIG7 Chain 4/5 Reg.
#define ADC_TRIG7_CHAIN_7_6 ADC_ETC_BASE._0x012c // ETC TRIG7 Chain 6/7 Reg.
#define ADC_TRIG7_RES_1_0 ADC_ETC_BASE._0x0130 // ETC TRIG7 Result Data 0/1 Reg.
#define ADC_TRIG7_RES_3_2 ADC_ETC_BASE._0x0134 // ETC TRIG7 Result Data 2/3 Reg.
#define ADC_TRIG7_RES_5_4 ADC_ETC_BASE._0x0138 // ETC TRIG7 Result Data 4/5 Reg.
#define ADC_TRIG7_RES_7_6 ADC_ETC_BASE._0x013c // ETC TRIG7 Result Data 6/7 Reg.

/**
 * @brief TSC, Touch Screen Controller p.3399
 *
 * This block describes the Touch Screen Controller (TSC), which is used for ADC
 * and touch screen analogue block. TSC is responsible for providing control of
 * ADC and touch screen analogue block toform a touch screen system, which
 * achieves function of touch detection and touchlocation detection. The
 * controller utilizes ADC hardware trigger function and controlswitches in
 * touch screen analogue block. The controller only supports 4-wire of
 * 5-wirescreen touch modes
 *
 * The features of TSC controller are following.
 * • Configure registers: 32-bit, fully support sky-blue bus interface
 * • 4-wire or 5-wire mode of touch screen
 * • Low power wake up functions
 * • ADC average function and custom 8-bit, 10-bit, and 12-bit conversion result
 * • Custom pre-charge and de-glitch threshold time setting
 * • Total control five analogue groups of switches
 * • Fully asynchronous interface to ADC and analogue switches
 * • Easy software operation
 * • Software takes control of operation flow
 * • Strong debug functions—enable software recognize the IP as a transparent
 *   box and operation ouput directly
 * • Software reset function
 */

// TSC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define TSC_BASE MAP_32BIT_REGISTER(0x400e0000)
#define TSC_BASIC_SETTING TSC_BASE._0x000
#define TSC_PRE_CHARGE_TIME TSC_BASE._0x010
#define TSC_FLOW_CTRL TSC_BASE._0x020
#define TSC_MEASURE_VALUE TSC_BASE._0x030
#define TSC_INTRPT_ENABLE TSC_BASE._0x40
#define TSC_INTRPT_SIG_ENABLE TSC_BASE._0x50
#define TSC_INTRPT_STATUS TSC_BASE._0x60
#define TSC_DEBUG_MODE TSC_BASE._0x70
#define TSC_DEBUG_MODE2 TSC_BASE._0x80

void
DMAMUX_init(DMA_REQUESTS_MUX_CHANNELS CH, uint8_t DMA_SRC)
{
}

#endif // SYSTEM_MEMORY_MAP_H

/*

// 4.5 PIT CHANNEL ASSIGNMENT FOR PERIODIC DMA TRIGGERING

DMA Channel Number          PIT Channel
eDMA Channel 0              PIT Channel 0
eDMA Channel 1              PIT Channel 1
eDMA Channel 2              PIT Channel 2
eDMA Channel 3              PIT Channel 3


// 4.6 XBAR RESOURCE ASSIGNMENTS

// XBAR 1 INPUT ASSIGNMENTS
Assigned Input      |     XBAR1 Input   |    Gate     |
LOGIC LOW                 XBAR1_IN00        -
LOGIC HIGH                XBAR1_IN01        -
IOMUX_XBAR_IN02           XBAR1_IN02        -
IOMUX_XBAR_IN03           XBAR1_IN03        -
IOMUX_XBAR_INOUT04        XBAR1_IN04        -
IOMUX_XBAR_INOUT05        XBAR1_IN05        -
IOMUX_XBAR_INOUT06        XBAR1_IN06        -
IOMUX_XBAR_INOUT07        XBAR1_IN07        -
IOMUX_XBAR_INOUT08        XBAR1_IN08        -
IOMUX_XBAR_INOUT09        XBAR1_IN09        -
IOMUX_XBAR_INOUT10        XBAR1_IN10        -
IOMUX_XBAR_INOUT11        XBAR1_IN11        -
IOMUX_XBAR_INOUT12        XBAR1_IN12        -
IOMUX_XBAR_INOUT13        XBAR1_IN13        -
IOMUX_XBAR_INOUT14        XBAR1_IN14        -
IOMUX_XBAR_INOUT15        XBAR1_IN15        -
IOMUX_XBAR_INOUT16        XBAR1_IN16        -
IOMUX_XBAR_INOUT17        XBAR1_IN17        -
IOMUX_XBAR_INOUT18        XBAR1_IN18        -
IOMUX_XBAR_INOUT19        XBAR1_IN19        -
IOMUX_XBAR_IN20           XBAR1_IN20        -
IOMUX_XBAR_IN21           XBAR1_IN21        -
IOMUX_XBAR_IN22           XBAR1_IN22        -
IOMUX_XBAR_IN23           XBAR1_IN23        -
IOMUX_XBAR_IN24           XBAR1_IN24        -
IOMUX_XBAR_IN25           XBAR1_IN25        -
ACMP1_OUT                 XBAR1_IN26        -
ACMP2_OUT                 XBAR1_IN27        -
ACMP3_OUT                 XBAR1_IN28        -
ACMP4_OUT                 XBAR1_IN29        -
Reserved                  XBAR1_IN30        -
Reserved                  XBAR1_IN31        -
QTIMER3_TIMER0            XBAR1_IN32        -
QTIMER3_TIMER1            XBAR1_IN33        -
QTIMER3_TIMER2            XBAR1_IN34        -
QTIMER3_TIMER3            XBAR1_IN35        -
QTIMER4_TIMER0            XBAR1_IN36        -
QTIMER4_TIMER1            XBAR1_IN37        -
QTIMER4_TIMER2            XBAR1_IN38        -
QTIMER4_TIMER3            XBAR1_IN39        -
FLEXPWM1_PWM1_OUT_TRIG0   XBAR1_IN40        OR
FLEXPWM1_PWM1_OUT_TRIG1                     OR
FLEXPWM1_PWM2_OUT_TRIG0   XBAR1_IN41        OR
FLEXPWM1_PWM2_OUT_TRIG1                     OR
FLEXPWM1_PWM3_OUT_TRIG0   XBAR1_IN42        OR
FLEXPWM1_PWM3_OUT_TRIG1                     OR
FLEXPWM1_PWM4_OUT_TRIG0   XBAR1_IN43        OR
FLEXPWM1_PWM4_OUT_TRIG1                     OR
FLEXPWM2_PWM1_OUT_TRIG0   XBAR1_IN44        OR
FLEXPWM2_PWM1_OUT_TRIG1                     OR
FLEXPWM2_PWM2_OUT_TRIG0   XBAR1_IN45        OR
FLEXPWM2_PWM2_OUT_TRIG1                     OR
FLEXPWM2_PWM3_OUT_TRIG0   XBAR1_IN46        OR
FLEXPWM2_PWM3_OUT_TRIG1                     OR
FLEXPWM2_PWM4_OUT_TRIG0   XBAR1_IN47        OR
FLEXPWM2_PWM4_OUT_TRIG1                     OR
FLEXPWM3_PWM1_OUT_TRIG0   XBAR1_IN48        OR
FLEXPWM3_PWM1_OUT_TRIG1                     OR
FLEXPWM3_PWM2_OUT_TRIG0   XBAR1_IN49        OR
FLEXPWM3_PWM2_OUT_TRIG1                     OR
FLEXPWM3_PWM3_OUT_TRIG0   XBAR1_IN50        OR
FLEXPWM3_PWM3_OUT_TRIG1                     OR
FLEXPWM3_PWM4_OUT_TRIG0   XBAR1_IN51        OR
FLEXPWM3_PWM4_OUT_TRIG1                     OR
FLEXPWM4_PWM1_OUT_TRIG0   XBAR1_IN52        OR
FLEXPWM4_PWM1_OUT_TRIG1                     OR
FLEXPWM4_PWM2_OUT_TRIG0   XBAR1_IN53        OR
FLEXPWM4_PWM2_OUT_TRIG1                     OR
FLEXPWM4_PWM3_OUT_TRIG0   XBAR1_IN54        OR
FLEXPWM4_PWM3_OUT_TRIG1                     OR
FLEXPWM4_PWM4_OUT_TRIG0   XBAR1_IN55        OR
FLEXPWM4_PWM4_OUT_TRIG1                     OR
PIT_TRIGGER0              XBAR1_IN56        -
PIT_TRIGGER1              XBAR1_IN57        -
PIT_TRIGGER2              XBAR1_IN58        -
PIT_TRIGGER3              XBAR1_IN59        -
ENC1_POS_MATCH            XBAR1_IN60        -
ENC2_POS_MATCH            XBAR1_IN61        -
ENC3_POS_MATCH            XBAR1_IN62        -
ENC4_POS_MATCH            XBAR1_IN63        -
DMA_DONE0                 XBAR1_IN64        -
DMA_DONE1                 XBAR1_IN65        -
DMA_DONE2                 XBAR1_IN66        -
DMA_DONE3                 XBAR1_IN67        -
DMA_DONE4                 XBAR1_IN68        -
DMA_DONE5                 XBAR1_IN69        -
DMA_DONE6                 XBAR1_IN70        -
DMA_DONE7                 XBAR1_IN71        -
AOI1_OUT0                 XBAR1_IN72        -
AOI1_OUT1                 XBAR1_IN73        -
AOI1_OUT2                 XBAR1_IN74        -
AOI1_OUT3                 XBAR1_IN75        -
AOI2_OUT0                 XBAR1_IN76        -
AOI2_OUT1                 XBAR1_IN77        -
AOI2_OUT2                 XBAR1_IN78        -
AOI2_OUT3                 XBAR1_IN79        -
ADC_ETC0_COCO0            XBAR1_IN80        -
ADC_ETC0_COCO1            XBAR1_IN81        -
ADC_ETC0_COCO2            XBAR1_IN82        -
ADC_ETC0_COCO3            XBAR1_IN83        -
ADC_ETC1_COCO0            XBAR1_IN84        -
ADC_ETC1_COCO1            XBAR1_IN85        -
ADC_ETC1_COCO2            XBAR1_IN86        -
ADC_ETC1_COCO3            XBAR1_IN87        -

// XBAR 2 INPUT ASSIGNMENTS
LOGIC LOW                 XBAR2_IN00        -
LOGIC HIGH                XBAR2_IN01        -
Reserved                  XBAR2_IN02        -
Reserved                  XBAR2_IN03        -
Reserved                  XBAR2_IN04        -
Reserved                  XBAR2_IN05        -
ACMP1_OUT                 XBAR2_IN06        -
ACMP2_OUT                 XBAR2_IN07        -
ACMP3_OUT                 XBAR2_IN08        -
ACMP4_OUT                 XBAR2_IN09        -
Reserved                  XBAR2_IN10        -
Reserved                  XBAR2_IN11        -
QTIMER3_TIMER0            XBAR2_IN12        -
QTIMER3_TIMER1            XBAR2_IN13        -
QTIMER3_TIMER2            XBAR2_IN14        -
QTIMER3_TIMER3            XBAR2_IN15        -
QTIMER4_TIMER0            XBAR2_IN16        -
QTIMER4_TIMER1            XBAR2_IN17        -
QTIMER4_TIMER2            XBAR2_IN18        -
QTIMER4_TIMER3            XBAR2_IN19        -
FLEXPWM1_PWM1_OUT_TRIG0   XBAR2_IN20        OR
FLEXPWM1_PWM1_OUT_TRIG1   XBAR2_IN20        OR
FLEXPWM1_PWM2_OUT_TRIG0   XBAR2_IN21        OR
FLEXPWM1_PWM2_OUT_TRIG1   XBAR2_IN21        OR
FLEXPWM1_PWM3_OUT_TRIG0   XBAR2_IN22        OR
FLEXPWM1_PWM3_OUT_TRIG1   XBAR2_IN22        OR
FLEXPWM1_PWM4_OUT_TRIG0   XBAR2_IN23        OR
FLEXPWM1_PWM4_OUT_TRIG1   XBAR2_IN23        OR
FLEXPWM2_PWM1_OUT_TRIG0   XBAR2_IN24        OR
FLEXPWM2_PWM1_OUT_TRIG1   XBAR2_IN24        OR
FLEXPWM2_PWM2_OUT_TRIG0   XBAR2_IN25        OR
FLEXPWM2_PWM2_OUT_TRIG1   XBAR2_IN25        OR
FLEXPWM2_PWM3_OUT_TRIG0   XBAR2_IN26        OR
FLEXPWM2_PWM3_OUT_TRIG1   XBAR2_IN26        OR
FLEXPWM2_PWM4_OUT_TRIG0   XBAR2_IN27        OR
FLEXPWM2_PWM4_OUT_TRIG1   XBAR2_IN27        OR
FLEXPWM3_PWM1_OUT_TRIG0   XBAR2_IN28        OR
FLEXPWM3_PWM1_OUT_TRIG1   XBAR2_IN28        OR
FLEXPWM3_PWM2_OUT_TRIG0   XBAR2_IN29        OR
FLEXPWM3_PWM2_OUT_TRIG1   XBAR2_IN29        OR
FLEXPWM3_PWM3_OUT_TRIG0   XBAR2_IN30        OR
FLEXPWM3_PWM3_OUT_TRIG1   XBAR2_IN30        OR
FLEXPWM3_PWM4_OUT_TRIG0   XBAR2_IN31        OR
FLEXPWM3_PWM4_OUT_TRIG1   XBAR2_IN31        OR
FLEXPWM4_PWM1_OUT_TRIG0   XBAR2_IN32        OR
FLEXPWM4_PWM1_OUT_TRIG1   XBAR2_IN32        OR
FLEXPWM4_PWM2_OUT_TRIG0   XBAR2_IN33        OR
FLEXPWM4_PWM2_OUT_TRIG1   XBAR2_IN33        OR
FLEXPWM4_PWM3_OUT_TRIG0   XBAR2_IN34        OR
FLEXPWM4_PWM3_OUT_TRIG1   XBAR2_IN34        OR
FLEXPWM4_PWM4_OUT_TRIG0   XBAR2_IN35        OR
FLEXPWM4_PWM4_OUT_TRIG1   XBAR2_IN35        OR
PIT_TRIGGER0              XBAR2_IN36        -
PIT_TRIGGER1              XBAR2_IN37        -
ADC_ETC0_COCO0            XBAR2_IN38        -
ADC_ETC0_COCO1            XBAR2_IN39        -
ADC_ETC0_COCO2            XBAR2_IN40        -
ADC_ETC0_COCO3            XBAR2_IN41        -
ADC_ETC1_COCO0            XBAR2_IN42        -
ADC_ETC1_COCO1            XBAR2_IN43        -
ADC_ETC1_COCO2            XBAR2_IN44        -
ADC_ETC1_COCO3            XBAR2_IN45        -
ENC1_POS_MATCH            XBAR2_IN46        -
ENC2_POS_MATCH            XBAR2_IN47        -
ENC3_POS_MATCH            XBAR2_IN48        -
ENC4_POS_MATCH            XBAR2_IN49        -
DMA_DONE0                 XBAR2_IN50        -
DMA_DONE1                 XBAR2_IN51        -
DMA_DONE2                 XBAR2_IN52        -
DMA_DONE3                 XBAR2_IN53        -
DMA_DONE4                 XBAR2_IN54        -
DMA_DONE5                 XBAR2_IN55        -
DMA_DONE6                 XBAR2_IN56        -
DMA_DONE7                 XBAR2_IN57        -

// XBAR 3 INPUT ASSIGNMENTS
LOGIC LOW                 XBAR3_IN00        -
LOGIC HIGH                XBAR3_IN01        -
Reserved                  XBAR3_IN02        -
Reserved                  XBAR3_IN03        -
Reserved                  XBAR3_IN04        -
Reserved                  XBAR3_IN05        -
ACMP1_OUT                 XBAR3_IN06        -
ACMP2_OUT                 XBAR3_IN07        -
ACMP3_OUT                 XBAR3_IN08        -
ACMP4_OUT                 XBAR3_IN09        -
Reserved                  XBAR3_IN10        -
Reserved                  XBAR3_IN11        -
QTIMER3_TIMER0            XBAR3_IN12        -
QTIMER3_TIMER1            XBAR3_IN13        -
QTIMER3_TIMER2            XBAR3_IN14        -
QTIMER3_TIMER3            XBAR3_IN15        -
QTIMER4_TIMER0            XBAR3_IN16        -
QTIMER4_TIMER1            XBAR3_IN17        -
QTIMER4_TIMER2            XBAR3_IN18        -
QTIMER4_TIMER3            XBAR3_IN19        -
FLEXPWM1_PWM1_OUT_TRIG0   XBAR2_IN20        OR
FLEXPWM1_PWM1_OUT_TRIG1   XBAR2_IN20        OR
FLEXPWM1_PWM2_OUT_TRIG0   XBAR2_IN21        OR
FLEXPWM1_PWM2_OUT_TRIG1   XBAR2_IN21        OR
FLEXPWM1_PWM3_OUT_TRIG0   XBAR2_IN22        OR
FLEXPWM1_PWM3_OUT_TRIG1   XBAR2_IN22        OR
FLEXPWM1_PWM4_OUT_TRIG0   XBAR2_IN23        OR
FLEXPWM1_PWM4_OUT_TRIG1   XBAR2_IN23        OR
FLEXPWM2_PWM1_OUT_TRIG0   XBAR2_IN24        OR
FLEXPWM2_PWM1_OUT_TRIG1   XBAR2_IN24        OR
FLEXPWM2_PWM2_OUT_TRIG0   XBAR2_IN25        OR
FLEXPWM2_PWM2_OUT_TRIG1   XBAR2_IN25        OR
FLEXPWM2_PWM3_OUT_TRIG0   XBAR2_IN26        OR
FLEXPWM2_PWM3_OUT_TRIG1   XBAR2_IN26        OR
FLEXPWM2_PWM4_OUT_TRIG0   XBAR2_IN27        OR
FLEXPWM2_PWM4_OUT_TRIG1   XBAR2_IN27        OR
FLEXPWM3_PWM1_OUT_TRIG0   XBAR2_IN28        OR
FLEXPWM3_PWM1_OUT_TRIG1   XBAR2_IN28        OR
FLEXPWM3_PWM2_OUT_TRIG0   XBAR2_IN29        OR
FLEXPWM3_PWM2_OUT_TRIG1   XBAR2_IN29        OR
FLEXPWM3_PWM3_OUT_TRIG0   XBAR2_IN30        OR
FLEXPWM3_PWM3_OUT_TRIG1   XBAR2_IN30        OR
FLEXPWM3_PWM4_OUT_TRIG0   XBAR2_IN31        OR
FLEXPWM3_PWM4_OUT_TRIG1   XBAR2_IN31        OR
FLEXPWM4_PWM1_OUT_TRIG0   XBAR2_IN32        OR
FLEXPWM4_PWM1_OUT_TRIG1   XBAR2_IN32        OR
FLEXPWM4_PWM2_OUT_TRIG0   XBAR2_IN33        OR
FLEXPWM4_PWM2_OUT_TRIG1   XBAR2_IN33        OR
FLEXPWM4_PWM3_OUT_TRIG0   XBAR2_IN34        OR
FLEXPWM4_PWM3_OUT_TRIG1   XBAR2_IN34        OR
FLEXPWM4_PWM4_OUT_TRIG0   XBAR2_IN35        OR
FLEXPWM4_PWM4_OUT_TRIG1   XBAR2_IN35        OR
PIT_TRIGGER0              XBAR3_IN36        -
PIT_TRIGGER1              XBAR3_IN37        -
ADC_ETC0_COCO0            XBAR3_IN38        -
ADC_ETC0_COCO1            XBAR3_IN39        -
ADC_ETC0_COCO2            XBAR3_IN40        -
ADC_ETC0_COCO3            XBAR3_IN41        -
ADC_ETC1_COCO0            XBAR3_IN42        -
ADC_ETC1_COCO1            XBAR3_IN43        -
ADC_ETC1_COCO2            XBAR3_IN44        -
ADC_ETC1_COCO3            XBAR3_IN45        -
ENC1_POS_MATCH            XBAR3_IN46        -
ENC2_POS_MATCH            XBAR3_IN47        -
ENC3_POS_MATCH            XBAR3_IN48        -
ENC4_POS_MATCH            XBAR3_IN49        -
DMA_DONE0                 XBAR3_IN50        -
DMA_DONE1                 XBAR3_IN51        -
DMA_DONE2                 XBAR3_IN52        -
DMA_DONE3                 XBAR3_IN53        -
DMA_DONE4                 XBAR3_IN54        -
DMA_DONE5                 XBAR3_IN55        -
DMA_DONE6                 XBAR3_IN56        -
DMA_DONE7                 XBAR3_IN57        -


// XBAR 1 OUTPUT ASSIGNMENTS
XBAR1 Output    |   Assigned Output   |   Gate    |
XBAR1_OUT00       DMA_CH_MUX_REQ30          -
XBAR1_OUT01       DMA_CH_MUX_REQ31          -
XBAR1_OUT02       DMA_CH_MUX_REQ94          -
XBAR1_OUT03       DMA_CH_MUX_REQ95          -
XBAR1_OUT04       IOMUX_XBAR_INOUT04        -
XBAR1_OUT05       IOMUX_XBAR_INOUT05        -
XBAR1_OUT06       IOMUX_XBAR_INOUT06        -
XBAR1_OUT07       IOMUX_XBAR_INOUT07        -
XBAR1_OUT08       IOMUX_XBAR_INOUT08        -
XBAR1_OUT09       IOMUX_XBAR_INOUT09        -
XBAR1_OUT10       IOMUX_XBAR_INOUT10        -
XBAR1_OUT11       IOMUX_XBAR_INOUT11        -
XBAR1_OUT12       IOMUX_XBAR_INOUT12        -
XBAR1_OUT13       IOMUX_XBAR_INOUT13        -
XBAR1_OUT14       IOMUX_XBAR_INOUT14        -
XBAR1_OUT15       IOMUX_XBAR_INOUT15        -
XBAR1_OUT16       IOMUX_XBAR_INOUT16        -
XBAR1_OUT17       IOMUX_XBAR_INOUT17        -
XBAR1_OUT18       IOMUX_XBAR_INOUT18        -
XBAR1_OUT19       IOMUX_XBAR_INOUT19        -
XBAR1_OUT20       ACMP1_SAMPLE              -
XBAR1_OUT21       ACMP2_SAMPLE              -
XBAR1_OUT22       ACMP3_SAMPLE              -
XBAR1_OUT23       ACMP4_SAMPLE              -
XBAR1_OUT24       Reserved                  -
XBAR1_OUT25       Reserved                  -
XBAR1_OUT26       FLEXPWM1_PWM0_EXTA        -
XBAR1_OUT27       FLEXPWM1_PWM1_EXTA        -
XBAR1_OUT28       FLEXPWM1_PWM2_EXTA        -
XBAR1_OUT29       FLEXPWM1_PWM3_EXTA        -
XBAR1_OUT30       FLEXPWM1_PWM0_EXT_SYNC    -
XBAR1_OUT31       FLEXPWM1_PWM1_EXT_SYNC    -
XBAR1_OUT32       FLEXPWM1_PWM2_EXT_SYNC    -
XBAR1_OUT33       FLEXPWM1_PWM3_EXT_SYNC    -
XBAR1_OUT34       FLEXPWM1_EXT_CLK          -
XBAR1_OUT35       FLEXPWM1_FAULT0           -
XBAR1_OUT36       FLEXPWM1_FAULT1           -
XBAR1_OUT37       FLEXPWM1_FAULT2           -
                  FLEXPWM2_FAULT2           -
                  FLEXPWM3_FAULT2           -
                  FLEXPWM4_FAULT2           -
XBAR1_OUT38       FLEXPWM1_FAULT3           -
                  FLEXPWM2_FAULT3           -
                  FLEXPWM3_FAULT3           -
                  FLEXPWM4_FAULT3           -
XBAR1_OUT39       FLEXPWM1_EXT_FORCE        -
XBAR1_OUT40       FLEXPWM2_PWM0_EXTA        -
                  FLEXPWM3_PWM0_EXTA        -
                  FLEXPWM4_PWM0_EXTA        -
XBAR1_OUT41       FLEXPWM2_PWM1_EXTA        -
                  FLEXPWM3_PWM1_EXTA        -
                  FLEXPWM4_PWM1_EXTA        -
XBAR1_OUT42       FLEXPWM2_PWM2_EXTA        -
                  FLEXPWM3_PWM2_EXTA        -
                  FLEXPWM4_PWM2_EXTA        -
XBAR1_OUT43       FLEXPWM2_PWM3_EXTA        -
                  FLEXPWM3_PWM3_EXTA        -
                  FLEXPWM4_PWM3_EXTA        -
XBAR1_OUT44       FLEXPWM2_PWM0_EXT_SYNC    -
XBAR1_OUT45       FLEXPWM2_PWM1_EXT_SYNC    -
XBAR1_OUT46       FLEXPWM2_PWM2_EXT_SYNC    -
XBAR1_OUT47       FLEXPWM2_PWM3_EXT_SYNC    -
XBAR1_OUT48       FLEXPWM2_EXT_CLK          -
                  FLEXPWM3_EXT_CLK          -
                  FLEXPWM4_EXT_CLK          -
XBAR1_OUT49       FLEXPWM2_FAULT0           -
XBAR1_OUT50       FLEXPWM2_FAULT1           -
XBAR1_OUT51       FLEXPWM2_EXT_FORCE        -
XBAR1_OUT52       FLEXPWM3_EXT_SYNC0        -
XBAR1_OUT53       FLEXPWM3_EXT_SYNC1        -
XBAR1_OUT54       FLEXPWM3_EXT_SYNC2        -
XBAR1_OUT55       FLEXPWM3_EXT_SYNC3        -
XBAR1_OUT56       FLEXPWM3_FAULT0           -
XBAR1_OUT57       FLEXPWM3_FAULT1           -
XBAR1_OUT58       FLEXPWM3_EXT_FORCE        -
XBAR1_OUT59       FLEXPWM4_EXT_SYNC0        -
XBAR1_OUT60       FLEXPWM4_EXT_SYNC1        -
XBAR1_OUT61       FLEXPWM4_EXT_SYNC2        -


XBAR1_OUT62       FLEXPWM4_EXT_SYNC3        -
XBAR1_OUT63       FLEXPWM4_FAULT0           -
XBAR1_OUT64       FLEXPWM4_FAULT1           -
XBAR1_OUT65       FLEXPWM4_EXT_FORCE        -
XBAR1_OUT66       ENC1_PHASEA_INPUT         -
XBAR1_OUT67       ENC1_PHASEB_INPUT         -
XBAR1_OUT68       ENC1_INDEX                -
XBAR1_OUT69       ENC1_HOME                 -
XBAR1_OUT70       ENC1_TRIGGER              -
XBAR1_OUT71       ENC2_PHASEA_INPUT         -
XBAR1_OUT72       ENC2_PHASEB_INPUT         -
XBAR1_OUT73       ENC2_INDEX                -
XBAR1_OUT74       ENC2_HOME                 -
XBAR1_OUT75       ENC2_TRIGGER              -
XBAR1_OUT76       ENC3_PHASEA_INPUT         -
XBAR1_OUT77       ENC3_PHASEB_INPUT         -
XBAR1_OUT78       ENC3_INDEX                -
XBAR1_OUT79       ENC3_HOME                 -
XBAR1_OUT80       ENC3_TRIGGER              -
XBAR1_OUT81       ENC4_PHASEA_INPUT         -
XBAR1_OUT82       ENC4_PHASEB_INPUT         -
XBAR1_OUT83       ENC4_INDEX                -
XBAR1_OUT84       ENC4_HOME                 -
XBAR1_OUT85       ENC4_TRIGGER              -
XBAR1_OUT86       QTIMER1_TIMER0            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER1_TRM0_INPUT_SEL] XBAR1_OUT87 QTIMER1_TIMER1
Selectable by settingIOMUXC_GPR_GPR6[QTIMER1_TRM1_INPUT_SEL] XBAR1_OUT88
QTIMER1_TIMER2            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER1_TRM2_INPUT_SEL] XBAR1_OUT89 QTIMER1_TIMER3
Selectable by settingIOMUXC_GPR_GPR6[QTIMER1_TRM3_INPUT_SEL] XBAR1_OUT90
QTIMER2_TIMER0            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER2_TRM0_INPUT_SEL] XBAR1_OUT91 QTIMER2_TIMER1
Selectable by settingIOMUXC_GPR_GPR6[QTIMER2_TRM1_INPUT_SEL] XBAR1_OUT92
QTIMER2_TIMER2            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER2_TRM2_INPUT_SEL] XBAR1_OUT93 QTIMER2_TIMER3
Selectable by settingIOMUXC_GPR_GPR6[QTIMER2_TRM3_INPUT_SEL] XBAR1_OUT94
QTIMER3_TIMER0            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER3_TRM0_INPUT_SEL] XBAR1_OUT95 QTIMER3_TIMER1
Selectable by settingIOMUXC_GPR_GPR6[QTIMER3_TRM1_INPUT_SEL] XBAR1_OUT96
QTIMER3_TIMER2            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER3_TRM2_INPUT_SEL] XBAR1_OUT97 QTIMER3_TIMER3
Selectable by settingIOMUXC_GPR_GPR6[QTIMER3_TRM3_INPUT_SEL] XBAR1_OUT98
QTIMER4_TIMER0            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER4_TRM0_INPUT_SEL] XBAR1_OUT99 QTIMER4_TIMER1
Selectable by settingIOMUXC_GPR_GPR6[QTIMER4_TRM1_INPUT_SEL] XBAR1_OUT100
QTIMER4_TIMER2            Selectable by
settingIOMUXC_GPR_GPR6[QTIMER4_TRM2_INPUT_SEL] XBAR1_OUT101 QTIMER4_TIMER3
Selectable by settingIOMUXC_GPR_GPR6[QTIMER4_TRM3_INPUT_SEL] XBAR1_OUT102
EWM_EWM_IN                - XBAR1_OUT103      ADC_ETC_TRIG00            -
XBAR1_OUT104      ADC_ETC_TRIG01            -
XBAR1_OUT105      ADC_ETC_TRIG02            -
XBAR1_OUT106      ADC_ETC_TRIG03            -
XBAR1_OUT107      ADC_ETC_TRIG10            -
XBAR1_OUT108      ADC_ETC_TRIG11            -
XBAR1_OUT109      ADC_ETC_TRIG12            -
XBAR1_OUT110      ADC_ETC_TRIG13            -
XBAR1_OUT111      LPI2C1_TRG_INPUT          -

XBAR1_OUT112      LPI2C2_TRG_INPUT          -
XBAR1_OUT113      LPI2C3_TRG_INPUT          -
XBAR1_OUT114      LPI2C4_TRG_INPUT          -
XBAR1_OUT115      LPSPI1_TRG_INPUT          -
XBAR1_OUT116      LPSPI2_TRG_INPUT          -
XBAR1_OUT117      LPSPI3_TRG_INPUT          -
XBAR1_OUT118      LPSPI4_TRG_INPUT          -
XBAR1_OUT119      LPUART1_TRG_INPUT         -
XBAR1_OUT120      LPUART2_TRG_INPUT         -
XBAR1_OUT121      LPUART3_TRG_INPUT         -
XBAR1_OUT122      LPUART4_TRG_INPUT         -
XBAR1_OUT123      LPUART5_TRG_INPUT         -
XBAR1_OUT124      LPUART6_TRG_INPUT         -
XBAR1_OUT125      LPUART7_TRG_INPUT         -
XBAR1_OUT126      LPUART8_TRG_INPUT         -
XBAR1_OUT127      FLEXIO1_TRIGGER_IN0       -
XBAR1_OUT128      FLEXIO1_TRIGGER_IN1       -
XBAR1_OUT129      FLEXIO2_TRIGGER_IN0       -
XBAR1_OUT130      FLEXIO2_TRIGGER_IN1       -
XBAR1_OUT131      Reserved                  -

// XBAR 2 OUTPUT ASSIGNMENTS
XBAR2_OUT00       AOI1_IN00                 -
XBAR2_OUT01       AOI1_IN01                 -
XBAR2_OUT02       AOI1_IN02                 -
XBAR2_OUT03       AOI1_IN03                 -
XBAR2_OUT04       AOI1_IN04                 -
XBAR2_OUT05       AOI1_IN05                 -
XBAR2_OUT06       AOI1_IN06                 -
XBAR2_OUT07       AOI1_IN07                 -
XBAR2_OUT08       AOI1_IN08                 -
XBAR2_OUT09       AOI1_IN09                 -
XBAR2_OUT10       AOI1_IN10                 -
XBAR2_OUT11       AOI1_IN11                 -
XBAR2_OUT12       AOI1_IN12                 -
XBAR2_OUT13       AOI1_IN13                 -
XBAR2_OUT14       AOI1_IN14                 -
XBAR2_OUT15       AOI1_IN15                 -


// XBAR 3 OUTPUT ASSIGNMENTS
XBAR3_OUT00       AOI2_IN00                 -
XBAR3_OUT01       AOI2_IN01                 -
XBAR3_OUT02       AOI2_IN02                 -
XBAR3_OUT03       AOI2_IN03                 -
XBAR3_OUT04       AOI2_IN04                 -
XBAR3_OUT05       AOI2_IN05                 -
XBAR3_OUT06       AOI2_IN06                 -
XBAR3_OUT07       AOI2_IN07                 -
XBAR3_OUT08       AOI2_IN08                 -
XBAR3_OUT09       AOI2_IN09                 -
XBAR3_OUT10       AOI2_IN10                 -
XBAR3_OUT11       AOI2_IN11                 -
XBAR3_OUT12       AOI2_IN12                 -
XBAR3_OUT13       AOI2_IN13                 -
XBAR3_OUT14       AOI2_IN14                 -
XBAR3_OUT15       AOI2_IN15                 -


// 5.0 DIRECT MEMORY ACCESS MULTIPLEXER (DMAMUX)
// 5.1 CHIP-SPECIFIC DMAMUX INFORMATION
// ONLY 32-BIT WRITE IS SUPPOERTED FOR THE DMA_CHA_MUX REGISTERS
/*
*/