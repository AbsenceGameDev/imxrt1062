#ifndef SYSTEM_MEMORY_MAP_H
#define SYSTEM_MEMORY_MAP_H

#include "registers.h"

#include <stdint.h>

#define HAB_API_VTABLE 0x00200300 // HAB API vector table addresses

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV12_E 0xFFFFFFFF // 511MB
#define SYSMEM_RESRV12_S 0xE0100000

// CM7 PPB
#define SYSMEM_CM7_PPB_E 0xE00FFFFF // 1MB
#define SYSMEM_CM7_PPB_S 0xE0000000

// SEMC SEMC ext. memories in shared mem. space (SDRAM NOR PSRAM NAN 8080)
#define SYSMEM_SEMC_SHARED_E 0xDFFFFFFF // 1.5GB
#define SYSMEM_SEMC_SHARED_S 0x80000000

// FLEX_SPI ADDRESSES (RECEPTION)
#define SYSMEM_FLEXSPI_RX_FIFO_E 0x7FFFFFFF // 4BM
#define SYSMEM_FLEXSPI_RX_FIFO_S 0x7FC00000
// TRANSMISSION
#define SYSMEM_FLEXSPI_TX_FIFO_E 0x7FBFFFFF // 4BM
#define SYSMEM_FLEXSPI_TX_FIFO_S 0x7F800000

// FLEX_SPI2 ADDRESSES (RECEPTION)
#define SYSMEM_FLEXSPI2_RX_FIFO_E 0x7F7FFFFF // 4BM
#define SYSMEM_FLEXSPI2_RX_FIFO_S 0x7F400000
// TRANSMISSION
#define SYSMEM_FLEXSPI2_TX_FIFO_E 0x7F3FFFFF // 4BM
#define SYSMEM_FLEXSPI2_TX_FIFO_S 0x7F000000

// FLEX_SPI2/ FLEXSPI2 CIPHERTEXT
#define SYSMEM_FLEXSPI2_CIPH_E 0x7EFFFFFF // 240MB
#define SYSMEM_FLEXSPI2_CIPH_S 0x70000000

// FLEX_SPI/ FLEXSPI CIPHERTEXT
#define SYSMEM_FLEXSPI_CIPH_E 0x6FFFFFFF // 256MB
#define SYSMEM_FLEXSPI_CIPH_S 0x60000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV11_E 0x5FFFFFFF // 384MB
#define SYSMEM_RESRV11_S 0x48000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV10_E 0x47FFFFFF // 64MB
#define SYSMEM_RESRV10_S 0x44000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV09_E 0x43FFFFFF // 31MB
#define SYSMEM_RESRV09_S 0x42100000

// AIPS-5
#define SYSMEM_AIPS5_E 0x420FFFFF // 1MB
#define SYSMEM_AIPS5_S 0x42000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV08_E 0x41FFFFFF // 8MB %%%%%%%%%
#define SYSMEM_RESRV08_S 0x41800000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV02_E 0x417FFFFF // 1MB
#define SYSMEM_GPV_RESRV02_S 0x41700000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV01_E 0x416FFFFF // 1MB
#define SYSMEM_GPV_RESRV01_S 0x41600000

// GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_GPV_RESRV00_E 0x415FFFFF // 1MB
#define SYSMEM_GPV_RESRV00_S 0x41500000

// *CPU* CONFIG PORT
#define SYSMEM_CPU_CONF_PORT_E 0x414FFFFF // 1MB
#define SYSMEM_CPU_CONF_PORT_S 0x41400000

// "EMS" GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_EMS_RESRV_E 0x413FFFFF // 1MB
#define SYSMEM_EMS_RESRV_S 0x41300000

// "PER" GPV : RESERVED ADDRESS-SPACE
#define SYSMEM_PER_RESRV_E 0x412FFFFF // 1MB
#define SYSMEM_PER_RESRV_S 0x41200000

// "M" CONFIG POST
#define SYSMEM_M_CONF_PORT_E 0x411FFFFF // 1MB
#define SYSMEM_M_CONF_PORT_S 0x41100000

// "MAIN" CONFIG PORT
#define SYSMEM_MAIN_CONF_PORT_E 0x410FFFFF // 1MB
#define SYSMEM_MAIN_CONF_PORT_S 0x40800000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV07_E 0x40FFFFFF // 12MB
#define SYSMEM_RESRV07_S 0x40400000

// AIPS-4
#define SYSMEM_AIPS4_E 0x403FFFFF // 1MB
#define SYSMEM_AIPS4_S 0x40300000

// AIPS-3
#define SYSMEM_AIPS3_E 0x402FFFFF // 1MB
#define SYSMEM_AIPS3_S 0x40200000

// AIPS-2
#define SYSMEM_AIPS2_E 0x401FFFFF // 1MB
#define SYSMEM_AIPS2_S 0x40100000

// AIPS-1
#define SYSMEM_AIPS1_E 0x400FFFFF // 1MB
#define SYSMEM_AIPS1_S 0x40000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV06_E 0x3FFFFFFF // 256MB
#define SYSMEM_RESRV06_S 0x30000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV05_E 0x2FFFFFFF // 252MB
#define SYSMEM_RESRV05_S 0x20400000

// OCRAM RESERVED ADDRESS-SPACE
#define SYSMEM_OCRAM_RESRV_E 0x203FFFFF // 512KB
#define SYSMEM_OCRAM_RESRV_S 0x20300000

// OCRAM FLEXRAM
#define SYSMEM_OCRAM_FLEX_E 0x202FFFFF // 512KB
#define SYSMEM_OCRAM_FLEX_S 0x20280000

// OCRAM2
#define SYSMEM_OCRAM2_E 0x2027FFFF // 512KB
#define SYSMEM_OCRAM2_S 0x20200000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV04_E 0x201FFFFF // 1MB
#define SYSMEM_RESRV04_S 0x20100000

// DTCM RESERVED ADDRESS-SPACE
#define SYSMEM_DTCM_RESRV04_E 0x200FFFFF // 512KB
#define SYSMEM_DTCM_RESRV04_S 0x20080000

// DTCM
#define SYSMEM_DTCM_E 0x2007FFFF // 512KB
#define SYSMEM_DTCM_S 0x20000000

// RESERVED ADDRESS-SPACE %%%%%%%%%%
#define SYSMEM_RESRV03_E 0x1FFFFFFF // 256MB
#define SYSMEM_RESRV03_S 0x10000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV02_E 0x0FFFFFFF // 128MB
#define SYSMEM_RESRV02_S 0x08000000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV01_E 0x07FFFFFF // 124MB
#define SYSMEM_RESRV01_S 0x00400000

// RESERVED ADDRESS-SPACE
#define SYSMEM_RESRV00_E 0x003FFFFF // 1536KB
#define SYSMEM_RESRV00_S 0x00280000

// ROMCP RESERVED ADDRESS-SPACE
#define SYSMEM_ROMCP_RESRV_E 0x0027FFFF // 384KB
#define SYSMEM_ROMCP_RESRV_S 0x00220000

// ROMCP
#define SYSMEM_ROMCP_E 0x0021FFFF // 128KB
#define SYSMEM_ROMCP_S 0x00200000

// ITCM RESERVED ADDRESS-SPACE
#define SYSMEM_ITCM_RESRV_00_E 0x001FFFFF // 1MB
#define SYSMEM_ITCM_RESRV_00_S 0x00100000

// ITCM RESERVED ADDRESS-SPACE
#define SYSMEM_ITCM_RESRV_00_E 0x000FFFFF // 512KB
#define SYSMEM_ITCM_RESRV_00_S 0x00080000

// ITCM
#define SYSMEM_ITCM_E 0x0007FFFF // 512KB
#define SYSMEM_ITCM_S 0x00000000

#define // //
//
//
/** @AIPSONE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// CCM(CCM)
#define AIPS1_NIC_CCM_E 0x400FFFFF // 16KB
#define AIPS1_NIC_CCM_S 0x400FC000

// SRC(SRC)
#define AIPS1_NIC_SRC_E 0x500FBFFF // 16KB
#define AIPS1_NIC_SRC_S 0x400F8000

// GPC
#define AIPS1_NIC_GPC_E 0x400F7FFF // 16KB
#define AIPS1_NIC_GPC_S 0x400F4000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_07_E 0x400F3FFF // 16KB
#define AIPS1_NIC_RESRV_07_S 0x400F0000

// DMA CH MUX
#define AIPS1_NIC_DMA_CH_MUX_E 0x400EFFFF // 16KB
#define AIPS1_NIC_DMA_CH_MUX_S 0x400EC000

// EDMA
#define AIPS1_NIC_EDMA_E 0x400EBFFF // 16KB
#define AIPS1_NIC_EDMA_S 0x400E8000

// SJC
#define AIPS1_NIC_SJC_E 0x400E7FFF // 16KB
#define AIPS1_NIC_SJC_S 0x400E4000

// TSC DIG
#define AIPS1_NIC_TSC_DIG_E 0x400E3FFF // 16KB
#define AIPS1_NIC_TSC_DIG_S 0x400E0000

// CSU
#define AIPS1_NIC_CSU_E 0x400DFFFF // 16KB
#define AIPS1_NIC_CSU_S 0x400DC000

// ANALOG
#define AIPS1_NIC_ANALOG_E 0x400DBFFF // 16KB
#define AIPS1_NIC_ANALOG_S 0x400D8000

// SNVS HP
#define AIPS1_NIC_SNVS_HP_E 0x400D7FFF // 16KB
#define AIPS1_NIC_SNVS_HP_S 0x400D4000

// WDOG 2
#define AIPS1_NIC_WDOG2_E 0x400D3FFF // 16KB
#define AIPS1_NIC_WDOG2_S 0x400D0000

// TRNG
#define AIPS1_NIC_TRNG_E 0x400CFFFF // 16KB
#define AIPS1_NIC_TRNG_S 0x400CC000

// ADC2
#define AIPS1_NIC_ADC2_E 0x400CBFFF // 16KB
#define AIPS1_NIC_ADC2_S 0x400C8000

// ADC1
#define AIPS1_NIC_ADC1_E 0x400C7FFF // 16KB
#define AIPS1_NIC_ADC1_S 0x400C4000

// GPIO5
#define AIPS1_NIC_GPIO5_E 0x400C3FFF // 16KB
#define AIPS1_NIC_GPIO5_S 0x400C0000

// WDOG3
#define AIPS1_NIC_WDOG3_E 0x400BFFFF // 16KB
#define AIPS1_NIC_WDOG3_S 0x400BC000

// WDOG1
#define AIPS1_NIC_WDOG1_E 0x400BBFFF // 16KB
#define AIPS1_NIC_WDOG1_S 0x400B8000

// EWM
#define AIPS1_NIC_EWM_E 0x400B7FFF // 16KB
#define AIPS1_NIC_EWM_S 0x400B4000

// CM7 MXRT (FLEXRAM)
#define AIPS1_NIC_CM7MXRT_FLEXRAM_E 0x400B3FFF // 16KB
#define AIPS1_NIC_CM7MXRT_FLEXRAM_S 0x400B0000

// IO MUXC - GPR
#define AIPS1_NIC_IOMUXC_GPR_E 0x400AFFFF // 16KB
#define AIPS1_NIC_IOMUXC_GPR_S 0x400AC000

// IO MUXC - SNVS
#define AIPS1_NIC_IOMUXC_SNVS_E 0x400ABFFF // 16KB
#define AIPS1_NIC_IOMUXC_SNVS_S 0x400A8000

// IO MUXC - SNVS GPR
#define AIPS1_NIC_IOMUXC_SNVS_GPR_E 0x400A7FFF // 16KB
#define AIPS1_NIC_IOMUXC_SNVS_GPR_S 0x400A4000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_06_E 0x400A3FFF // 16KB
#define AIPS1_NIC_RESRV_06_S 0x400A0000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV_05_E 0x4009FFFF // 16KB
#define AIPS1_NIC_RESRV_05_S 0x4009C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV04_E 0x4009BFFF // 16KB
#define AIPS1_NIC_RESRV04_S 0x40098000

// ACMP
#define AIPS1_NIC_ACMP_E 0x40097FFF // 16KB
#define AIPS1_NIC_ACMP_S 0x40094000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV04_E 0x40093FFF // 16KB
#define AIPS1_NIC_RESRV04_S 0x40090000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV03_E 0x4008FFFF // 16KB
#define AIPS1_NIC_RESRV03_S 0x4008C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV02_E 0x4008BFFF // 16KB
#define AIPS1_NIC_RESRV02_S 0x40088000

// PIT
#define AIPS1_NIC_PIT_E 0x40087FFF // 16KB
#define AIPS1_NIC_PIT_S 0x40084000

// DCDC
#define AIPS1_NIC_DCDC_E 0x40083FFF // 16KB
#define AIPS1_NIC_DCDC_S 0x40080000

// AIPS 1 CONFIG
#define AIPS1_NIC_CONF_E 0x4007FFFF // 16KB
#define AIPS1_NIC_CONF_S 0x4007C000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV01_E 0x4007FFFF // 240KB
#define AIPS1_NIC_RESRV01_S 0x40040000

// RESERVED ADDRESS-SPACE
#define AIPS1_NIC_RESRV00_E 0x4003FFFF // 256KB
#define AIPS1_NIC_RESRV00_S 0x40000000
//
//
/** @AIPSTWO: DETAILED MEMORY MAP (AIPS-2-NIC-PORTS) */
// CCM(CCM)
#define AIPS2_NIC_KPP_E 0x401FFFFF // 16KB
#define AIPS2_NIC_KPP_S 0x401FC000

// SRC(SRC)
#define AIPS2_NIC_IO_MUXXC_E 0x401FBFFF // 16KB
#define AIPS2_NIC_IO_MUXXC_S 0x401F8000

// GPC
#define AIPS2_NIC_OCOTP_E 0x401F7FFF // 16KB
#define AIPS2_NIC_OCOTP_S 0x401F4000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_GPT2_E 0x401F3FFF // 16KB
#define AIPS2_NIC_GPT2_S 0x401F0000

// DMA CH MUX
#define AIPS2_NIC_GPT1_E 0x401EFFFF // 16KB
#define AIPS2_NIC_GPT1_S 0x401EC000

// EDMA
#define AIPS2_NIC_QTIMER4_E 0x401EBFFF // 16KB
#define AIPS2_NIC_QTIMER4_S 0x401E8000

// SJC
#define AIPS2_NIC_QTIMER3_E 0x401E7FFF // 16KB
#define AIPS2_NIC_QTIMER3_S 0x401E4000

// TSC DIG
#define AIPS2_NIC_QTIMER2_E 0x401E3FFF // 16KB
#define AIPS2_NIC_QTIMER2_S 0x401E0000

// CSU
#define AIPS2_NIC_QTIMER1_E 0x401DFFFF // 16KB
#define AIPS2_NIC_QTIMER1_S 0x401DC000

// ANALOG
#define AIPS2_NIC_FLEXCAN3_E 0x401DBFFF // 16KB
#define AIPS2_NIC_FLEXCAN3_S 0x401D8000

// SNVS HP
#define AIPS2_NIC_FLEXCAN2_E 0x401D7FFF // 16KB
#define AIPS2_NIC_FLEXCAN2_S 0x401D4000

// WDOG 2
#define AIPS2_NIC_FLEXCAN1_E 0x401D3FFF // 16KB
#define AIPS2_NIC_FLEXCAN1_S 0x401D0000

// TRNG
#define AIPS2_NIC_RESRV06_E 0x401CFFFF // 16KB
#define AIPS2_NIC_RESRV06_S 0x401CC000

// ADC2
#define AIPS2_NIC_RESRV05_E 0x401CBFFF // 16KB
#define AIPS2_NIC_RESRV05_S 0x401C8000

// ADC1
#define AIPS2_NIC_GPIO4_E 0x401C7FFF // 16KB
#define AIPS2_NIC_GPIO4_S 0x401C4000

// GPIO5
#define AIPS2_NIC_GPIO3_E 0x401C3FFF // 16KB
#define AIPS2_NIC_GPIO3_S 0x401C0000

// WDOG3
#define AIPS2_NIC_GPIO2_E 0x401BFFFF // 16KB
#define AIPS2_NIC_GPIO2_S 0x401BC000

// WDOG1
#define AIPS2_NIC_GPIO1_E 0x401BBFFF // 16KB
#define AIPS2_NIC_GPIO1_S 0x401B8000

// EWM
#define AIPS2_NIC_RESRV04_E 0x401B7FFF // 16KB
#define AIPS2_NIC_RESRV04_S 0x401B4000

// CM7 MXRT (FLEXRAM)
#define AIPS2_NIC_FLEX_IO2_E 0x401B3FFF // 16KB
#define AIPS2_NIC_FLEX_IO2_S 0x401B0000

// IO MUXC - GPR
#define AIPS2_NIC_FLEX_IO1_E 0x401AFFFF // 16KB
#define AIPS2_NIC_FLEX_IO1_S 0x401AC000

// IO MUXC - SNVS
#define AIPS2_NIC_RESRV03_E 0x401ABFFF // 16KB
#define AIPS2_NIC_RESRV03_S 0x401A8000

// IO MUXC - SNVS GPR
#define AIPS2_NIC_RESRV02_E 0x401A7FFF // 16KB
#define AIPS2_NIC_RESRV02_S 0x401A4000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART8_E 0x401A3FFF // 16KB
#define AIPS2_NIC_LP_UART8_S 0x401A0000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART7_E 0x4019FFFF // 16KB
#define AIPS2_NIC_LP_UART7_S 0x4019C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART6_E 0x4019BFFF // 16KB
#define AIPS2_NIC_LP_UART6_S 0x40198000

// ACMP
#define AIPS2_NIC_LP_UAR5_E 0x40197FFF // 16KB
#define AIPS2_NIC_LP_UAR5_S 0x40194000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART4_E 0x40193FFF // 16KB
#define AIPS2_NIC_LP_UART4_S 0x40190000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART3_E 0x4018FFFF // 16KB
#define AIPS2_NIC_LP_UART3_S 0x4018C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_LP_UART2_E 0x4018BFFF // 16KB
#define AIPS2_NIC_LP_UART2_S 0x40188000

// PIT
#define AIPS2_NIC_LP_UART1_E 0x40187FFF // 16KB
#define AIPS2_NIC_LP_UART1_S 0x40184000

// DCDC
#define AIPS2_NIC_ROMCP_E 0x40183FFF // 16KB
#define AIPS2_NIC_ROMCP_S 0x40180000

// AIPS 2 CONFIG
#define AIPS2_NIC_CONF_E 0x4017FFFF // 16KB
#define AIPS2_NIC_CONF_S 0x4017C000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_RESRV01_E 0x4017FFFF // 240KB
#define AIPS2_NIC_RESRV01_S 0x40140000

// RESERVED ADDRESS-SPACE
#define AIPS2_NIC_RESRV00_E 0x4013FFFF // 256KB
#define AIPS2_NIC_RESRV00_S 0x40100000
//
//
/** @AIPSTHREE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// CCM(CCM)
#define AIPS3_NIC_DCP_E 0x402FFFFF // 16KB
#define AIPS3_NIC_DCP_S 0x402FC000

// SRC(SRC)
#define AIPS3_NIC_RESRV21_E 0x402FBFFF // 16KB
#define AIPS3_NIC_RESRV21_S 0x402F8000

// GPC
#define AIPS3_NIC_RESRV20_E 0x402F7FFF // 16KB
#define AIPS3_NIC_RESRV20_S 0x402F4000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_SEMC_E 0x402F3FFF // 16KB
#define AIPS3_NIC_SEMC_S 0x402F0000

// DMA CH MUX
#define AIPS3_NIC_RESRV19_E 0x402EFFFF // 16KB
#define AIPS3_NIC_RESRV19_S 0x402EC000

// EDMA
#define AIPS3_NIC_RESRV18_E 0x402EBFFF // 16KB
#define AIPS3_NIC_RESRV18_S 0x402E8000

// SJC
#define AIPS3_NIC_RESRV17_E 0x402E7FFF // 16KB
#define AIPS3_NIC_RESRV17_S 0x402E4000

// TSC DIG
#define AIPS3_NIC_USB_E 0x402E3FFF // 16KB
#define AIPS3_NIC_USB_S 0x402E0000

// CSU
#define AIPS3_NIC_RESRV16_E 0x402DFFFF // 16KB
#define AIPS3_NIC_RESRV16_S 0x402DC000

// ANALOG
#define AIPS3_NIC_ENET_E 0x402DBFFF // 16KB
#define AIPS3_NIC_ENET_S 0x402D8000

// SNVS HP
#define AIPS3_NIC_ENET2_E 0x402D7FFF // 16KB
#define AIPS3_NIC_ENET2_S 0x402D4000

// WDOG 2
#define AIPS3_NIC_RESRV15_E 0x402D3FFF // 16KB
#define AIPS3_NIC_RESRV15_S 0x402D0000

// TRNG
#define AIPS3_NIC_RESRV14_E 0x402CFFFF // 16KB
#define AIPS3_NIC_RESRV14_S 0x402CC000

// ADC2
#define AIPS3_NIC_RESRV13_E 0x402CBFFF // 16KB
#define AIPS3_NIC_RESRV13_S 0x402C8000

// ADC1
#define AIPS3_NIC_US_DHC2_E 0x402C7FFF // 16KB
#define AIPS3_NIC_US_DHC2_S 0x402C4000

// GPIO5
#define AIPS3_NIC_US_DHC1_E 0x402C3FFF // 16KB
#define AIPS3_NIC_US_DHC1_S 0x402C0000

// WDOG3
#define AIPS3_NIC_CSI_E 0x402BFFFF // 16KB
#define AIPS3_NIC_CSI_S 0x402BC000

// WDOG1
#define AIPS3_NIC_LCDIF_E 0x402BBFFF // 16KB
#define AIPS3_NIC_LCDIF_S 0x402B8000

// EWM
#define AIPS3_NIC_PXP_E 0x402B7FFF // 16KB
#define AIPS3_NIC_PXP_S 0x402B4000

// CM7 MXRT (FLEXRAM)
#define AIPS3_NIC_RESRV12_E 0x402B3FFF // 16KB
#define AIPS3_NIC_RESRV12_S 0x402B0000

// IO MUXC - GPR
#define AIPS3_NIC_RESRV11_E 0x402AFFFF // 16KB
#define AIPS3_NIC_RESRV11_S 0x402AC000

// IO MUXC - SNVS
#define AIPS3_NIC_FLEX_SPI_E 0x402ABFFF // 16KB
#define AIPS3_NIC_FLEX_SPI_S 0x402A8000

// IO MUXC - SNVS GPR
#define AIPS3_NIC_FLEX_SPI2_E 0x402A7FFF // 16KB
#define AIPS3_NIC_FLEX_SPI2_S 0x402A4000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV10_E 0x402A3FFF // 16KB
#define AIPS3_NIC_RESRV10_S 0x402A0000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV09_E 0x4029FFFF // 16KB
#define AIPS3_NIC_RESRV09_S 0x4029C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV08_E 0x4029BFFF // 16KB
#define AIPS3_NIC_RESRV08_S 0x40298000

// ACMP
#define AIPS3_NIC_RESRV07_E 0x40297FFF // 16KB
#define AIPS3_NIC_RESRV07_S 0x40294000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV06_E 0x40293FFF // 16KB
#define AIPS3_NIC_RESRV06_S 0x40290000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV05_E 0x4028FFFF // 16KB
#define AIPS3_NIC_RESRV05_S 0x4028C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV04_E 0x4028BFFF // 16KB
#define AIPS3_NIC_RESRV04_S 0x40288000

// PIT
#define AIPS3_NIC_RESRV03_E 0x40287FFF // 16KB
#define AIPS3_NIC_RESRV03_S 0x40284000

// DCDC
#define AIPS3_NIC_RESRV02_E 0x40283FFF // 16KB
#define AIPS3_NIC_RESRV02_S 0x40280000

// AIPS 1 CONFIG
#define AIPS3_NIC_CONF_E 0x4027FFFF // 16KB
#define AIPS3_NIC_CONF_S 0x4027C000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV01_E 0x4027FFFF // 240KB
#define AIPS3_NIC_RESRV01_S 0x40240000

// RESERVED ADDRESS-SPACE
#define AIPS3_NIC_RESRV00_E 0x4023FFFF // 256KB
#define AIPS3_NIC_RESRV00_S 0x40200000
//
//
/** @AIPSFOUR: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// LPI2C4
#define AIPS4_NIC_LPI2C4_E 0x403FFFFF // 16KB
#define AIPS4_NIC_LPI2C4_S 0x403FC000

// LPI2C3
#define AIPS4_NIC_LPI2C3_E 0x403FBFFF // 16KB
#define AIPS4_NIC_LPI2C3_S 0x403F8000

// LPI2C2
#define AIPS4_NIC_LPI2C2_E 0x403F7FFF // 16KB
#define AIPS4_NIC_LPI2C2_S 0x403F4000

// LPI2C1
#define AIPS4_NIC_LPI2C1_E 0x403F3FFF // 16KB
#define AIPS4_NIC_LPI2C1_S 0x403F0000

// BEE
#define AIPS4_NIC_BEE_E 0x403EFFFF // 16KB
#define AIPS4_NIC_BEE_S 0x403EC000

// FLEX XPWM 4
#define AIPS4_NIC_FLEX_XPWM4_E 0x403EBFFF // 16KB
#define AIPS4_NIC_FLEX_XPWM4_S 0x403E8000

// FLEX XPWM 3
#define AIPS4_NIC_FLEX_XPWM3_E 0x403E7FFF // 16KB
#define AIPS4_NIC_FLEX_XPWM3_S 0x403E4000

// FLEX XPWM 2
#define AIPS4_NIC_FLEC_XPWM2_E 0x403E3FFF // 16KB
#define AIPS4_NIC_FLEC_XPWM2_S 0x403E0000

// FLEX XPWM 1
#define AIPS4_NIC_FLEX_XPWM1_E 0x403DFFFF // 16KB
#define AIPS4_NIC_FLEX_XPWM1_S 0x403DC000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV06_E 0x403DBFFF // 16KB
#define AIPS4_NIC_RESRV06_S 0x403D8000

// ENC 4
#define AIPS4_NIC_ENC4_E 0x403D7FFF // 16KB
#define AIPS4_NIC_ENC4_S 0x403D4000

// ENC 3
#define AIPS4_NIC_ENC3_E 0x403D3FFF // 16KB
#define AIPS4_NIC_ENC3_S 0x403D0000

// ENC 2
#define AIPS4_NIC_ENC2_E 0x403CFFFF // 16KB
#define AIPS4_NIC_ENC2_S 0x403CC000

// ENC 1
#define AIPS4_NIC_ENC1_E 0x403CBFFF // 16KB
#define AIPS4_NIC_ENC1_S 0x403C8000

// XBAR 3
#define AIPS4_NIC_XBAR3_E 0x403C7FFF // 16KB
#define AIPS4_NIC_XBAR3_S 0x403C4000

// XBAR 2
#define AIPS4_NIC_XBAR2_E 0x403C3FFF // 16KB
#define AIPS4_NIC_XBAR2_S 0x403C0000

// XBAR 1
#define AIPS4_NIC_XBAR1_E 0x403BFFFF // 16KB
#define AIPS4_NIC_XBAR1_S 0x403BC000

// AOI 2
#define AIPS4_NIC_AOI2_E 0x403BBFFF // 16KB
#define AIPS4_NIC_AOI2_S 0x403B8000

// AOI 1
#define AIPS4_NIC_AOI1_E 0x403B7FFF // 16KB
#define AIPS4_NIC_AOI1_S 0x403B4000

// ADC ETC
#define AIPS4_NIC_ADC_ETC_E 0x403B3FFF // 16KB
#define AIPS4_NIC_ADC_ETC_S 0x403B0000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV05_E 0x403AFFFF // 16KB
#define AIPS4_NIC_RESRV05_S 0x403AC000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV04_E 0x403ABFFF // 16KB
#define AIPS4_NIC_RESRV04_S 0x403A8000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV03_E 0x403A7FFF // 16KB
#define AIPS4_NIC_RESRV03_S 0x403A4000

// LP SPI 4
#define AIPS4_NIC_LPSPI4_01_E 0x403A3FFF // 16KB
#define AIPS4_NIC_LPSPI4_01_S 0x403A0000

// LP SPI 3
#define AIPS4_NIC_LPSPI3_02_E 0x4039FFFF // 16KB
#define AIPS4_NIC_LPSPI3_02_S 0x4039C000

// LP SPI 2
#define AIPS4_NIC_LPSPI2_E 0x4039BFFF // 16KB
#define AIPS4_NIC_LPSPI2_S 0x40398000

// LP SPI 1
#define AIPS4_NIC_LPSPI1_E 0x40397FFF // 16KB
#define AIPS4_NIC_LPSPI1_S 0x40394000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV02_E 0x40393FFF // 16KB
#define AIPS4_NIC_RESRV02_S 0x40390000

// SAI 3
#define AIPS4_NIC_SAI3_E 0x4038FFFF // 16KB
#define AIPS4_NIC_SAI3_S 0x4038C000

// SAI 2
#define AIPS4_NIC_SAI2_E 0x4038BFFF // 16KB
#define AIPS4_NIC_SAI2_S 0x40388000

// SAI 1
#define AIPS4_NIC_SAI1_E 0x40387FFF // 16KB
#define AIPS4_NIC_SAI1_S 0x40384000

// SPDIF
#define AIPS4_NIC_SPDIF_E 0x40383FFF // 16KB
#define AIPS4_NIC_SPDIF_S 0x40380000

// AIPS 4 CONFIG
#define AIPS4_NIC_CONF_E 0x4037FFFF // 16KB
#define AIPS4_NIC_CONF_S 0x4037C000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV01_E 0x4037FFFF // 240KB
#define AIPS4_NIC_RESRV01_S 0x40340000

// RESERVED ADDRESS-SPACE
#define AIPS4_NIC_RESRV00_E 0x4033FFFF // 256KB
#define AIPS4_NIC_RESRV00_S 0x40300000
//
//
/** @AIPSONE: DETAILED MEMORY MAP (AIPS-1-NIC-PORTS) */
// Reserved off platform slots
#define AIPS5_NIC_CCM_E 0x420FFFFF // 512KB
#define AIPS5_NIC_CCM_S 0x42080000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV26_E 0x4207FFFF // 16KB
#define AIPS5_NIC_RESRV26_S 0x4207C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV25_E 0x4207BFFF // 16KB
#define AIPS5_NIC_RESRV25_S 0x42078000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV24_E 0x42077FFF // 16KB
#define AIPS5_NIC_RESRV24_S 0x42074000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV23_E 0x42073FFF // 16KB
#define AIPS5_NIC_RESRV23_S 0x42070000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV22_E 0x4206FFFF // 16KB
#define AIPS5_NIC_RESRV22_S 0x4206C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV21_E 0x4206BFFF // 16KB
#define AIPS5_NIC_RESRV21_S 0x42068000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV20_E 0x42067FFF // 16KB
#define AIPS5_NIC_RESRV20_S 0x42064000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV19_E 0x42063FFF // 16KB
#define AIPS5_NIC_RESRV19_S 0x42060000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV18_E 0x4205FFFF // 16KB
#define AIPS5_NIC_RESRV18_S 0x4205C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV17_E 0x4205BFFF // 16KB
#define AIPS5_NIC_RESRV17_S 0x42058000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV16_E 0x42057FFF // 16KB
#define AIPS5_NIC_RESRV16_S 0x42054000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV15_E 0x42053FFF // 16KB
#define AIPS5_NIC_RESRV15_S 0x42050000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV14_E 0x4204FFFF // 16KB
#define AIPS5_NIC_RESRV14_S 0x4204C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV13_E 0x4204BFFF // 16KB
#define AIPS5_NIC_RESRV13_S 0x42048000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV12_E 0x42047FFF // 16KB
#define AIPS5_NIC_RESRV12_S 0x42044000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV11_E 0x42043FFF // 16KB
#define AIPS5_NIC_RESRV11_S 0x42040000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV10_E 0x4203FFFF // 16KB
#define AIPS5_NIC_RESRV10_S 0x4203C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV09_E 0x4203BFFF // 16KB
#define AIPS5_NIC_RESRV09_S 0x42038000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV08_E 0x42037FFF // 16KB
#define AIPS5_NIC_RESRV08_S 0x42034000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV07_E 0x42033FFF // 16KB
#define AIPS5_NIC_RESRV07_S 0x42030000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV06_E 0x4202FFFF // 16KB
#define AIPS5_NIC_RESRV06_S 0x4202C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV05_E 0x4202BFFF // 16KB
#define AIPS5_NIC_RESRV05_S 0x42028000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV04_E 0x42027FFF // 16KB
#define AIPS5_NIC_RESRV04_S 0x42024000

// FLEX IO 3
#define AIPS5_NIC_RESRV_01_E 0x42023FFF // 16KB
#define AIPS5_NIC_RESRV_01_S 0x42020000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV03_E 0x4201FFFF // 16KB
#define AIPS5_NIC_RESRV03_S 0x4201C000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV02_E 0x4201BFFF // 16KB
#define AIPS5_NIC_RESRV02_S 0x42018000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV01_E 0x42017FFF // 16KB
#define AIPS5_NIC_RESRV01_S 0x42014000

// RESERVED ADDRESS-SPACE
#define AIPS5_NIC_RESRV00_E 0x42013FFF // 16KB
#define AIPS5_NIC_RESRV00_S 0x42010000

// GPIO9
#define AIPS5_NIC_GPIO9_E 0x4200FFFF // 16KB
#define AIPS5_NIC_GPIO9_S 0x4200C000

// GPIO8
#define AIPS5_NIC_GPIO8_E 0x4200BFFF // 16KB
#define AIPS5_NIC_GPIO8_S 0x42008000

// GPIO7
#define AIPS5_NIC_GPIO7_E 0x42007FFF // 16KB
#define AIPS5_NIC_GPIO7_S 0x42004000

// GPIO6
#define AIPS5_NIC_GPIO6_E 0x42003FFF // 16KB
#define AIPS5_NIC_GPIO6_S 0x42000000

#define // //
//
//
/** @PPB: DETAILED MEMORY MAP  */
// PPB ROM
#define PPB_ALOC_PPBROM_E 0xE00FFFFF // 4KB
#define PPB_ALOC_PPBROM_S 0xE00FF000

// Processor ROM
#define PPB_ALOC_PROCROM_E 0xE00FEFFF // 4KB
#define PPB_ALOC_PROCROM_S 0xE00FE000

// SYS ROM
#define PPB_ALOC_SYSROM_E 0xE00FDFFF // 4KB
#define PPB_ALOC_SYSROM_S 0xE00FD000

// IO MUXC - SNVS GPR
#define PPB_ALOC_PPBRESRV_02_E 0xE00FCFFF // 52KB
#define PPB_ALOC_PPBRESRV_02_S 0xE00F0000

// RESERVED ADDRESS-SPACE
#define PPB_ALOC_PPBRESRV_01_E 0xE00EFFFF // 444KB
#define PPB_ALOC_PPBRESRV_01_S 0xE0081000

// MCM
#define PPB_ALOC_MCM_E 0xE0080FFF // 4KB
#define PPB_ALOC_MCM_S 0xE0080000

// RESERVED ADDRESS-SPACE
#define PPB_ALOC_PPBRESRV00_E 0xE007FFFF // 236KB
#define PPB_ALOC_PPBRESRV00_S 0xE0045000

// PPB RES
#define PPB_ALOC_PPBRES_E 0xE0044FFF // 4KB
#define PPB_ALOC_PPBRES_S 0xE0044000

// TSGEN
#define PPB_ALOC_TSGEN_E 0xE0043FFF // 4KB
#define PPB_ALOC_TSGEN_S 0xE0043000

// CTI
#define PPB_ALOC_CTI_E 0xE0042FFF // 4KB
#define PPB_ALOC_CTI_S 0xE0042000

// ETM
#define PPB_ALOC_ETM_E 0xE0041FFF // 4KB
#define PPB_ALOC_ETM_S 0xE0041000

// TPIU
#define PPB_ALOC_TPIU_E 0xE0040FFF // 4KB
#define PPB_ALOC_TPIU_S 0xE0040000

/**
 *  @brief:
 *  Due to the clock frequency difference between CPU andperipheral, in some
 *  corner case, peripheral interrupt flag maynot be really cleared before CPU
 *  exit ISR. In such case, usershould add DSB instruction right after
 *  instruction to clear interrupt flag.
 *
 **/
typedef enum
{
  // CHANNDEÖ TRANSFER COMPLETER
  eDMA_CHANNEL_0_16_Done = 0x0,
  eDMA_CHANNEL_1_17_Done = 0x1,
  eDMA_CHANNEL_2_18_Done = 0x2,
  eDMA_CHANNEL_3_19_Done = 0x3,
  eDMA_CHANNEL_4_20_Done = 0x4,
  eDMA_CHANNEL_5_21_Done = 0x5,
  eDMA_CHANNEL_6_22_Done = 0x6,
  eDMA_CHANNEL_7_23_Done = 0x7,
  eDMA_CHANNEL_8_24_Done = 0x8,
  eDMA_CHANNEL_9_25_Done = 0x9,
  eDMA_CHANNEL_10_26_Done = 0xa,
  eDMA_CHANNEL_11_27_Done = 0xb,
  eDMA_CHANNEL_12_28_Done = 0xc,
  eDMA_CHANNEL_13_29_Done = 0xd,
  eDMA_CHANNEL_14_30_Done = 0xe,
  eDMA_CHANNEL_15_31_Done = 0xf,
  eDMA_CHANNEL_ERR_ALL_Done = 0x10,

  //  CTI TRIGGER OUTPUTS & PLATFORM EXCEPTION
  CM7_CTI_TRIGGER_OUT0 = 0x11,
  CM7_CTI_TRIGGER_OUT1 = 0x12,
  CM7_CORE_PLAT_EXCEPTION = 0x13,

  // UART INTERRUPTS
  LPUART1_RXTX_INTERRUPT = 0x14,
  LPUART2_RXTX_INTERRUPT = 0x15,
  LPUART3_RXTX_INTERRUPT = 0x16,
  LPUART4_RXTX_INTERRUPT = 0x17,
  LPUART5_RXTX_INTERRUPT = 0x18,
  LPUART6_RXTX_INTERRUPT = 0x19,
  LPUART7_RXTX_INTERRUPT = 0x1a,
  LPUART8_RXTX_INTERRUPT = 0x1b,

  // I2C INTERRUPTS, MASTERS - SLAVES
  LPI2C_1_INTERRUPT_MASTER = 0x1c,
  LPI2C_1_INTERRUPT_MASTER_ASYNC = 0x1c,
  LPI2C_1_INTERRUPT_SLAVE = 0x1c,
  LPI2C_1_INTERRUPT_SLAVE_ASYNC = 0x1c,

  LPI2C_2_INTERRUPT_MASTER = 0x1d,
  LPI2C_2_INTERRUPT_MASTER_ASYNC = 0x1d,
  LPI2C_2_INTERRUPT_SLAVE = 0x1d,
  LPI2C_2_INTERRUPT_SLAVE_ASYNC = 0x1d,

  LPI2C_3_INTERRUPT_MASTER = 0x1e,
  LPI2C_3_INTERRUPT_MASTER_ASYNC = 0x1e,
  LPI2C_3_INTERRUPT_SLAVE = 0x1e,
  LPI2C_3_INTERRUPT_SLAVE_ASYNC = 0x1e,

  LPI2C_4_INTERRUPT_MASTER = 0x1f,
  LPI2C_4_INTERRUPT_MASTER_ASYNC = 0x1f,
  LPI2C_4_INTERRUPT_SLAVE = 0x1f,
  LPI2C_4_INTERRUPT_SLAVE_ASYNC = 0x1f,

  // LSPSPI INTERRUPT REQUEST LINE TO THE CORE
  LSPSPI1 = 0x20,
  LSPSPI2 = 0x21,
  LSPSPI3 = 0x22,
  LSPSPI4 = 0x23,

  /** FLEXCAN: Combined interrupt of ini_int_busoff, ini_int_error,ipi_int_mbor,
     ipi_int_rxwarning, ipi_int_txwarning andipi_int_wakein. */
  FLEXCAN1 = 0x24,
  FLEXCAN2 = 0x25,

  /** FLEXRAM: OUT OF BOUNDS OR ACCESS HIT */
  CM7_FLEXRAM_OOB_OR_HIT = 0x26,

  KPP_KEYPAD_INTERRUPT = 0x27,
  TSC_DIG_INTERRUPT = 0x28,
  GPR_NOTIFY_CORES_EXCPTN_COND_BOOT = 0x29,
  LCDIF_SYNC_INTERRUPT = 0x2a,
  CSI_INTERRUPT = 0x2b,
  PXP_INTERRUPT = 0x2c,

  // Watchdog Timer Reset
  WDOG2_TIMER_RESET = 0x2d,

  // SVNS_HP_WRAPPER SVNS FUNCTIONAL & SECURITY INTERRUPT
  SVNS_FUNC_INTERRUPT = 0x2e,
  SVNS_SEC_INTERRUPT = 0x2f,

  // SVNS HP/LP WRAPPER
  SVNS_LPHP_PWRBTN_LESSTHAN_5_SECONDS_PULSE = 0x30,

  /** INDICATED TO THE PROCESSOR THAT ONE OR MORE ALARM INPUTS WERE ASSERTED */
  CSU_INTERRUPT_REQ1 = 0x31,

  DCP_CH_CRC_INTERRUPT = 0x32, // EXCEPT CHANNEL 0
  IRQ_DCP_CH0 = 0x33,
  RESERVED0 = 0x34,
  TRNG_INTERRUPT = 0x35,
  RESERVED1 = 0x36,
  BEE = 0x37,
  SAI1RXTX_INTERRUPT = 0x38, // OR GATE
  SAI1RXTX_ASYNC_INTERRUPT = 0x38, // OR GATE
  SAI2RXTX_INTERRUPT = 0x39, // OR GATE
  SAI2RXTX_ASYNC_INTERRUPT = 0x39, // OR GATE
  SAI3RX_INTERRUPT = 0x3a, //
  SAI3TX_INTERRUPT = 0x3b, //
  SPDIFRXTX_INTERRUPT = 0x3c, // OR GATE
  PMU_BRWNOUT_11_25_30_REG = 0x3d, //
  RESERVED2 = 0x3e,

  TEMPMON_LOW = 0x3f, // TEMPERATURE MONITOR
  TEMPMON_HIGH = 0x3f,
  TEMPMON_PANIC = 0x40,

  USB_PHY_UTMI0_INTERRUPT = 0x41,
  USB_PHY_UTMI1_INTERRUPT = 0x42,

  ADC1_INTERRUPT = 0x43,
  ADC1_ASYNC_INTERRUPT = 0x43,
  ADC2_INTERRUPT = 0x44,
  ADC2_ASYNC_INTERRUPT = 0x44,

  DCDC = 0x45,

  RESERVED3 = 0x46,
  RESERVED4 = 0x47,

  ACTIVE_HIGH_INTERRUPT_FROM_INT0_FROM_GPIO1 = 0x48,
  ACTIVE_HIGH_INTERRUPT_FROM_INT1_FROM_GPIO1 = 0x49,
  ACTIVE_HIGH_INTERRUPT_FROM_INT2_FROM_GPIO1 = 0x4a,
  ACTIVE_HIGH_INTERRUPT_FROM_INT3_FROM_GPIO1 = 0x4b,
  ACTIVE_HIGH_INTERRUPT_FROM_INT4_FROM_GPIO1 = 0x4c,
  ACTIVE_HIGH_INTERRUPT_FROM_INT5_FROM_GPIO1 = 0x4d,
  ACTIVE_HIGH_INTERRUPT_FROM_INT6_FROM_GPIO1 = 0x4e,
  ACTIVE_HIGH_INTERRUPT_FROM_INT7_FROM_GPIO1 = 0x4f,

  GPIO1_COMBINED_INTERRUPT_INDICATE_0_15 = 0x50,
  GPIO1_COMBINED_INTERRUPT_INDICATE_16_31 = 0x51,
  GPIO2_COMBINED_INTERRUPT_INDICATE_0_15 = 0x52,
  GPIO2_COMBINED_INTERRUPT_INDICATE_16_31 = 0x53,
  GPIO3_COMBINED_INTERRUPT_INDICATE_0_15 = 0x54,
  GPIO3_COMBINED_INTERRUPT_INDICATE_16_31 = 0x55,
  GPIO4_COMBINED_INTERRUPT_INDICATE_0_15 = 0x56,
  GPIO4_COMBINED_INTERRUPT_INDICATE_16_31 = 0x57,
  GPIO5_COMBINED_INTERRUPT_INDICATE_0_15 = 0x58,
  GPIO5_COMBINED_INTERRUPT_INDICATE_16_31 = 0x59,

  // FLEXIO INTERRUPTS
  FLEXIO1_INTERRUPT = 0x5a,
  FLEXIO1_INTERRUPT_ASYNC = 0x5a,
  FLEXIO2_INTERRUPT = 0x5b,
  FLEXIO2_INTERRUPT_ASYNC = 0x5b,

  // WATCHDOG TIMER RESETS
  WDOG1_RESET = 0x5c,
  RTWDOG_RESET = 0x5d,
  RTWDOG_RESET_ASYNC = 0x5d,
  EWM = 0x5e,
  CCM_INTERRUPT_REQ1 = 0x5f,
  CCM_INTERRUPT_REQ2 = 0x60,
  GPC_INTERRUPT_REQ = 0x61,
  SRC_INTERRUPT_REQ = 0x62,
  RESERVED5 = 0x63,

  /* All interrupts combined. OR of GPT1/GPT2 Rollover interruptline,
  Input Capture 1 & 2 lines, Output Compare 1,2 &3Interrupt lines */
  GPT1_ALL_INTERRUPTS_COMB_OR_GPT1_ROLLOVER_INTERRUPT = 0x64,
  GPT2_ALL_INTERRUPTS_COMB_OR_GPT2_ROLLOVER_INTERRUPT = 0x65,

  FLEX_CAPTURE_PWM0_INTERRUPT = 0x66,
  FLEX_COMPARE_PWM0_INTERRUPT = 0x66,
  FLEX_RELOAD_PWM0_INTERRUPT = 0x66,

  FLEX_CAPTURE_PWM1_INTERRUPT = 0x67,
  FLEX_COMPARE_PWM1_INTERRUPT = 0x67,
  FLEX_RELOAD_PWM1_INTERRUPT = 0x67,

  FLEX_CAPTURE_PWM2_INTERRUPT = 0x68,
  FLEX_COMPARE_PWM2_INTERRUPT = 0x68,
  FLEX_RELOAD_PWM2_INTERRUPT = 0x68,

  FLEX_CAPTURE_PWM3_INTERRUPT = 0x69,
  FLEX_COMPARE_PWM3_INTERRUPT = 0x69,
  FLEX_RELOAD_PWM3_INTERRUPT = 0x69,

  FLEX_FAULT_INTERRUPT = 0x6a,
  FLEX_RELOAD_ERR_INTERRUPT = 0x6a,

  FLEX_SPI2 = 0x6b,
  FLEX_SPI = 0x6c,

  SEMC = 0x6d,
  USDHC1_INTERRUPT_REQ = 0x6e,
  USDHC2_INTERRUPT_REQ = 0x6f,

  USB_OTG_2 = 0x70,
  USB_OTG_1 = 0x71,

  ENET_MAC0_PERIODIC_TIMER_OVERFLOW = 0x72,
  ENET_MAC0_TIME_STAMP_AVAILABLE = 0x72,

  ENET_MAC0_PAYLOAD_RX_ERR = 0x72,
  ENET_MAC0_FIFO_TX_UNDERRUN = 0x72,

  ENET_MAC0_COLLISION_RETRY_LIM = 0x72,
  ENET_MAC0_LATE_COLLISION = 0x72,

  ENET_MAC0_ETHERNET_BUS_ERR = 0x72,
  ENET_MAC0_MII_DATA_TX_DONE = 0x72,

  ENET_MAC0_RX_BUFFER_DONE = 0x72,
  ENET_MAC0_RX_FRAME_DONE = 0x72,
  ENET_MAC0_TX_BUFFER_DONE = 0x72,
  ENET_MAC0_TX_FRAME_DONE = 0x72,

  ENET_MAC0_GRACEFUL_STOP = 0x72,
  ENET_MAC0_RX_BABBLING_ERR = 0x72,
  ENET_MAC0_TX_BABBLING_ERR = 0x72,
  ENET_MAC0_TX_WAKEUP_REQ_SYNC = 0x72,

  ENET_MAC0_1588_TIMER_INTERRUPT_SYNCHRONOUS = 0x73,

  XBAR1_IRQ0 = 0x74,
  XBAR1_IRQ1 = 0x74,
  XBAR1_IRQ2 = 0x75,
  XBAR1_IRQ3 = 0x75,

  ADC_ETC_IRQ0 = 0x76,
  ADC_ETC_IRQ1 = 0x77,
  ADC_ETC_IRQ2 = 0x78,
  ADC_ETC_IRQ_ERR = 0x79,

  PIT_TIMER0_INTERRUPT = 0x7a,
  PIT_TIMER1_INTERRUPT = 0x7a,
  PIT_TIMER2_INTERRUPT = 0x7a,
  PIT_TIMER3_INTERRUPT = 0x7a,

  ACMP1 = 0x7b,
  ACMP2 = 0x7c,
  ACMP3 = 0x7d,
  ACMP4 = 0x7e,

  RESERVED6 = 0x7f,
  RESERVED7 = 0x80,

  ENC1_INDEX_MARKER_INTERRUPT = 0x81,
  ENC1_HOME_MARKER_INTERRUPT = 0x81,
  ENC1_WDOG_TIMEOUT_INTERRUPT = 0x81,
  ENC1_COMPARE_INTERRUPT = 0x81,
  ENC1_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x81,

  ENC2_INDEX_MARKER_INTERRUPT = 0x82,
  ENC2_HOME_MARKER_INTERRUPT = 0x82,
  ENC2_WDOG_TIMEOUT_INTERRUPT = 0x82,
  ENC2_COMPARE_INTERRUPT = 0x82,
  ENC2_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x82,
  ENC2_INTERRUPT = 0x82,

  ENC3_INDEX_MARKER_INTERRUPT = 0x83,
  ENC3_HOME_MARKER_INTERRUPT = 0x83,
  ENC3_WDOG_TIMEOUT_INTERRUPT = 0x83,
  ENC3_COMPARE_INTERRUPT = 0x83,
  ENC3_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x83,

  ENC4_INDEX_MARKER_INTERRUPT = 0x84,
  ENC4_HOME_MARKER_INTERRUPT = 0x84,
  ENC4_WDOG_TIMEOUT_INTERRUPT = 0x84,
  ENC4_COMPARE_INTERRUPT = 0x84,
  ENC4_SIMULTANEOUS_INPUT_SWITCH_INTERRUPT = 0x84,

  // QTIMERS
  QTIMER1_IRQ_FOR_TIMER0 = 0x85,
  QTIMER1_IRQ_FOR_TIMER1 = 0x85,
  QTIMER1_IRQ_FOR_TIMER2 = 0x85,
  QTIMER1_IRQ_FOR_TIMER3 = 0x85,

  QTIMER2_IRQ_FOR_TIMER0 = 0x86,
  QTIMER2_IRQ_FOR_TIMER1 = 0x86,
  QTIMER2_IRQ_FOR_TIMER2 = 0x86,
  QTIMER2_IRQ_FOR_TIMER3 = 0x86,

  QTIMER3_IRQ_FOR_TIMER0 = 0x87,
  QTIMER3_IRQ_FOR_TIMER1 = 0x87,
  QTIMER3_IRQ_FOR_TIMER2 = 0x87,
  QTIMER3_IRQ_FOR_TIMER3 = 0x87,

  QTIMER4_IRQ_FOR_TIMER0 = 0x88,
  QTIMER4_IRQ_FOR_TIMER1 = 0x88,
  QTIMER4_IRQ_FOR_TIMER2 = 0x88,
  QTIMER4_IRQ_FOR_TIMER3 = 0x88,

  // FLEX PWM IRQs
  // FLEX PWM2
  FLEXPWM2_CAPTURE_PWM0_INTERRUPT = 0x89,
  FLEXPWM2_COMPARE_PWM0_INTERRUPT = 0x89,
  FLEXPWM2_RELOAD_PWM0_INTERRUPT = 0x89,

  FLEXPWM2_CAPTURE_PWM1_INTERRUPT = 0x8a,
  FLEXPWM2_COMPARE_PWM1_INTERRUPT = 0x8a,
  FLEXPWM2_RELOAD_PWM1_INTERRUPT = 0x8a,

  FLEXPWM2_CAPTURE_PWM2_INTERRUPT = 0x8b,
  FLEXPWM2_COMPARE_PWM2_INTERRUPT = 0x8b,
  FLEXPWM2_RELOAD_PWM2_INTERRUPT = 0x8b,

  FLEXPWM2_CAPTURE_PWM3_INTERRUPT = 0x8c,
  FLEXPWM2_COMPARE_PWM3_INTERRUPT = 0x8c,
  FLEXPWM2_RELOAD_PWM3_INTERRUPT = 0x8c,

  FLEXPWM2_FAULT_INTERRUPT = 0x8d,
  FLEXPWM2_RELOAD_ERR = 0x8d,

  // FLEX PWM3
  FLEXPWM3_CAPTURE_PWM0_INTERRUPT = 0x8e,
  FLEXPWM3_COMPARE_PWM0_INTERRUPT = 0x8e,
  FLEXPWM3_RELOAD_PWM0_INTERRUPT = 0x8e,

  FLEXPWM3_CAPTURE_PWM1_INTERRUPT = 0x8f,
  FLEXPWM3_COMPARE_PWM1_INTERRUPT = 0x8f,
  FLEXPWM3_RELOAD_PWM1_INTERRUPT = 0x8f,

  FLEXPWM3_CAPTURE_PWM2_INTERRUPT = 0x90,
  FLEXPWM3_COMPARE_PWM2_INTERRUPT = 0x90,
  FLEXPWM3_RELOAD_PWM2_INTERRUPT = 0x90,

  FLEXPWM3_CAPTURE_PWM3_INTERRUPT = 0x91,
  FLEXPWM3_COMPARE_PWM3_INTERRUPT = 0x91,
  FLEXPWM3_RELOAD_PWM3_INTERRUPT = 0x91,

  FLEXPWM3_FAULT_INTERRUPT = 0x92,
  FLEXPWM3_RELOAD_ERR = 0x92,

  // FLEX PWM4
  FLEXPWM4_CAPTURE_PWM0_INTERRUPT = 0x93,
  FLEXPWM4_COMPARE_PWM0_INTERRUPT = 0x93,
  FLEXPWM4_RELOAD_PWM0_INTERRUPT = 0x93,

  FLEXPWM4_CAPTURE_PWM1_INTERRUPT = 0x94,
  FLEXPWM4_COMPARE_PWM1_INTERRUPT = 0x94,
  FLEXPWM4_RELOAD_PWM1_INTERRUPT = 0x94,

  FLEXPWM4_CAPTURE_PWM2_INTERRUPT = 0x95,
  FLEXPWM4_COMPARE_PWM2_INTERRUPT = 0x95,
  FLEXPWM4_RELOAD_PWM2_INTERRUPT = 0x95,

  FLEXPWM4_CAPTURE_PWM3_INTERRUPT = 0x96,
  FLEXPWM4_COMPARE_PWM3_INTERRUPT = 0x96,
  FLEXPWM4_RELOAD_PWM3_INTERRUPT = 0x96,

  FLEXPWM4_FAULT_INTERRUPT = 0x97,
  FLEXPWM4_RELOAD_ERR = 0x97,

  ENET2_MAC0_PERIODIC_TIMER_OVERFLOW = 0x98,
  ENET2_MAC0_TIME_STAMP_AVAILABLE = 0x98,

  ENET2_MAC0_PAYLOAD_RX_ERR = 0x98,
  ENET2_MAC0_FIFO_TX_UNDERRUN = 0x98,

  ENET2_MAC0_COLLISION_RETRY_LIM = 0x98,
  ENET2_MAC0_LATE_COLLISION = 0x98,

  ENET2_MAC0_ETHERNET_BUS_ERR = 0x98,
  ENET2_MAC0_MII_DATA_TX_DONE = 0x98,

  ENET2_MAC0_RX_BUFFER_DONE = 0x98,
  ENET2_MAC0_RX_FRAME_DONE = 0x98,
  ENET2_MAC0_TX_BUFFER_DONE = 0x98,
  ENET2_MAC0_TX_FRAME_DONE = 0x98,

  ENET2_MAC0_GRACEFUL_STOP = 0x98,
  ENET2_MAC0_RX_BABBLING_ERR = 0x98,
  ENET2_MAC0_TX_BABBLING_ERR = 0x98,
  ENET2_MAC0_TX_WAKEUP_REQ_SYNC = 0x98,

  ENET2_MAC0_1588_TIMER_INTERRUPT_SYNCHRONOUS = 0x99,

  FLEXCAN3_BUSOFF_INTERRUPT = 0x9a,
  FLEXCAN3_CAN_LINE_ERR = 0x9a,
  FLEXCAN3_ORED_INTERRUPTS_FROM_IPI_INT_MB = 0x9a,
  FLEXCAN3_RX_WARNING = 0x9a,
  FLEXCAN3_TX_WARNING = 0x9a,
  FLEXCAN3_WAKE_UP = 0x9a,
  FLEXCAN3_MATCH_IN_PN = 0x9a,
  FLEXCAN3_TIMEOUT_IN_PN = 0x9a,
  FLEXCAN3_CORRECTABLE_ERROR = 0x9a,
  FLEXCAN3_NON_CORRECTABLE_ERR_INT_HOST = 0x9a,
  FLEXCAN3_NON_CORRECTABLE_ERR_INT_INTERNAL = 0x9a,
  FLEXCAN3_BUSOFF_DONE_INTERRUPT = 0x9a,
  FLEXCAN3_FD_ERROR_INTERRUPT = 0x9a,

  RESERVED8 = 0x9b,

  FLEXIO3 = 0x9c,
  FLEXIO3_ASYNC = 0x9c,

  GPIO6_7_8_9_ORED_INTERRUPT = 0x9d,

  RESERVED9 = 0x9e,
  RESERVED9 = 0x9f,

} CM7_IRQ; // Interrup request query

//
//
/** 4.4 DMA Mux (DMA REQUEST SINGALS FOR THE PERIPHIALS IN THE CHIP)*/

typedef enum
{
  // CH 00
  CH00_FLEXIO1_OFF = 0x0,
  CH00_FLEXIO1_ASYNC_OFF = 0x0,
  CH00_FLEXIO1_ON = 0x0,
  CH00_FLEXIO1_ASYNC_ON = 0x0,

  // CH 01
  CH01_FLEXIO2_OFF = 0x1,
  CH01_FLEXIO2_ASYNC_OFF = 0x1,
  CH01_FLEXIO2_ON = 0x1,
  CH01_FLEXIO2_ASYNC_ON = 0x1,

  // CH 02 // CH 03
  CH02_LPUART1_TX_FIFO = 0x2,
  CH02_LPUART1_TX_FIFO_ASYNC = 0x2,
  CH03_LPUART1_RX_FIFO = 0x3,
  CH03_LPUART1_RX_FIFO_ASYNC = 0x3,

  // CH 04 // CH 05
  CH04_LPUART3_TX_FIFO = 0x4,
  CH04_LPUART3_TX_FIFO_ASYNC = 0x4,
  CH05_LPUART3_RX_FIFO = 0x5,
  CH05_LPUART3_RX_FIFO_ASYNC = 0x5,

  // CH 06 // CH 07
  CH06_LPUART5_TX_FIFO = 0x6,
  CH06_LPUART5_TX_FIFO_ASYNC = 0x6,
  CH07_LPUART5_RX_FIFO = 0x7,
  CH07_LPUART5_RX_FIFO_ASYNC = 0x7,

  // CH 08 // CH 09
  CH08_LPUART7_TX_FIFO = 0x8,
  CH08_LPUART7_TX_FIFO_ASYNC = 0x8,
  CH09_LPUART7_RX_FIFO = 0x9,
  CH09_LPUART7_RX_FIFO_ASYNC = 0x9,

  // CH 10
  CH10_RESERVED = 0xa,

  // CH 11 // CH 12
  CH11_FLEXCAN3 = 0xb,
  CH12_CSI_WRITE = 0xc,

  // CH 13 // CH 14
  CH13_LPSPI1_RX_FIFO = 0xd,
  CH13_LPSPI1_RX_FIFO_ASYNC = 0xd,
  CH14_LPSPI1_TX_FIFO = 0xe,
  CH14_LPSPI1_TX_FIFO_ASYNC = 0xe,

  // CH 15 // CH 16
  CH15_LPSPI3_RX_FIFO = 0xf,
  CH15_LPSPI3_RX_FIFO_ASYNC = 0xf,
  CH16_LPSPI3_TX_FIFO = 0x10,
  CH16_LPSPI3_TX_FIFO_ASYNC = 0x10,

  // CH 17
  CH17_LPI2C1_I2C_MASTER_RX_FIFO = 0x11,
  CH17_LPI2C1_I2C_MASTER_RX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_SLAVE_RX_FIFO = 0x11,
  CH17_LPI2C1_I2C_SLAVE_RX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_MASTER_TX_FIFO = 0x11,
  CH17_LPI2C1_I2C_MASTER_TX_FIFO_ASYNC = 0x11,
  CH17_LPI2C1_I2C_SLAVE_TX_FIFO = 0x11,
  CH17_LPI2C1_I2C_SLAVE_TX_FIFO_ASYNC = 0x11,

  // CH 18
  CH18_LPI2C3_I2C_MASTER_RX_FIFO = 0x12,
  CH18_LPI2C3_I2C_MASTER_RX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_SLAVE_RX_FIFO = 0x12,
  CH18_LPI2C3_I2C_SLAVE_RX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_MASTER_TX_FIFO = 0x12,
  CH18_LPI2C3_I2C_MASTER_TX_FIFO_ASYNC = 0x12,
  CH18_LPI2C3_I2C_SLAVE_TX_FIFO = 0x12,
  CH18_LPI2C3_I2C_SLAVE_TX_FIFO_ASYNC = 0x12,

  // CH 19 // CH 20 // CH 21 // CH 22
  CH19_SAI1_RX_FIFO = 0x13,
  CH20_SAI1_TX_FIFO = 0x14,
  CH21_SAI2_RX_FIFO = 0x15,
  CH22_SAI2_TX_FIFO = 0x16,

  // CH 23 // CH 24
  CH23_ADC_ETC = 0x17,
  CH24_ADC1 = 0x18,

  CH25_ACMP1_DMA = 0x19,
  CH26_ACMP3_DMA = 0x1a,

  CH27_RESERVED = 0x1b,

  CH28_FLEXSPI_RX_FIFO = 0x1c,
  CH29_FLEXSPI_TX_FIFO = 0x1d,

  CH30_XBAR1_REQ0 = 0x1e,
  CH31_XBAR1_REQ1 = 0x1f,

  CH32_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM0 = 0x20,
  CH33_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM1 = 0x21,
  CH34_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM2 = 0x22,
  CH35_FLEXPWN1_READ_CAPTURE_REGS_SUBMOD_PWM3 = 0x23,

  CH36_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM0 = 0x24,
  CH37_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM1 = 0x25,
  CH38_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM2 = 0x26,
  CH39_FLEXPWN1_WRITE_CAPTURE_REGS_SUBMOD_PWM3 = 0x27,

  CH40_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM0 = 0x28,
  CH41_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM1 = 0x29,
  CH42_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM2 = 0x2a,
  CH43_FLEXPWN3_READ_CAPTURE_REGS_SUBMOD_PWM3 = 0x2b,

  CH44_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM0 = 0x2c,
  CH45_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM1 = 0x2d,
  CH46_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM2 = 0x2e,
  CH47_FLEXPWN3_WRITE_CAPTURE_REGS_SUBMOD_PWM3 = 0x2f,

  CH48_QTIMER1_READ_CAPTURE_IN_TIMER0 = 0x30,
  CH49_QTIMER1_READ_CAPTURE_IN_TIMER1 = 0x31,
  CH50_QTIMER1_READ_CAPTURE_IN_TIMER2 = 0x32,
  CH51_QTIMER1_READ_CAPTURE_IN_TIMER3 = 0x33,

  CH52_QTIMER1_WRITE_CMPLD1_INTIMER0 = 0x34,
  CH52_QTIMER1_WRITE_CMPLD2_INTIMER1 = 0x34,

  CH53_QTIMER1_WRITE_CMPLD1_INTIMER1 = 0x35,
  CH53_QTIMER1_WRITE_CMPLD2_INTIMER0 = 0x35,

  CH54_QTIMER1_WRITE_CMPLD1_INTIMER2 = 0x36,
  CH54_QTIMER1_WRITE_CMPLD2_INTIMER3 = 0x36,

  CH55_QTIMER1_WRITE_CMPLD1_INTIMER3 = 0x37,
  CH55_QTIMER1_WRITE_CMPLD2_INTIMER2 = 0x37,

  CH56_QTIMER3_WRITE_CAPT_INTIMER0 = 0x38,
  CH56_QTIMER3_WRITE_CMPLD1_INTIMER0 = 0x38,
  CH56_QTIMER3_WRITE_CMPLD2_INTIMER1 = 0x38,

  CH57_QTIMER3_WRITE_CAPT_INTIMER1 = 0x39,
  CH57_QTIMER3_WRITE_CMPLD1_INTIMER1 = 0x39,
  CH57_QTIMER3_WRITE_CMPLD2_INTIMER0 = 0x39,

  CH58_QTIMER3_WRITE_CAPT_INTIMER2 = 0x3a,
  CH58_QTIMER3_WRITE_CMPLD1_INTIMER2 = 0x3a,
  CH58_QTIMER3_WRITE_CMPLD2_INTIMER3 = 0x3a,

  CH59_QTIMER3_WRITE_CAPT_INTIMER3 = 0x3b,
  CH59_QTIMER3_WRITE_CMPLD1_INTIMER3 = 0x3b,
  CH59_QTIMER3_WRITE_CMPLD2_INTIMER2 = 0x3b,

  CH60_FLEXSPI2_RX_FIFO = 0x3c,
  CH61_FLEXSPI2_TX_FIFO = 0x3d,
  CH62_RESERVED = 0x3e,
  CH63_RESERVED = 0x3f,

  CH64_FLEXIO1_REQ_2 = 0x40,
  CH64_FLEXIO1_ASYNC_REQ_2 = 0x40,
  CH64_FLEXIO1_REQ_3 = 0x40,
  CH64_FLEXIO1_ASYNC_REQ_3 = 0x40,

  CH65_FLEXIO1_REQ_2 = 0x41,
  CH65_FLEXIO1_ASYNC_REQ_2 = 0x41,
  CH65_FLEXIO1_REQ_3 = 0x41,
  CH65_FLEXIO1_ASYNC_REQ_3 = 0x41,

  CH66_LPUART2_TX_FIFO = 0x42,
  CH66_LPUART2_ASYNC_TX_FIFO = 0x42,

  CH67_LPUART2_RX_FIFO = 0x43,
  CH67_LPUART2_RX_FIFO_Async = 0x43,

  CH68_LPUART4_TX_FIFO = 0x44,
  CH68_LPUART4_TX_FIFO_Async = 0x44,
  CH69_LPUART4_RX_FIFO = 0x45,
  CH69_LPUART4_RX_FIFO_Async = 0x45,

  CH70_LPUART6_TX_FIFO = 0x46,
  CH70_LPUART6_TX_FIFO_Async = 0x46,
  CH71_LPUART6_RX_FIFO = 0x47,
  CH71_LPUART6_RX_FIFO_Async = 0x47,

  CH72_LPUART8_TX_FIFO_ = 0x48,
  CH72_LPUART8_TX_FIFO_Async = 0x48,
  CH73_LPUART8_RX_FIFO = 0x49,
  CH73_LPUART8_RX_FIFO_Async = 0x49,

  CH74_Reserved = 0x4a,

  CH75_PXP_DMA_Event = 0x4b,
  CH76_LCDIF_DMA_Event = 0x4c,

  CH77_LPSPI2_RX_FIFO = 0x4d,
  CH77_LPSPI2_RX_FIFO_Async = 0x4d,
  CH78_LPSPI2_TX_FIFO = 0x4e,
  CH78_LPSPI2_TX_FIFO_Async = 0x4e,

  CH79_LPSPI4_RX_FIFO = 0x4f,
  CH79_LPSPI4_RX_FIFO_Async = 0x4f,
  CH80_LPSPI4_TX_FIFO = 0x50,
  CH80_LPSPI4_TX_FIFO_Async = 0x50,

  CH81_LPI2C2_Master_RX_FIFO_DMA = 0x51,
  CH81_LPI2C2_Master_RX_FIFO_Async = 0x51,
  CH81_LPI2C2_Slave_RX_FIFO = 0x51,
  CH81_LPI2C2_Slave_RX_FIFO_Async = 0x51,
  CH81_LPI2C2_Master_TX_FIFO = 0x51,
  CH81_LPI2C2_Master_TX_FIFO_Async = 0x51,
  CH81_LPI2C2_Master_TX_FIFO = 0x51,
  CH81_LPI2C2_Master_TX_FIFO_Async = 0x51,
  CH82_LPI2C4_Master_RX_FIFO = 0x52,
  CH82_LPI2C4_Master_RX_FIFO_Asyn = 0x52,
  CH82_LPI2C4_Slave_RX_FIFO = 0x52,
  CH82_LPI2C4_Slave_RX_FIFO_Async = 0x52,
  CH82_LPI2C4_Master_TX_FIFO = 0x52,
  CH82_LPI2C4_Master_TX_FIFO_Async = 0x52,
  CH82_LPI2C4_Master_TX_FIFO = 0x52,
  CH82_LPI2C4_Master_TX_FIFO_Async = 0x52,

  CH83_SAI3_RX_FIFO = 0x53,
  CH84_SAI3_TX_FIFO = 0x54,

  CH85_SPDIF_RX = 0x55,
  CH86_SPDIF_TX = 0x56,

  CH87_Reserved = 0x57,
  CH88_ADC2 = 0x58,
  CH89_ACMP2 = 0x59,
  CH90_ACMP4 = 0x5a,

  CH91_Reserved = 0x5b,
  CH92_ENET_TIMER_REQ0 = 0x5c,
  CH93_ENET_TIMER_REQ1 = 0x5d,

  CH94_XBAR1_2 = 0x5e,
  CH95_XBAR1_3 = 0x5f,

  CH96_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM0 = 0x60,
  CH97_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM1 = 0x61,
  CH98_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM2 = 0x62,
  CH99_FLEXPWM2_READ_REQ_CAPTURE_REGS_SUBMOD_PWM3 = 0x63,

  CH100_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM0 = 0x64,
  CH101_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM1 = 0x65,
  CH102_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM2 = 0x66,
  CH103_FLEXPWM2_WRITE_REQ_VAL_REGS_SUBMOD_PWM3 = 0x67,

  CH104_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM0 = 0x68,
  CH105_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM1 = 0x69,
  CH106_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM2 = 0x6a,
  CH107_FLEXPWM4_READ_REQ_CAPTURE_REGS_SUBMOD_PWM3 = 0x6b,

  CH108_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM0 = 0x6c,
  CH109_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM1 = 0x6d,
  CH110_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM2 = 0x6e,
  CH111_FLEXPWM4_WRITE_REQ_VAL_REGS_SUBMOD_PWM3 = 0x6f,

  CH112_QTIMER2_READ_REQUEST_CAPT_timer0 = 0x70,
  CH113_QTIMER2_READ_REQUEST_CAPT_timer1 = 0x71,
  CH114_QTIMER2_READ_REQUEST_CAPT_timer2 = 0x72,
  CH115_QTIMER2_READ_REQUEST_CAPT_timer3 = 0x73,

  CH116_QTIMER2_WRITE_REQ_cmpld1_intimer0 = 0x74,
  CH116_QTIMER2_WRITE_REQ_cmpld2_intimer1 = 0x74,
  CH117_QTIMER2_WRITE_REQ_cmpld1_intimer1 = 0x75,
  CH117_QTIMER2_WRITE_REQ_cmpld2_intimer0 = 0x75,

  CH118_QTIMER2_WRITE_REQ_cmpld1_intimer2 = 0x76,
  CH118_QTIMER2_WRITE_REQ_cmpld2_intimer3 = 0x76,
  CH119_QTIMER2_WRITE_REQ_cmpld1_intimer3 = 0x77,
  CH119_QTIMER2_WRITE_REQ_cmpld2_intimer2 = 0x77,

  CH120_QTIMER4_WRITE_REQ_capt_intimer0 = 0x78,
  CH120_QTIMER4_WRITE_REQ_cmpld1_intimer0 = 0x78,
  CH120_QTIMER4_WRITE_REQ_cmpld2_intimer1 = 0x78,

  CH121_QTIMER4_WRITE_REQ_capt_intimer1 = 0x79,
  CH121_QTIMER4_WRITE_REQ_cmpld1_intimer1 = 0x79,
  CH121_QTIMER4_WRITE_REQ_cmpld2_intimer0 = 0x79,

  CH122_QTIMER4_WRITE_REQ_capt_intimer2 = 0x7a,
  CH122_QTIMER4_WRITE_REQ_cmpld1_intimer2 = 0x7a,
  CH122_QTIMER4_WRITE_REQ_cmpld2_intimer3 = 0x7a,

  CH123_QTIMER4_WRITE_REQ_capt_intimer3 = 0x7b,
  CH123_QTIMER4_WRITE_REQ_cmpld1_intimer3 = 0x7b,
  CH123_QTIMER4_WRITE_REQ_cmpld2_intimer2 = 0x7b,

  CH124_ENET2_TIMER_REQ0 = 0x7c,
  CH125_ENET2_TIMER_REQ1 = 0x7d,
  CH126_RESERVED = 0x7e,
  CH127_RESERVED = 0x7f,

} DMA_REQUESTS_MUX_CHANNELS; // DirectMemoryAccessMultiplexer;

/**
 *  @brief: Modes of Operation for MDA channels
 *
 *  DISOABLED MODE -
 *  In this mode, the DMA channel is disabled. Because disabling and enabling of
 *  DMAchannels is done primarily via the DMA configuration registers, this
 *  mode is usedmainly as the reset state for a DMA channel in the DMA channel
 *  MUX. It may alsobe used to temporarily suspend a DMA channel while
 *  reconfiguration of the systemtakes place, for example, changing the period
 *  of a DMA trigger.
 *
 *  NORMAL MODE -
 *  In this mode, a DMA source is routed directly to the specified DMA channel.
 *  Theoperation of the DMAMUX in this mode is completely transparent to the
 *  system.
 *
 *  PERIODIC TRIGGER MODE -
 *  In this mode, a DMA source may only request a DMA transfer, such as when
 *  atransmit buffer becomes empty or a receive buffer becomes full,
 *  periodically.Configuration of the period is done in the registers of the
 *  periodic interrupt timer(PIT). This mode is available only for channels 0
 *  to 3.
 *
 **/
typedef enum DMA_CH_MODE
{
  DISABLED,
  NORMAL,
  PERIODIC_TRIGGER
};

// DMA_CH_MUX Register Memory Map p.85, chapter 5.6
#define CH_MUX_BASE MAP_32BIT_REGISTER(0x400ec000)
#define CHCFG0_CHCFG31 CH_MUX_BASE._0x000
#define CHCFG0 CH_MUX_BASE._0x000
#define CHCFG1 CH_MUX_BASE._0x004
#define CHCFG2 CH_MUX_BASE._0x008
#define CHCFG3 CH_MUX_BASE._0x00c
#define CHCFG4 CH_MUX_BASE._0x010
#define CHCFG5 CH_MUX_BASE._0x014
#define CHCFG6 CH_MUX_BASE._0x018
#define CHCFG7 CH_MUX_BASE._0x01c

#define CHCFG8 CH_MUX_BASE._0x020
#define CHCFG9 CH_MUX_BASE._0x024
#define CHCFG10 CH_MUX_BASE._0x028
#define CHCFG11 CH_MUX_BASE._0x02c
#define CHCFG12 CH_MUX_BASE._0x030
#define CHCFG13 CH_MUX_BASE._0x034
#define CHCFG14 CH_MUX_BASE._0x038
#define CHCFG15 CH_MUX_BASE._0x03c

#define CHCFG16 CH_MUX_BASE._0x040
#define CHCFG17 CH_MUX_BASE._0x044
#define CHCFG18 CH_MUX_BASE._0x048
#define CHCFG19 CH_MUX_BASE._0x04c
#define CHCFG20 CH_MUX_BASE._0x050
#define CHCFG21 CH_MUX_BASE._0x054
#define CHCFG22 CH_MUX_BASE._0x058
#define CHCFG23 CH_MUX_BASE._0x05c

#define CHCFG24 CH_MUX_BASE._0x060
#define CHCFG25 CH_MUX_BASE._0x064
#define CHCFG26 CH_MUX_BASE._0x068
#define CHCFG27 CH_MUX_BASE._0x06c
#define CHCFG28 CH_MUX_BASE._0x070
#define CHCFG29 CH_MUX_BASE._0x074
#define CHCFG30 CH_MUX_BASE._0x078
#define CHCFG31 CH_MUX_BASE._0x07c

/**
 * @brief: eDMA Memory Map/Register (Enhanced Direct Memory Access) p.89 ,
 * chapter 6 The eDMA's programming model is partitioned into two regions: • The
 * first region defines a number of registers providing control functions • The
 * second region corresponds to the local transfer control descriptor (TCD)
 * memory
 *
 * TCD memory:
 * Each channel requires a 32-byte transfer control descriptor for defining the
 * desired data movement operation. The channel descriptors are stored in the
 * local memory insequential order: channel 0, channel 1, ... channel 31. Each
 * TCDn definition is presentedas 11 registers of 16 or 32 bit
 */
// DMA Memory map/register  p.115 - P. 173, chapter 6.6  // ACCESS, DESCRIPTION
#define DMA_32BASE MAP_32BIT_REGISTER(0x400e8000)
#define DMA_8BASE0 MAP_8BIT_REGISTER(0x400e8000)
#define DMA_CR DMA_32BASE._0x0000 // R/W, Control Register
#define DMA_ESR DMA_32BASE._0x0004 // READ ONLY, Err. Status Register
#define DMA_ERQR DMA_32BASE._0x000c // R/W, Enable Request Register

#define DMA_EEI DMA_32BASE._0x0014 // WORZ, Enable Err. Interrupt Register
#define DMA_CEEI DMA_8BASE0._0x018 // WORZ, Clear Enable Err. Interrupt Register
#define DMA_SEEI DMA_8BASE0._0x019 // WORZ, Set Enable Err. Interrupt Register
#define DMA_CERQR DMA_8BASE0._0x01a // WORZ, Clear Enable Request Register
#define DMA_SERQR DMA_8BASE0._0x01b // WORZ, Set Enable Request Register

#define DMA_CDNE DMA_32BASE._0x001c // WORZ, Clear DONE Status Bit Register
#define DMA_SSBR DMA_8BASE0._0x01d // WORZ, Set Start Bit Register /// FIX
#define DMA_CERR DMA_8BASE0._0x01e // WORZ, Clear Error Register
#define DMA_CINT DMA_8BASE0._0x01f // WORZ, Clear Interrupt Request Register

#define DMA_INT DMA_32BASE._0x0024 // W1C, Interrupt Request Register
#define DMA_ERR DMA_32BASE._0x002c // W1C, Error Register
#define DMA_HRSR DMA_32BASE._0x0034 // READ ONLY, Hardware Req. Stat. Register
#define DMA_EARS DMA_32BASE._0x0044 // R/W, Enable Async. Req. in Stop Register

// Channel Priority Register  -- 6.6.5.18
#define DMA_8BASE1 MAP_8BIT_REGISTER(0x400e8000 + 0x100)
#define DMA_CHPRI03 DMA_8BASE1._0x000 // R/W, Channel Priority 3 Register
#define DMA_CHPRI02 DMA_8BASE1._0x001 // R/W, Channel Priority 2 Register
#define DMA_CHPRI01 DMA_8BASE1._0x002 // R/W, Channel Priority 1 Register
#define DMA_CHPRI00 DMA_8BASE1._0x003 // R/W, Channel Priority 0 Register

#define DMA_CHPRI07 DMA_8BASE1._0x004 // R/W, Channel Priority 7 Register
#define DMA_CHPRI06 DMA_8BASE1._0x005 // R/W, Channel Priority 6 Register
#define DMA_CHPRI05 DMA_8BASE1._0x006 // R/W, Channel Priority 5 Register
#define DMA_CHPRI04 DMA_8BASE1._0x007 // R/W, Channel Priority 4 Register

#define DMA_CHPRI11 DMA_8BASE1._0x008 // R/W, Channel Priority 11 Register
#define DMA_CHPRI10 DMA_8BASE1._0x009 // R/W, Channel Priority 10 Register
#define DMA_CHPRI09 DMA_8BASE1._0x00a // R/W, Channel Priority 9 Register
#define DMA_CHPRI08 DMA_8BASE1._0x00b // R/W, Channel Priority 8 Register

#define DMA_CHPRI15 DMA_8BASE1._0x00c // R/W, Channel Priority 15 Register
#define DMA_CHPRI14 DMA_8BASE1._0x00d // R/W, Channel Priority 14 Register
#define DMA_CHPRI13 DMA_8BASE1._0x00e // R/W, Channel Priority 13 Register
#define DMA_CHPRI12 DMA_8BASE1._0x00f // R/W, Channel Priority 12 Register

#define DMA_CHPRI19 DMA_8BASE1._0x010 // R/W, Channel Priority 19 Register
#define DMA_CHPRI18 DMA_8BASE1._0x011 // R/W, Channel Priority 18 Register
#define DMA_CHPRI17 DMA_8BASE1._0x012 // R/W, Channel Priority 17 Register
#define DMA_CHPRI16 DMA_8BASE1._0x013 // R/W, Channel Priority 16 Register

#define DMA_CHPRI23 DMA_8BASE1._0x014 // R/W, Channel Priority 23 Register
#define DMA_CHPRI22 DMA_8BASE1._0x015 // R/W, Channel Priority 22 Register
#define DMA_CHPRI21 DMA_8BASE1._0x016 // R/W, Channel Priority 21 Register
#define DMA_CHPRI20 DMA_8BASE1._0x017 // R/W, Channel Priority 20 Register

#define DMA_CHPRI27 DMA_8BASE1._0x018 // R/W, Channel Priority 27 Register
#define DMA_CHPRI26 DMA_8BASE1._0x019 // R/W, Channel Priority 26 Register
#define DMA_CHPRI25 DMA_8BASE1._0x01a // R/W, Channel Priority 25 Register
#define DMA_CHPRI24 DMA_8BASE1._0x01b // R/W, Channel Priority 24 Register

#define DMA_CHPRI31 DMA_8BASE1._0x01c // R/W, Channel Priority 31 Register
#define DMA_CHPRI30 DMA_8BASE1._0x01d // R/W, Channel Priority 30 Register
#define DMA_CHPRI29 DMA_8BASE1._0x01e // R/W, Channel Priority 29 Register
#define DMA_CHPRI28 DMA_8BASE1._0x01f // R/W, Channel Priority 28 Register

// TCD Source Addresses [0,31] -- 6.6.5.19
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE00 MAP_32BIT_REGISTER(0x400e9000)
#define DMA_TCD00_SADDR DMA_TCD_32BASE00._0x0000 // R/W, TCD Source Address 00
#define DMA_TCD01_SADDR DMA_TCD_32BASE00._0x0020 // R/W, TCD Source Address 01
#define DMA_TCD02_SADDR DMA_TCD_32BASE00._0x0040 // R/W, TCD Source Address 02
#define DMA_TCD03_SADDR DMA_TCD_32BASE00._0x0060 // R/W, TCD Source Address 03

#define DMA_TCD04_SADDR DMA_TCD_32BASE00._0x0080 // R/W, TCD Source Address 04
#define DMA_TCD05_SADDR DMA_TCD_32BASE00._0x00a0 // R/W, TCD Source Address 05
#define DMA_TCD06_SADDR DMA_TCD_32BASE00._0x00c0 // R/W, TCD Source Address 06
#define DMA_TCD07_SADDR DMA_TCD_32BASE00._0x00e0 // R/W, TCD Source Address 07

#define DMA_TCD08_SADDR DMA_TCD_32BASE00._0x0100 // R/W, TCD Source Address 08
#define DMA_TCD09_SADDR DMA_TCD_32BASE00._0x0120 // R/W, TCD Source Address 09
#define DMA_TCD10_SADDR DMA_TCD_32BASE00._0x0140 // R/W, TCD Source Address 10
#define DMA_TCD11_SADDR DMA_TCD_32BASE00._0x0160 // R/W, TCD Source Address 11

#define DMA_TCD12_SADDR DMA_TCD_32BASE00._0x0180 // R/W, TCD Source Address 12
#define DMA_TCD13_SADDR DMA_TCD_32BASE00._0x01a0 // R/W, TCD Source Address 13
#define DMA_TCD14_SADDR DMA_TCD_32BASE00._0x01c0 // R/W, TCD Source Address 14
#define DMA_TCD15_SADDR DMA_TCD_32BASE00._0x01e0 // R/W, TCD Source Address 15

#define DMA_TCD16_SADDR DMA_TCD_32BASE00._0x0200 // R/W, TCD Source Address 16
#define DMA_TCD17_SADDR DMA_TCD_32BASE00._0x0220 // R/W, TCD Source Address 17
#define DMA_TCD18_SADDR DMA_TCD_32BASE00._0x0240 // R/W, TCD Source Address 18
#define DMA_TCD19_SADDR DMA_TCD_32BASE00._0x0260 // R/W, TCD Source Address 19

#define DMA_TCD20_SADDR DMA_TCD_32BASE00._0x0280 // R/W, TCD Source Address 20
#define DMA_TCD21_SADDR DMA_TCD_32BASE00._0x02a0 // R/W, TCD Source Address 21
#define DMA_TCD22_SADDR DMA_TCD_32BASE00._0x02c0 // R/W, TCD Source Address 22
#define DMA_TCD23_SADDR DMA_TCD_32BASE00._0x02e0 // R/W, TCD Source Address 23

#define DMA_TCD24_SADDR DMA_TCD_32BASE00._0x0300 // R/W, TCD Source Address 24
#define DMA_TCD25_SADDR DMA_TCD_32BASE00._0x0320 // R/W, TCD Source Address 25
#define DMA_TCD26_SADDR DMA_TCD_32BASE00._0x0340 // R/W, TCD Source Address 26
#define DMA_TCD27_SADDR DMA_TCD_32BASE00._0x0360 // R/W, TCD Source Address 27

#define DMA_TCD28_SADDR DMA_TCD_32BASE00._0x0380 // R/W, TCD Source Address 28
#define DMA_TCD29_SADDR DMA_TCD_32BASE00._0x03a0 // R/W, TCD Source Address 29
#define DMA_TCD30_SADDR DMA_TCD_32BASE00._0x03c0 // R/W, TCD Source Address 30
#define DMA_TCD31_SADDR DMA_TCD_32BASE00._0x03e0 // R/W, TCD Source Address 31
//==

// TCD Signed Source Address Offsets [0,31] -- 6.6.5.20
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE00 MAP_16BIT_REGISTER(0x400e9004)
#define DMA_TCD00_OFFS DMA_TCD_16BASE00._0x0000 // R/W, TCD Src. Addr. Offs. 00
#define DMA_TCD01_OFFS DMA_TCD_16BASE00._0x0020 // R/W, TCD Src. Addr. Offs. 01
#define DMA_TCD02_OFFS DMA_TCD_16BASE00._0x0040 // R/W, TCD Src. Addr. Offs. 02
#define DMA_TCD03_OFFS DMA_TCD_16BASE00._0x0060 // R/W, TCD Src. Addr. Offs. 03

#define DMA_TCD04_OFFS DMA_TCD_16BASE00._0x0080 // R/W, TCD Src. Addr. Offs. 04
#define DMA_TCD05_OFFS DMA_TCD_16BASE00._0x00a0 // R/W, TCD Src. Addr. Offs. 05
#define DMA_TCD06_OFFS DMA_TCD_16BASE00._0x00c0 // R/W, TCD Src. Addr. Offs. 06
#define DMA_TCD07_OFFS DMA_TCD_16BASE00._0x00e0 // R/W, TCD Src. Addr. Offs. 07

#define DMA_TCD08_OFFS DMA_TCD_16BASE00._0x0100 // R/W, TCD Src. Addr. Offs. 08
#define DMA_TCD09_OFFS DMA_TCD_16BASE00._0x0120 // R/W, TCD Src. Addr. Offs. 09
#define DMA_TCD10_OFFS DMA_TCD_16BASE00._0x0140 // R/W, TCD Src. Addr. Offs. 10
#define DMA_TCD11_OFFS DMA_TCD_16BASE00._0x0160 // R/W, TCD Src. Addr. Offs. 11

#define DMA_TCD12_OFFS DMA_TCD_16BASE00._0x0180 // R/W, TCD Src. Addr. Offs. 12
#define DMA_TCD13_OFFS DMA_TCD_16BASE00._0x01a0 // R/W, TCD Src. Addr. Offs. 13
#define DMA_TCD14_OFFS DMA_TCD_16BASE00._0x01c0 // R/W, TCD Src. Addr. Offs. 14
#define DMA_TCD15_OFFS DMA_TCD_16BASE00._0x01e0 // R/W, TCD Src. Addr. Offs. 15

#define DMA_TCD16_OFFS DMA_TCD_16BASE00._0x0200 // R/W, TCD Src. Addr. Offs. 16
#define DMA_TCD17_OFFS DMA_TCD_16BASE00._0x0220 // R/W, TCD Src. Addr. Offs. 17
#define DMA_TCD18_OFFS DMA_TCD_16BASE00._0x0240 // R/W, TCD Src. Addr. Offs. 18
#define DMA_TCD19_OFFS DMA_TCD_16BASE00._0x0260 // R/W, TCD Src. Addr. Offs. 19

#define DMA_TCD20_OFFS DMA_TCD_16BASE00._0x0280 // R/W, TCD Src. Addr. Offs. 20
#define DMA_TCD21_OFFS DMA_TCD_16BASE00._0x02a0 // R/W, TCD Src. Addr. Offs. 21
#define DMA_TCD22_OFFS DMA_TCD_16BASE00._0x02c0 // R/W, TCD Src. Addr. Offs. 22
#define DMA_TCD23_OFFS DMA_TCD_16BASE00._0x02e0 // R/W, TCD Src. Addr. Offs. 23

#define DMA_TCD24_OFFS DMA_TCD_16BASE00._0x0300 // R/W, TCD Src. Addr. Offs. 24
#define DMA_TCD25_OFFS DMA_TCD_16BASE00._0x0320 // R/W, TCD Src. Addr. Offs. 25
#define DMA_TCD26_OFFS DMA_TCD_16BASE00._0x0340 // R/W, TCD Src. Addr. Offs. 26
#define DMA_TCD27_OFFS DMA_TCD_16BASE00._0x0360 // R/W, TCD Src. Addr. Offs. 27

#define DMA_TCD28_OFFS DMA_TCD_16BASE00._0x0380 // R/W, TCD Src. Addr. Offs. 28
#define DMA_TCD29_OFFS DMA_TCD_16BASE00._0x03a0 // R/W, TCD Src. Addr. Offs. 29
#define DMA_TCD30_OFFS DMA_TCD_16BASE00._0x03c0 // R/W, TCD Src. Addr. Offs. 30
#define DMA_TCD31_OFFS DMA_TCD_16BASE00._0x03e0 // R/W, TCD Src. Addr. Offs. 31
//==

// TCD Transfer Attributes  [0,31] -- 6.6.5.21
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE01 MAP_16BIT_REGISTER(0x400e9006)
#define DMA_TCD00_ATTR DMA_TCD_16BASE01._0x0000 // R/W, TCD Trans. Attr. 00
#define DMA_TCD01_ATTR DMA_TCD_16BASE01._0x0020 // R/W, TCD Trans. Attr. 01
#define DMA_TCD02_ATTR DMA_TCD_16BASE01._0x0040 // R/W, TCD Trans. Attr. 02
#define DMA_TCD03_ATTR DMA_TCD_16BASE01._0x0060 // R/W, TCD Trans. Attr. 03

#define DMA_TCD04_ATTR DMA_TCD_16BASE01._0x0080 // R/W, TCD Trans. Attr. 04
#define DMA_TCD05_ATTR DMA_TCD_16BASE01._0x00a0 // R/W, TCD Trans. Attr. 05
#define DMA_TCD06_ATTR DMA_TCD_16BASE01._0x00c0 // R/W, TCD Trans. Attr. 06
#define DMA_TCD07_ATTR DMA_TCD_16BASE01._0x00e0 // R/W, TCD Trans. Attr. 07

#define DMA_TCD08_ATTR DMA_TCD_16BASE01._0x0100 // R/W, TCD Trans. Attr. 08
#define DMA_TCD09_ATTR DMA_TCD_16BASE01._0x0120 // R/W, TCD Trans. Attr. 09
#define DMA_TCD10_ATTR DMA_TCD_16BASE01._0x0140 // R/W, TCD Trans. Attr. 10
#define DMA_TCD11_ATTR DMA_TCD_16BASE01._0x0160 // R/W, TCD Trans. Attr. 11

#define DMA_TCD12_ATTR DMA_TCD_16BASE01._0x0180 // R/W, TCD Trans. Attr. 12
#define DMA_TCD13_ATTR DMA_TCD_16BASE01._0x01a0 // R/W, TCD Trans. Attr. 13
#define DMA_TCD14_ATTR DMA_TCD_16BASE01._0x01c0 // R/W, TCD Trans. Attr. 14
#define DMA_TCD15_ATTR DMA_TCD_16BASE01._0x01e0 // R/W, TCD Trans. Attr. 15

#define DMA_TCD16_ATTR DMA_TCD_16BASE01._0x0200 // R/W, TCD Trans. Attr. 16
#define DMA_TCD17_ATTR DMA_TCD_16BASE01._0x0220 // R/W, TCD Trans. Attr. 17
#define DMA_TCD18_ATTR DMA_TCD_16BASE01._0x0240 // R/W, TCD Trans. Attr. 18
#define DMA_TCD19_ATTR DMA_TCD_16BASE01._0x0260 // R/W, TCD Trans. Attr. 19

#define DMA_TCD20_ATTR DMA_TCD_16BASE01._0x0280 // R/W, TCD Trans. Attr. 20
#define DMA_TCD21_ATTR DMA_TCD_16BASE01._0x02a0 // R/W, TCD Trans. Attr. 21
#define DMA_TCD22_ATTR DMA_TCD_16BASE01._0x02c0 // R/W, TCD Trans. Attr. 22
#define DMA_TCD23_ATTR DMA_TCD_16BASE01._0x02e0 // R/W, TCD Trans. Attr. 23

#define DMA_TCD24_ATTR DMA_TCD_16BASE01._0x0300 // R/W, TCD Trans. Attr. 24
#define DMA_TCD25_ATTR DMA_TCD_16BASE01._0x0320 // R/W, TCD Trans. Attr. 25
#define DMA_TCD26_ATTR DMA_TCD_16BASE01._0x0340 // R/W, TCD Trans. Attr. 26
#define DMA_TCD27_ATTR DMA_TCD_16BASE01._0x0360 // R/W, TCD Trans. Attr. 27

#define DMA_TCD28_ATTR DMA_TCD_16BASE01._0x0380 // R/W, TCD Trans. Attr. 28
#define DMA_TCD29_ATTR DMA_TCD_16BASE01._0x03a0 // R/W, TCD Trans. Attr. 29
#define DMA_TCD30_ATTR DMA_TCD_16BASE01._0x03c0 // R/W, TCD Trans. Attr. 30
#define DMA_TCD31_ATTR DMA_TCD_16BASE01._0x03e0 // R/W, TCD Trans. Attr. 31

//==

{
  {
  // TCD MBC NBYTES MLNO
// TCD Minor Byte Count  [0,31] -- 6.6.5.22
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLNO DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLNO DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLNO DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLNO DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLNO DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLNO DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLNO DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLNO DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLNO DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLNO DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLNO DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLNO DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLNO DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLNO DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLNO DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLNO DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLNO DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLNO DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLNO DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLNO DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLNO DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLNO DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLNO DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLNO DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLNO DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLNO DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLNO DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLNO DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLNO DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLNO DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLNO DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLNO DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  } {
  // TCD MBC NBYTES MLOFFNO
// TCD Minor Byte Count  [0,31] -- 6.6.5.23
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLOFFNO DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLOFFNO DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLOFFNO DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLOFFNO DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLOFFNO DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLOFFNO DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLOFFNO DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLOFFNO DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLOFFNO DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLOFFNO DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLOFFNO DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLOFFNO DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLOFFNO DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLOFFNO DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLOFFNO DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLOFFNO DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLOFFNO DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLOFFNO DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLOFFNO DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLOFFNO DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLOFFNO DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLOFFNO DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLOFFNO DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLOFFNO DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLOFFNO DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLOFFNO DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLOFFNO DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLOFFNO DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLOFFNO DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLOFFNO DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLOFFNO DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLOFFNO DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  } { // TCD MBC NBYTES MLOFFYES
// TCD Minor Byte Count  [0,31] -- 6.6.5.24
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE01 MAP_32BIT_REGISTER(0x400e9008)
#define DMA_TCD00_MBC_MLOFFYES DMA_TCD_32BASE01._0x0000 // R/W, TCD MBC 00
#define DMA_TCD01_MBC_MLOFFYES DMA_TCD_32BASE01._0x0020 // R/W, TCD MBC 01
#define DMA_TCD02_MBC_MLOFFYES DMA_TCD_32BASE01._0x0040 // R/W, TCD MBC 02
#define DMA_TCD03_MBC_MLOFFYES DMA_TCD_32BASE01._0x0060 // R/W, TCD MBC 03

#define DMA_TCD04_MBC_MLOFFYES DMA_TCD_32BASE01._0x0080 // R/W, TCD MBC 04
#define DMA_TCD05_MBC_MLOFFYES DMA_TCD_32BASE01._0x00a0 // R/W, TCD MBC 05
#define DMA_TCD06_MBC_MLOFFYES DMA_TCD_32BASE01._0x00c0 // R/W, TCD MBC 06
#define DMA_TCD07_MBC_MLOFFYES DMA_TCD_32BASE01._0x00e0 // R/W, TCD MBC 07

#define DMA_TCD08_MBC_MLOFFYES DMA_TCD_32BASE01._0x0100 // R/W, TCD MBC 08
#define DMA_TCD09_MBC_MLOFFYES DMA_TCD_32BASE01._0x0120 // R/W, TCD MBC 09
#define DMA_TCD10_MBC_MLOFFYES DMA_TCD_32BASE01._0x0140 // R/W, TCD MBC 10
#define DMA_TCD11_MBC_MLOFFYES DMA_TCD_32BASE01._0x0160 // R/W, TCD MBC 11

#define DMA_TCD12_MBC_MLOFFYES DMA_TCD_32BASE01._0x0180 // R/W, TCD MBC 12
#define DMA_TCD13_MBC_MLOFFYES DMA_TCD_32BASE01._0x01a0 // R/W, TCD MBC 13
#define DMA_TCD14_MBC_MLOFFYES DMA_TCD_32BASE01._0x01c0 // R/W, TCD MBC 14
#define DMA_TCD15_MBC_MLOFFYES DMA_TCD_32BASE01._0x01e0 // R/W, TCD MBC 15

#define DMA_TCD16_MBC_MLOFFYES DMA_TCD_32BASE01._0x0200 // R/W, TCD MBC 16
#define DMA_TCD17_MBC_MLOFFYES DMA_TCD_32BASE01._0x0220 // R/W, TCD MBC 17
#define DMA_TCD18_MBC_MLOFFYES DMA_TCD_32BASE01._0x0240 // R/W, TCD MBC 18
#define DMA_TCD19_MBC_MLOFFYES DMA_TCD_32BASE01._0x0260 // R/W, TCD MBC 19

#define DMA_TCD20_MBC_MLOFFYES DMA_TCD_32BASE01._0x0280 // R/W, TCD MBC 20
#define DMA_TCD21_MBC_MLOFFYES DMA_TCD_32BASE01._0x02a0 // R/W, TCD MBC 21
#define DMA_TCD22_MBC_MLOFFYES DMA_TCD_32BASE01._0x02c0 // R/W, TCD MBC 22
#define DMA_TCD23_MBC_MLOFFYES DMA_TCD_32BASE01._0x02e0 // R/W, TCD MBC 23

#define DMA_TCD24_MBC_MLOFFYES DMA_TCD_32BASE01._0x0300 // R/W, TCD MBC 24
#define DMA_TCD25_MBC_MLOFFYES DMA_TCD_32BASE01._0x0320 // R/W, TCD MBC 25
#define DMA_TCD26_MBC_MLOFFYES DMA_TCD_32BASE01._0x0340 // R/W, TCD MBC 26
#define DMA_TCD27_MBC_MLOFFYES DMA_TCD_32BASE01._0x0360 // R/W, TCD MBC 27

#define DMA_TCD28_MBC_MLOFFYES DMA_TCD_32BASE01._0x0380 // R/W, TCD MBC 28
#define DMA_TCD29_MBC_MLOFFYES DMA_TCD_32BASE01._0x03a0 // R/W, TCD MBC 29
#define DMA_TCD30_MBC_MLOFFYES DMA_TCD_32BASE01._0x03c0 // R/W, TCD MBC 30
#define DMA_TCD31_MBC_MLOFFYES DMA_TCD_32BASE01._0x03e0 // R/W, TCD MBC 31
  }
}
//==
// TCD Last Source Address Adjustment  [0,31] -- 6.6.5.25
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE02 MAP_32BIT_REGISTER(0x400e900c)

#define DMA_TCD00_LSAA DMA_TCD_32BASE02._0x0000 // R/W, TCD LSAA 00
#define DMA_TCD01_LSAA DMA_TCD_32BASE02._0x0020 // R/W, TCD LSAA 01
#define DMA_TCD02_LSAA DMA_TCD_32BASE02._0x0040 // R/W, TCD LSAA 02
#define DMA_TCD03_LSAA DMA_TCD_32BASE02._0x0060 // R/W, TCD LSAA 03

#define DMA_TCD04_LSAA DMA_TCD_32BASE02._0x0080 // R/W, TCD LSAA 04
#define DMA_TCD05_LSAA DMA_TCD_32BASE02._0x00a0 // R/W, TCD LSAA 05
#define DMA_TCD06_LSAA DMA_TCD_32BASE02._0x00c0 // R/W, TCD LSAA 06
#define DMA_TCD07_LSAA DMA_TCD_32BASE02._0x00e0 // R/W, TCD LSAA 07

#define DMA_TCD08_LSAA DMA_TCD_32BASE02._0x0100 // R/W, TCD LSAA 08
#define DMA_TCD09_LSAA DMA_TCD_32BASE02._0x0120 // R/W, TCD LSAA 09
#define DMA_TCD10_LSAA DMA_TCD_32BASE02._0x0140 // R/W, TCD LSAA 10
#define DMA_TCD11_LSAA DMA_TCD_32BASE02._0x0160 // R/W, TCD LSAA 11

#define DMA_TCD12_LSAA DMA_TCD_32BASE02._0x0180 // R/W, TCD LSAA 12
#define DMA_TCD13_LSAA DMA_TCD_32BASE02._0x01a0 // R/W, TCD LSAA 13
#define DMA_TCD14_LSAA DMA_TCD_32BASE02._0x01c0 // R/W, TCD LSAA 14
#define DMA_TCD15_LSAA DMA_TCD_32BASE02._0x01e0 // R/W, TCD LSAA 15

#define DMA_TCD16_LSAA DMA_TCD_32BASE02._0x0200 // R/W, TCD LSAA 16
#define DMA_TCD17_LSAA DMA_TCD_32BASE02._0x0220 // R/W, TCD LSAA 17
#define DMA_TCD18_LSAA DMA_TCD_32BASE02._0x0240 // R/W, TCD LSAA 18
#define DMA_TCD19_LSAA DMA_TCD_32BASE02._0x0260 // R/W, TCD LSAA 19

#define DMA_TCD20_LSAA DMA_TCD_32BASE02._0x0280 // R/W, TCD LSAA 20
#define DMA_TCD21_LSAA DMA_TCD_32BASE02._0x02a0 // R/W, TCD LSAA 21
#define DMA_TCD22_LSAA DMA_TCD_32BASE02._0x02c0 // R/W, TCD LSAA 22
#define DMA_TCD23_LSAA DMA_TCD_32BASE02._0x02e0 // R/W, TCD LSAA 23

#define DMA_TCD24_LSAA DMA_TCD_32BASE02._0x0300 // R/W, TCD LSAA 24
#define DMA_TCD25_LSAA DMA_TCD_32BASE02._0x0320 // R/W, TCD LSAA 25
#define DMA_TCD26_LSAA DMA_TCD_32BASE02._0x0340 // R/W, TCD LSAA 26
#define DMA_TCD27_LSAA DMA_TCD_32BASE02._0x0360 // R/W, TCD LSAA 27

#define DMA_TCD28_LSAA DMA_TCD_32BASE02._0x0380 // R/W, TCD LSAA 28
#define DMA_TCD29_LSAA DMA_TCD_32BASE02._0x03a0 // R/W, TCD LSAA 29
#define DMA_TCD30_LSAA DMA_TCD_32BASE02._0x03c0 // R/W, TCD LSAA 30
#define DMA_TCD31_LSAA DMA_TCD_32BASE02._0x03e0 // R/W, TCD LSAA 31
//==

// TCD Destination Address  [0,31] -- 6.6.5.26
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE03 MAP_32BIT_REGISTER(0x400e9010)
#define DMA_TCD00_DADDR DMA_TCD_32BASE03._0x0000 // R/W, TCD DADDR 00
#define DMA_TCD01_DADDR DMA_TCD_32BASE03._0x0020 // R/W, TCD DADDR 01
#define DMA_TCD02_DADDR DMA_TCD_32BASE03._0x0040 // R/W, TCD DADDR 02
#define DMA_TCD03_DADDR DMA_TCD_32BASE03._0x0060 // R/W, TCD DADDR 03

#define DMA_TCD04_DADDR DMA_TCD_32BASE03._0x0080 // R/W, TCD DADDR 04
#define DMA_TCD05_DADDR DMA_TCD_32BASE03._0x00a0 // R/W, TCD DADDR 05
#define DMA_TCD06_DADDR DMA_TCD_32BASE03._0x00c0 // R/W, TCD DADDR 06
#define DMA_TCD07_DADDR DMA_TCD_32BASE03._0x00e0 // R/W, TCD DADDR 07

#define DMA_TCD08_DADDR DMA_TCD_32BASE03._0x0100 // R/W, TCD DADDR 08
#define DMA_TCD09_DADDR DMA_TCD_32BASE03._0x0120 // R/W, TCD DADDR 09
#define DMA_TCD10_DADDR DMA_TCD_32BASE03._0x0140 // R/W, TCD DADDR 10
#define DMA_TCD11_DADDR DMA_TCD_32BASE03._0x0160 // R/W, TCD DADDR 11

#define DMA_TCD12_DADDR DMA_TCD_32BASE03._0x0180 // R/W, TCD DADDR 12
#define DMA_TCD13_DADDR DMA_TCD_32BASE03._0x01a0 // R/W, TCD DADDR 13
#define DMA_TCD14_DADDR DMA_TCD_32BASE03._0x01c0 // R/W, TCD DADDR 14
#define DMA_TCD15_DADDR DMA_TCD_32BASE03._0x01e0 // R/W, TCD DADDR 15

#define DMA_TCD16_DADDR DMA_TCD_32BASE03._0x0200 // R/W, TCD DADDR 16
#define DMA_TCD17_DADDR DMA_TCD_32BASE03._0x0220 // R/W, TCD DADDR 17
#define DMA_TCD18_DADDR DMA_TCD_32BASE03._0x0240 // R/W, TCD DADDR 18
#define DMA_TCD19_DADDR DMA_TCD_32BASE03._0x0260 // R/W, TCD DADDR 19

#define DMA_TCD20_DADDR DMA_TCD_32BASE03._0x0280 // R/W, TCD DADDR 20
#define DMA_TCD21_DADDR DMA_TCD_32BASE03._0x02a0 // R/W, TCD DADDR 21
#define DMA_TCD22_DADDR DMA_TCD_32BASE03._0x02c0 // R/W, TCD DADDR 22
#define DMA_TCD23_DADDR DMA_TCD_32BASE03._0x02e0 // R/W, TCD DADDR 23

#define DMA_TCD24_DADDR DMA_TCD_32BASE03._0x0300 // R/W, TCD DADDR 24
#define DMA_TCD25_DADDR DMA_TCD_32BASE03._0x0320 // R/W, TCD DADDR 25
#define DMA_TCD26_DADDR DMA_TCD_32BASE03._0x0340 // R/W, TCD DADDR 26
#define DMA_TCD27_DADDR DMA_TCD_32BASE03._0x0360 // R/W, TCD DADDR 27

#define DMA_TCD28_DADDR DMA_TCD_32BASE03._0x0380 // R/W, TCD DADDR 28
#define DMA_TCD29_DADDR DMA_TCD_32BASE03._0x03a0 // R/W, TCD DADDR 29
#define DMA_TCD30_DADDR DMA_TCD_32BASE03._0x03c0 // R/W, TCD DADDR 30
#define DMA_TCD31_DADDR DMA_TCD_32BASE03._0x03e0 // R/W, TCD DADDR 31

//==

// TCD Singed Destination Address Offset  [0,31] -- 6.6.5.27
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE02 MAP_16BIT_REGISTER(0x400e9014)
#define DMA_TCD00_SDOFF DMA_TCD_16BASE02._0x0000 // R/W, TCD SDOFF 00
#define DMA_TCD01_SDOFF DMA_TCD_16BASE02._0x0020 // R/W, TCD SDOFF 01
#define DMA_TCD02_SDOFF DMA_TCD_16BASE02._0x0040 // R/W, TCD SDOFF 02
#define DMA_TCD03_SDOFF DMA_TCD_16BASE02._0x0060 // R/W, TCD SDOFF 03

#define DMA_TCD04_SDOFF DMA_TCD_16BASE02._0x0080 // R/W, TCD SDOFF 04
#define DMA_TCD05_SDOFF DMA_TCD_16BASE02._0x00a0 // R/W, TCD SDOFF 05
#define DMA_TCD06_SDOFF DMA_TCD_16BASE02._0x00c0 // R/W, TCD SDOFF 06
#define DMA_TCD07_SDOFF DMA_TCD_16BASE02._0x00e0 // R/W, TCD SDOFF 07

#define DMA_TCD08_SDOFF DMA_TCD_16BASE02._0x0100 // R/W, TCD SDOFF 08
#define DMA_TCD09_SDOFF DMA_TCD_16BASE02._0x0120 // R/W, TCD SDOFF 09
#define DMA_TCD10_SDOFF DMA_TCD_16BASE02._0x0140 // R/W, TCD SDOFF 10
#define DMA_TCD11_SDOFF DMA_TCD_16BASE02._0x0160 // R/W, TCD SDOFF 11

#define DMA_TCD12_SDOFF DMA_TCD_16BASE02._0x0180 // R/W, TCD SDOFF 12
#define DMA_TCD13_SDOFF DMA_TCD_16BASE02._0x01a0 // R/W, TCD SDOFF 13
#define DMA_TCD14_SDOFF DMA_TCD_16BASE02._0x01c0 // R/W, TCD SDOFF 14
#define DMA_TCD15_SDOFF DMA_TCD_16BASE02._0x01e0 // R/W, TCD SDOFF 15

#define DMA_TCD16_SDOFF DMA_TCD_16BASE02._0x0200 // R/W, TCD SDOFF 16
#define DMA_TCD17_SDOFF DMA_TCD_16BASE02._0x0220 // R/W, TCD SDOFF 17
#define DMA_TCD18_SDOFF DMA_TCD_16BASE02._0x0240 // R/W, TCD SDOFF 18
#define DMA_TCD19_SDOFF DMA_TCD_16BASE02._0x0260 // R/W, TCD SDOFF 19

#define DMA_TCD20_SDOFF DMA_TCD_16BASE02._0x0280 // R/W, TCD SDOFF 20
#define DMA_TCD21_SDOFF DMA_TCD_16BASE02._0x02a0 // R/W, TCD SDOFF 21
#define DMA_TCD22_SDOFF DMA_TCD_16BASE02._0x02c0 // R/W, TCD SDOFF 22
#define DMA_TCD23_SDOFF DMA_TCD_16BASE02._0x02e0 // R/W, TCD SDOFF 23

#define DMA_TCD24_SDOFF DMA_TCD_16BASE02._0x0300 // R/W, TCD SDOFF 24
#define DMA_TCD25_SDOFF DMA_TCD_16BASE02._0x0320 // R/W, TCD SDOFF 25
#define DMA_TCD26_SDOFF DMA_TCD_16BASE02._0x0340 // R/W, TCD SDOFF 26
#define DMA_TCD27_SDOFF DMA_TCD_16BASE02._0x0360 // R/W, TCD SDOFF 27

#define DMA_TCD28_SDOFF DMA_TCD_16BASE02._0x0380 // R/W, TCD SDOFF 28
#define DMA_TCD29_SDOFF DMA_TCD_16BASE02._0x03a0 // R/W, TCD SDOFF 29
#define DMA_TCD30_SDOFF DMA_TCD_16BASE02._0x03c0 // R/W, TCD SDOFF 30
#define DMA_TCD31_SDOFF DMA_TCD_16BASE02._0x03e0 // R/W, TCD SDOFF 31

{
  {
  // CHANNEL LINK DISABLED
  // TCD Current Minor Loop Link, Major Loop Count (CMLMLC)  [0,31] -- 6.6.5.28
  // 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE03 MAP_16BIT_REGISTER(0x400e9016)
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0000 // R/W, TCD MLLMLC 00
#define DMA_TCD01_CITER_LNKNO DMA_TCD_16BASE03._0x0020 // R/W, TCD MLLMLC 01
#define DMA_TCD02_CITER_LNKNO DMA_TCD_16BASE03._0x0040 // R/W, TCD MLLMLC 02
#define DMA_TCD03_CITER_LNKNO DMA_TCD_16BASE03._0x0060 // R/W, TCD MLLMLC 03

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0080 // R/W, TCD MLLMLC 04
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00a0 // R/W, TCD MLLMLC 05
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00c0 // R/W, TCD MLLMLC 06
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x00e0 // R/W, TCD MLLMLC 07

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0100 // R/W, TCD MLLMLC 08
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0120 // R/W, TCD MLLMLC 09
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0140 // R/W, TCD MLLMLC 10
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0160 // R/W, TCD MLLMLC 11

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0180 // R/W, TCD MLLMLC 12
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01a0 // R/W, TCD MLLMLC 13
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01c0 // R/W, TCD MLLMLC 14
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x01e0 // R/W, TCD MLLMLC 15

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0200 // R/W, TCD MLLMLC 16
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0220 // R/W, TCD MLLMLC 17
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0240 // R/W, TCD MLLMLC 18
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0260 // R/W, TCD MLLMLC 19

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0280 // R/W, TCD MLLMLC 20
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02a0 // R/W, TCD MLLMLC 21
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02c0 // R/W, TCD MLLMLC 22
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x02e0 // R/W, TCD MLLMLC 23

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0300 // R/W, TCD MLLMLC 24
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0320 // R/W, TCD MLLMLC 25
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0340 // R/W, TCD MLLMLC 26
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0360 // R/W, TCD MLLMLC 27

#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x0380 // R/W, TCD MLLMLC 28
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03a0 // R/W, TCD MLLMLC 29
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03c0 // R/W, TCD MLLMLC 30
#define DMA_TCD00_CITER_LNKNO DMA_TCD_16BASE03._0x03e0 // R/W, TCD MLLMLC 31
  } {
    // CHANNEL LINK ENABLED
    // TCD Current Minor Loop Link, Major Loop Count (CMLMLC)  [0,31]
    // -- 6.6.5.29
    // 1000 + (N * 20), N = [0, 31]
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0000 // R/W, TCD MLLMLC 00
#define DMA_TCD01_CITER_LNKYES DMA_TCD_16BASE03._0x0020 // R/W, TCD MLLMLC 01
#define DMA_TCD02_CITER_LNKYES DMA_TCD_16BASE03._0x0040 // R/W, TCD MLLMLC 02
#define DMA_TCD03_CITER_LNKYES DMA_TCD_16BASE03._0x0060 // R/W, TCD MLLMLC 03

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0080 // R/W, TCD MLLMLC 04
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00a0 // R/W, TCD MLLMLC 05
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00c0 // R/W, TCD MLLMLC 06
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x00e0 // R/W, TCD MLLMLC 07

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0100 // R/W, TCD MLLMLC 08
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0120 // R/W, TCD MLLMLC 09
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0140 // R/W, TCD MLLMLC 10
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0160 // R/W, TCD MLLMLC 11

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0180 // R/W, TCD MLLMLC 12
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01a0 // R/W, TCD MLLMLC 13
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01c0 // R/W, TCD MLLMLC 14
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x01e0 // R/W, TCD MLLMLC 15

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0200 // R/W, TCD MLLMLC 16
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0220 // R/W, TCD MLLMLC 17
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0240 // R/W, TCD MLLMLC 18
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0260 // R/W, TCD MLLMLC 19

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0280 // R/W, TCD MLLMLC 20
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02a0 // R/W, TCD MLLMLC 21
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02c0 // R/W, TCD MLLMLC 22
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x02e0 // R/W, TCD MLLMLC 23

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0300 // R/W, TCD MLLMLC 24
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0320 // R/W, TCD MLLMLC 25
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0340 // R/W, TCD MLLMLC 26
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0360 // R/W, TCD MLLMLC 27

#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x0380 // R/W, TCD MLLMLC 28
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03a0 // R/W, TCD MLLMLC 29
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03c0 // R/W, TCD MLLMLC 30
#define DMA_TCD00_CITER_LNKYES DMA_TCD_16BASE03._0x03e0 // R/W, TCD MLLMLC 31
  }
}

//==

// TCD Last Destination Address Adjustment /
// Scatter Gather Address
// (DLASTSGA)  [0,31] -- 6.6.5.30
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_32BASE04 MAP_32BIT_REGISTER(0x400e9018)
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0000 // R/W, TCD DLASTSGA 00
#define DMA_TCD01_DLASTSGA DMA_TCD_32BASE04._0x0020 // R/W, TCD DLASTSGA 01
#define DMA_TCD02_DLASTSGA DMA_TCD_32BASE04._0x0040 // R/W, TCD DLASTSGA 02
#define DMA_TCD03_DLASTSGA DMA_TCD_32BASE04._0x0060 // R/W, TCD DLASTSGA 03

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0080 // R/W, TCD DLASTSGA 04
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00a0 // R/W, TCD DLASTSGA 05
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00c0 // R/W, TCD DLASTSGA 06
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x00e0 // R/W, TCD DLASTSGA 07

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0100 // R/W, TCD DLASTSGA 08
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0120 // R/W, TCD DLASTSGA 09
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0140 // R/W, TCD DLASTSGA 10
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0160 // R/W, TCD DLASTSGA 11

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0180 // R/W, TCD DLASTSGA 12
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01a0 // R/W, TCD DLASTSGA 13
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01c0 // R/W, TCD DLASTSGA 14
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x01e0 // R/W, TCD DLASTSGA 15

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0200 // R/W, TCD DLASTSGA 16
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0220 // R/W, TCD DLASTSGA 17
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0240 // R/W, TCD DLASTSGA 18
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0260 // R/W, TCD DLASTSGA 19

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0280 // R/W, TCD DLASTSGA 20
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02a0 // R/W, TCD DLASTSGA 21
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02c0 // R/W, TCD DLASTSGA 22
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x02e0 // R/W, TCD DLASTSGA 23

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0300 // R/W, TCD DLASTSGA 24
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0320 // R/W, TCD DLASTSGA 25
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0340 // R/W, TCD DLASTSGA 26
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0360 // R/W, TCD DLASTSGA 27

#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x0380 // R/W, TCD DLASTSGA 28
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03a0 // R/W, TCD DLASTSGA 29
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03c0 // R/W, TCD DLASTSGA 30
#define DMA_TCD00_DLASTSGA DMA_TCD_32BASE04._0x03e0 // R/W, TCD DLASTSGA 31

//==

// TCD Control and Status Registers (CMLMLC)  [0,31]
// -- 6.6.5.31
// 1000 + (N * 20), N = [0, 31]
#define DMA_TCD_16BASE04 MAP_16BIT_REGISTER(0x400e901c)
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0000 // R/W, TCD CSR 00
#define DMA_TCD01_CSR DMA_TCD_16BASE04._0x0020 // R/W, TCD CSR 01
#define DMA_TCD02_CSR DMA_TCD_16BASE04._0x0040 // R/W, TCD CSR 02
#define DMA_TCD03_CSR DMA_TCD_16BASE04._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_CSR DMA_TCD_16BASE04._0x03e0 // R/W, TCD CSR 31

//==

{
#define DMA_TCD_16BASE05 MAP_16BIT_REGISTER(0x400e901e)
  // 1000 + (N * 20), N = [0, 31]
  {
// TCD Beginning Min. Loop Link, Maj. Loop Count (Channel Link disables)  [0,31]
// -- 6.6.5.32
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0000 // R/W, TCD CSR 00
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0020 // R/W, TCD CSR 01
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0040 // R/W, TCD CSR 02
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_BITER_LNKNO DMA_TCD_16BASE05._0x03e0 // R/W, TCD CSR 31
  } {
// TCD Beginning Min. Loop Link, Maj. Loop Count (Channel Link disables)  [0,31]
// -- 6.6.5.33
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0000 // R/W, TCD CSR 00
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0020 // R/W, TCD CSR 01
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0040 // R/W, TCD CSR 02
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0060 // R/W, TCD CSR 03

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0080 // R/W, TCD CSR 04
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00a0 // R/W, TCD CSR 05
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00c0 // R/W, TCD CSR 06
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x00e0 // R/W, TCD CSR 07

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0100 // R/W, TCD CSR 08
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0120 // R/W, TCD CSR 09
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0140 // R/W, TCD CSR 10
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0160 // R/W, TCD CSR 11

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0180 // R/W, TCD CSR 12
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01a0 // R/W, TCD CSR 13
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01c0 // R/W, TCD CSR 14
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x01e0 // R/W, TCD CSR 15

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0200 // R/W, TCD CSR 16
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0220 // R/W, TCD CSR 17
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0240 // R/W, TCD CSR 18
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0260 // R/W, TCD CSR 19

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0280 // R/W, TCD CSR 20
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02a0 // R/W, TCD CSR 21
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02c0 // R/W, TCD CSR 22
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x02e0 // R/W, TCD CSR 23

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0300 // R/W, TCD CSR 24
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0320 // R/W, TCD CSR 25
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0340 // R/W, TCD CSR 26
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0360 // R/W, TCD CSR 27

#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x0380 // R/W, TCD CSR 28
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03a0 // R/W, TCD CSR 29
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03c0 // R/W, TCD CSR 30
#define DMA_TCD00_BITER_LNKYES DMA_TCD_16BASE05._0x03e0 // R/W, TCD CSR 31
  }
}

//===
// 11.4 IOMUXC GPR Memory Map/Register definition
#define IOMUXC_32BASE00 MAP_16BIT_REGISTER(0x400ac000)
#define IOMUXC_GPR_GPR00 IOMUXC_32BASE00._0x0000
#define IOMUXC_GPR_GPR01 IOMUXC_32BASE00._0x0004
#define IOMUXC_GPR_GPR02 IOMUXC_32BASE00._0x0008
#define IOMUXC_GPR_GPR03 IOMUXC_32BASE00._0x000c
#define IOMUXC_GPR_GPR04 IOMUXC_32BASE00._0x0010
#define IOMUXC_GPR_GPR05 IOMUXC_32BASE00._0x0014
#define IOMUXC_GPR_GPR06 IOMUXC_32BASE00._0x0018
#define IOMUXC_GPR_GPR07 IOMUXC_32BASE00._0x001c
#define IOMUXC_GPR_GPR08 IOMUXC_32BASE00._0x0020
#define IOMUXC_GPR_GPR09 IOMUXC_32BASE00._0x0024
#define IOMUXC_GPR_GPR10 IOMUXC_32BASE00._0x0028
#define IOMUXC_GPR_GPR11 IOMUXC_32BASE00._0x002c
#define IOMUXC_GPR_GPR12 IOMUXC_32BASE00._0x0030
#define IOMUXC_GPR_GPR13 IOMUXC_32BASE00._0x0034
#define IOMUXC_GPR_GPR14 IOMUXC_32BASE00._0x0038
#define IOMUXC_GPR_GPR15 IOMUXC_32BASE00._0x003c
#define IOMUXC_GPR_GPR16 IOMUXC_32BASE00._0x0040
#define IOMUXC_GPR_GPR17 IOMUXC_32BASE00._0x0044
#define IOMUXC_GPR_GPR18 IOMUXC_32BASE00._0x0048
#define IOMUXC_GPR_GPR19 IOMUXC_32BASE00._0x004c
#define IOMUXC_GPR_GPR20 IOMUXC_32BASE00._0x0050
#define IOMUXC_GPR_GPR21 IOMUXC_32BASE00._0x0054
#define IOMUXC_GPR_GPR22 IOMUXC_32BASE00._0x0058
#define IOMUXC_GPR_GPR23 IOMUXC_32BASE00._0x005c
#define IOMUXC_GPR_GPR24 IOMUXC_32BASE00._0x0060
#define IOMUXC_GPR_GPR25 IOMUXC_32BASE00._0x0064
#define IOMUXC_GPR_GPR26 IOMUXC_32BASE00._0x0068
#define IOMUXC_GPR_GPR27 IOMUXC_32BASE00._0x006c
#define IOMUXC_GPR_GPR28 IOMUXC_32BASE00._0x0070
#define IOMUXC_GPR_GPR29 IOMUXC_32BASE00._0x0074
#define IOMUXC_GPR_GPR30 IOMUXC_32BASE00._0x0078
#define IOMUXC_GPR_GPR31 IOMUXC_32BASE00._0x007c
#define IOMUXC_GPR_GPR32 IOMUXC_32BASE00._0x0080
#define IOMUXC_GPR_GPR33 IOMUXC_32BASE00._0x0084
#define IOMUXC_GPR_GPR34 IOMUXC_32BASE00._0x0088

//===
//===
// 11.5 IOMUXC SVNS Memory Map/Register definition
#define IOMUXC_32BASE01 MAP_32BIT_REGISTER(0x400a8000)

#define IOMUXC_SNVS_WAKEUP_MUX_CR IOMUXC_32BASE01._0x0000
#define IOMUXC_SNVS_PMIC_ON_REQ_MUX_CR IOMUXC_32BASE01._0x0004
#define IOMUXC_SNVS_PMIC_STBY_REQ_MUX_CR IOMUXC_32BASE01._0x0008
#define IOMUXC_SNVS_TEST_MODE_PAD_CR IOMUXC_32BASE01._0x000c
#define IOMUXC_SNVS_POR_PAD_CR IOMUXC_32BASE01._0x0010
#define IOMUXC_SNVS_ONOFF_PAD_CR IOMUXC_32BASE01._0x0014
#define IOMUXC_SNVS_WAKEUP_PAD_CR IOMUXC_32BASE01._0x0018
#define IOMUXC_SNVS_PMIC_ON_REQ_PAD_CR IOMUXC_32BASE01._0x001c
#define IOMUXC_SNVS_STBY_ON_REQ_PAD_CR IOMUXC_32BASE01._0x0020

//===
//===
// 11.6 IOMUXC SVNS/GPR Memory Map/Register definition
#define IOMUXC_32BASE02 MAP_32BIT_REGISTER(0x400a4000)
#define IOMUXC_SNVS_GPR_GPR0 IOMUXC_32BASE02._0x0000
#define IOMUXC_SNVS_GPR_GPR1 IOMUXC_32BASE02._0x0004
#define IOMUXC_SNVS_GPR_GPR2 IOMUXC_32BASE02._0x0008
#define IOMUXC_SNVS_GPR_GPR3 IOMUXC_32BASE02._0x000c

//===
//===
// 11.7 IOMUXC Memory Map/Register definition  p.403 - p.426
#define IOMUXC_32BASE03 MAP_32BIT_REGISTER(0x401f8014)
// SW_MUX_CTL_PAD_GPIO_EMC_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_EMC_CR00 IOMUXC_32BASE03._0x0000
#define IOMUXC_MUX_PAD_GPIO_EMC_CR01 IOMUXC_32BASE03._0x0004
#define IOMUXC_MUX_PAD_GPIO_EMC_CR02 IOMUXC_32BASE03._0x0008
#define IOMUXC_MUX_PAD_GPIO_EMC_CR03 IOMUXC_32BASE03._0x000c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR04 IOMUXC_32BASE03._0x0010
#define IOMUXC_MUX_PAD_GPIO_EMC_CR05 IOMUXC_32BASE03._0x0014
#define IOMUXC_MUX_PAD_GPIO_EMC_CR06 IOMUXC_32BASE03._0x0018
#define IOMUXC_MUX_PAD_GPIO_EMC_CR07 IOMUXC_32BASE03._0x001c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR08 IOMUXC_32BASE03._0x0020
#define IOMUXC_MUX_PAD_GPIO_EMC_CR09 IOMUXC_32BASE03._0x0024
#define IOMUXC_MUX_PAD_GPIO_EMC_CR10 IOMUXC_32BASE03._0x0028
#define IOMUXC_MUX_PAD_GPIO_EMC_CR11 IOMUXC_32BASE03._0x002c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR12 IOMUXC_32BASE03._0x0030
#define IOMUXC_MUX_PAD_GPIO_EMC_CR13 IOMUXC_32BASE03._0x0034
#define IOMUXC_MUX_PAD_GPIO_EMC_CR14 IOMUXC_32BASE03._0x0038
#define IOMUXC_MUX_PAD_GPIO_EMC_CR15 IOMUXC_32BASE03._0x003c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR16 IOMUXC_32BASE03._0x0040
#define IOMUXC_MUX_PAD_GPIO_EMC_CR17 IOMUXC_32BASE03._0x0044
#define IOMUXC_MUX_PAD_GPIO_EMC_CR18 IOMUXC_32BASE03._0x0048
#define IOMUXC_MUX_PAD_GPIO_EMC_CR19 IOMUXC_32BASE03._0x004c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR20 IOMUXC_32BASE03._0x0050
#define IOMUXC_MUX_PAD_GPIO_EMC_CR21 IOMUXC_32BASE03._0x0054
#define IOMUXC_MUX_PAD_GPIO_EMC_CR22 IOMUXC_32BASE03._0x0058
#define IOMUXC_MUX_PAD_GPIO_EMC_CR23 IOMUXC_32BASE03._0x005c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR24 IOMUXC_32BASE03._0x0060
#define IOMUXC_MUX_PAD_GPIO_EMC_CR25 IOMUXC_32BASE03._0x0064
#define IOMUXC_MUX_PAD_GPIO_EMC_CR26 IOMUXC_32BASE03._0x0068
#define IOMUXC_MUX_PAD_GPIO_EMC_CR27 IOMUXC_32BASE03._0x006c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR28 IOMUXC_32BASE03._0x0070
#define IOMUXC_MUX_PAD_GPIO_EMC_CR29 IOMUXC_32BASE03._0x0074
#define IOMUXC_MUX_PAD_GPIO_EMC_CR30 IOMUXC_32BASE03._0x0078
#define IOMUXC_MUX_PAD_GPIO_EMC_CR31 IOMUXC_32BASE03._0x007c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR32 IOMUXC_32BASE03._0x0080
#define IOMUXC_MUX_PAD_GPIO_EMC_CR33 IOMUXC_32BASE03._0x0084
#define IOMUXC_MUX_PAD_GPIO_EMC_CR34 IOMUXC_32BASE03._0x0088
#define IOMUXC_MUX_PAD_GPIO_EMC_CR35 IOMUXC_32BASE03._0x008c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR36 IOMUXC_32BASE03._0x0090
#define IOMUXC_MUX_PAD_GPIO_EMC_CR37 IOMUXC_32BASE03._0x0094
#define IOMUXC_MUX_PAD_GPIO_EMC_CR38 IOMUXC_32BASE03._0x0098
#define IOMUXC_MUX_PAD_GPIO_EMC_CR39 IOMUXC_32BASE03._0x009c
#define IOMUXC_MUX_PAD_GPIO_EMC_CR40 IOMUXC_32BASE03._0x00a0
#define IOMUXC_MUX_PAD_GPIO_EMC_CR41 IOMUXC_32BASE03._0x00a4

// SW_MUX_PAD_GPIO_AD_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x00a8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR01 IOMUXC_32BASE03._0x00ac
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR02 IOMUXC_32BASE03._0x00b0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR03 IOMUXC_32BASE03._0x00b4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR04 IOMUXC_32BASE03._0x00b8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR05 IOMUXC_32BASE03._0x00bc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR06 IOMUXC_32BASE03._0x00c0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR07 IOMUXC_32BASE03._0x00c4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR08 IOMUXC_32BASE03._0x00c8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR09 IOMUXC_32BASE03._0x00cc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR10 IOMUXC_32BASE03._0x00d0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR11 IOMUXC_32BASE03._0x00d4
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR12 IOMUXC_32BASE03._0x00d8
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR13 IOMUXC_32BASE03._0x00dc
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR14 IOMUXC_32BASE03._0x00e0
#define IOMUXC_MUX_PAD_GPIO_AD_B0_CR15 IOMUXC_32BASE03._0x00e4

// SW_MUX_PAD_GPIO_AD_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x00e8
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR01 IOMUXC_32BASE03._0x00ec
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR02 IOMUXC_32BASE03._0x00f0
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR03 IOMUXC_32BASE03._0x00f4
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR04 IOMUXC_32BASE03._0x00f8
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR05 IOMUXC_32BASE03._0x00fc
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR06 IOMUXC_32BASE03._0x0100
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR07 IOMUXC_32BASE03._0x0104
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR08 IOMUXC_32BASE03._0x0108
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR09 IOMUXC_32BASE03._0x010c
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR10 IOMUXC_32BASE03._0x0110
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR11 IOMUXC_32BASE03._0x0114
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR12 IOMUXC_32BASE03._0x0118
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR13 IOMUXC_32BASE03._0x011c
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR14 IOMUXC_32BASE03._0x0120
#define IOMUXC_MUX_PAD_GPIO_AD_B1_CR15 IOMUXC_32BASE03._0x0124

// SW_MUX_PAD_GPIO_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0128
#define IOMUXC_MUX_PAD_GPIO_B0_CR01 IOMUXC_32BASE03._0x012c
#define IOMUXC_MUX_PAD_GPIO_B0_CR02 IOMUXC_32BASE03._0x0130
#define IOMUXC_MUX_PAD_GPIO_B0_CR03 IOMUXC_32BASE03._0x0134
#define IOMUXC_MUX_PAD_GPIO_B0_CR04 IOMUXC_32BASE03._0x0138
#define IOMUXC_MUX_PAD_GPIO_B0_CR05 IOMUXC_32BASE03._0x013c
#define IOMUXC_MUX_PAD_GPIO_B0_CR06 IOMUXC_32BASE03._0x0140
#define IOMUXC_MUX_PAD_GPIO_B0_CR07 IOMUXC_32BASE03._0x0144
#define IOMUXC_MUX_PAD_GPIO_B0_CR08 IOMUXC_32BASE03._0x0148
#define IOMUXC_MUX_PAD_GPIO_B0_CR09 IOMUXC_32BASE03._0x014c
#define IOMUXC_MUX_PAD_GPIO_B0_CR10 IOMUXC_32BASE03._0x0150
#define IOMUXC_MUX_PAD_GPIO_B0_CR11 IOMUXC_32BASE03._0x0154
#define IOMUXC_MUX_PAD_GPIO_B0_CR12 IOMUXC_32BASE03._0x0158
#define IOMUXC_MUX_PAD_GPIO_B0_CR13 IOMUXC_32BASE03._0x015c
#define IOMUXC_MUX_PAD_GPIO_B0_CR14 IOMUXC_32BASE03._0x0160
#define IOMUXC_MUX_PAD_GPIO_B0_CR15 IOMUXC_32BASE03._0x0164

// SW_MUX_PAD_GPIO_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0168
#define IOMUXC_MUX_PAD_GPIO_B1_CR01 IOMUXC_32BASE03._0x016c
#define IOMUXC_MUX_PAD_GPIO_B1_CR02 IOMUXC_32BASE03._0x0170
#define IOMUXC_MUX_PAD_GPIO_B1_CR03 IOMUXC_32BASE03._0x0174
#define IOMUXC_MUX_PAD_GPIO_B1_CR04 IOMUXC_32BASE03._0x0178
#define IOMUXC_MUX_PAD_GPIO_B1_CR05 IOMUXC_32BASE03._0x017c
#define IOMUXC_MUX_PAD_GPIO_B1_CR06 IOMUXC_32BASE03._0x0180
#define IOMUXC_MUX_PAD_GPIO_B1_CR07 IOMUXC_32BASE03._0x0184
#define IOMUXC_MUX_PAD_GPIO_B1_CR08 IOMUXC_32BASE03._0x0188
#define IOMUXC_MUX_PAD_GPIO_B1_CR09 IOMUXC_32BASE03._0x018c
#define IOMUXC_MUX_PAD_GPIO_B1_CR10 IOMUXC_32BASE03._0x0190
#define IOMUXC_MUX_PAD_GPIO_B1_CR11 IOMUXC_32BASE03._0x0194
#define IOMUXC_MUX_PAD_GPIO_B1_CR12 IOMUXC_32BASE03._0x0198
#define IOMUXC_MUX_PAD_GPIO_B1_CR13 IOMUXC_32BASE03._0x019c
#define IOMUXC_MUX_PAD_GPIO_B1_CR14 IOMUXC_32BASE03._0x01a0
#define IOMUXC_MUX_PAD_GPIO_B1_CR15 IOMUXC_32BASE03._0x01a4

// SW_MUX_PAD_GPIO_SD_B0_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x01a8
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR01 IOMUXC_32BASE03._0x01ac
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR02 IOMUXC_32BASE03._0x01b0
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR03 IOMUXC_32BASE03._0x01b4
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR04 IOMUXC_32BASE03._0x01b8
#define IOMUXC_MUX_PAD_GPIO_SD_B0_CR05 IOMUXC_32BASE03._0x01bc

// SW_MUX_PAD_GPIO_SD_B1_xx SW MUX Control Register
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x01c0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR01 IOMUXC_32BASE03._0x01c4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR02 IOMUXC_32BASE03._0x01c8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR03 IOMUXC_32BASE03._0x01cc
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR04 IOMUXC_32BASE03._0x01d0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR05 IOMUXC_32BASE03._0x01d4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR06 IOMUXC_32BASE03._0x01d8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR07 IOMUXC_32BASE03._0x01dc
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR08 IOMUXC_32BASE03._0x01e0
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR09 IOMUXC_32BASE03._0x01e4
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR10 IOMUXC_32BASE03._0x01e8
#define IOMUXC_MUX_PAD_GPIO_SD_B1_CR11 IOMUXC_32BASE03._0x01ec

// SW IOMUXC PAD  == FIX NAMES
// SW_PAD_CTL_PAD_GPIO_EMC_xx Control Registers
#define IOMUXC_PAD_PAD_GPIO_EMC_CR00 IOMUXC_32BASE03._0x01f0
#define IOMUXC_PAD_PAD_GPIO_EMC_CR01 IOMUXC_32BASE03._0x01f4
#define IOMUXC_PAD_PAD_GPIO_EMC_CR02 IOMUXC_32BASE03._0x01f8
#define IOMUXC_PAD_PAD_GPIO_EMC_CR03 IOMUXC_32BASE03._0x01fc
#define IOMUXC_PAD_PAD_GPIO_EMC_CR04 IOMUXC_32BASE03._0x0200
#define IOMUXC_PAD_PAD_GPIO_EMC_CR05 IOMUXC_32BASE03._0x0204
#define IOMUXC_PAD_PAD_GPIO_EMC_CR06 IOMUXC_32BASE03._0x0208
#define IOMUXC_PAD_PAD_GPIO_EMC_CR07 IOMUXC_32BASE03._0x020c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR08 IOMUXC_32BASE03._0x0210
#define IOMUXC_PAD_PAD_GPIO_EMC_CR09 IOMUXC_32BASE03._0x0214
#define IOMUXC_PAD_PAD_GPIO_EMC_CR10 IOMUXC_32BASE03._0x0218
#define IOMUXC_PAD_PAD_GPIO_EMC_CR11 IOMUXC_32BASE03._0x021c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR12 IOMUXC_32BASE03._0x0220
#define IOMUXC_PAD_PAD_GPIO_EMC_CR13 IOMUXC_32BASE03._0x0224
#define IOMUXC_PAD_PAD_GPIO_EMC_CR14 IOMUXC_32BASE03._0x0228
#define IOMUXC_PAD_PAD_GPIO_EMC_CR15 IOMUXC_32BASE03._0x022c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR16 IOMUXC_32BASE03._0x0230
#define IOMUXC_PAD_PAD_GPIO_EMC_CR17 IOMUXC_32BASE03._0x0234
#define IOMUXC_PAD_PAD_GPIO_EMC_CR18 IOMUXC_32BASE03._0x0238
#define IOMUXC_PAD_PAD_GPIO_EMC_CR19 IOMUXC_32BASE03._0x023c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR20 IOMUXC_32BASE03._0x0240
#define IOMUXC_PAD_PAD_GPIO_EMC_CR21 IOMUXC_32BASE03._0x0244
#define IOMUXC_PAD_PAD_GPIO_EMC_CR22 IOMUXC_32BASE03._0x0248
#define IOMUXC_PAD_PAD_GPIO_EMC_CR23 IOMUXC_32BASE03._0x024c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR24 IOMUXC_32BASE03._0x0250
#define IOMUXC_PAD_PAD_GPIO_EMC_CR25 IOMUXC_32BASE03._0x0254
#define IOMUXC_PAD_PAD_GPIO_EMC_CR26 IOMUXC_32BASE03._0x0258
#define IOMUXC_PAD_PAD_GPIO_EMC_CR27 IOMUXC_32BASE03._0x025c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR28 IOMUXC_32BASE03._0x0260
#define IOMUXC_PAD_PAD_GPIO_EMC_CR29 IOMUXC_32BASE03._0x0264
#define IOMUXC_PAD_PAD_GPIO_EMC_CR30 IOMUXC_32BASE03._0x0268
#define IOMUXC_PAD_PAD_GPIO_EMC_CR31 IOMUXC_32BASE03._0x026c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR32 IOMUXC_32BASE03._0x0270
#define IOMUXC_PAD_PAD_GPIO_EMC_CR33 IOMUXC_32BASE03._0x0274
#define IOMUXC_PAD_PAD_GPIO_EMC_CR34 IOMUXC_32BASE03._0x0278
#define IOMUXC_PAD_PAD_GPIO_EMC_CR35 IOMUXC_32BASE03._0x027c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR36 IOMUXC_32BASE03._0x0280
#define IOMUXC_PAD_PAD_GPIO_EMC_CR37 IOMUXC_32BASE03._0x0284
#define IOMUXC_PAD_PAD_GPIO_EMC_CR38 IOMUXC_32BASE03._0x0288
#define IOMUXC_PAD_PAD_GPIO_EMC_CR39 IOMUXC_32BASE03._0x028c
#define IOMUXC_PAD_PAD_GPIO_EMC_CR40 IOMUXC_32BASE03._0x0290
#define IOMUXC_PAD_PAD_GPIO_EMC_CR41 IOMUXC_32BASE03._0x0294
// SW_MUX_PAD_GPIO_AD_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR00 IOMUXC_32BASE03._0x0298
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR01 IOMUXC_32BASE03._0x029c
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR02 IOMUXC_32BASE03._0x02a0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR03 IOMUXC_32BASE03._0x02a4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR04 IOMUXC_32BASE03._0x02a8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR05 IOMUXC_32BASE03._0x02ac
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR06 IOMUXC_32BASE03._0x02b0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR07 IOMUXC_32BASE03._0x02b4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR08 IOMUXC_32BASE03._0x02b8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR09 IOMUXC_32BASE03._0x02bc
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR10 IOMUXC_32BASE03._0x02c0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR11 IOMUXC_32BASE03._0x02c4
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR12 IOMUXC_32BASE03._0x02c8
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR13 IOMUXC_32BASE03._0x02cc
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR14 IOMUXC_32BASE03._0x02d0
#define IOMUXC_PAD_PAD_GPIO_AD_B0_CR15 IOMUXC_32BASE03._0x02d4

// SW_MUX_PAD_GPIO_AD_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR00 IOMUXC_32BASE03._0x02d8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR01 IOMUXC_32BASE03._0x02dc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR02 IOMUXC_32BASE03._0x02e0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR03 IOMUXC_32BASE03._0x02e4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR04 IOMUXC_32BASE03._0x02e8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR05 IOMUXC_32BASE03._0x02ec
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR06 IOMUXC_32BASE03._0x02f0
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR07 IOMUXC_32BASE03._0x02f4
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR08 IOMUXC_32BASE03._0x02f8
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR09 IOMUXC_32BASE03._0x02fc
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR10 IOMUXC_32BASE03._0x0300
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR11 IOMUXC_32BASE03._0x0304
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR12 IOMUXC_32BASE03._0x0308
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR13 IOMUXC_32BASE03._0x030c
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR14 IOMUXC_32BASE03._0x0310
#define IOMUXC_PAD_PAD_GPIO_AD_B1_CR15 IOMUXC_32BASE03._0x0314

// SW_MUX_PAD_GPIO_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_B0_CR00 IOMUXC_32BASE03._0x0318
#define IOMUXC_PAD_PAD_GPIO_B0_CR01 IOMUXC_32BASE03._0x031c
#define IOMUXC_PAD_PAD_GPIO_B0_CR02 IOMUXC_32BASE03._0x0320
#define IOMUXC_PAD_PAD_GPIO_B0_CR03 IOMUXC_32BASE03._0x0324
#define IOMUXC_PAD_PAD_GPIO_B0_CR04 IOMUXC_32BASE03._0x0328
#define IOMUXC_PAD_PAD_GPIO_B0_CR05 IOMUXC_32BASE03._0x032c
#define IOMUXC_PAD_PAD_GPIO_B0_CR06 IOMUXC_32BASE03._0x0330
#define IOMUXC_PAD_PAD_GPIO_B0_CR07 IOMUXC_32BASE03._0x0334
#define IOMUXC_PAD_PAD_GPIO_B0_CR08 IOMUXC_32BASE03._0x0338
#define IOMUXC_PAD_PAD_GPIO_B0_CR09 IOMUXC_32BASE03._0x033c
#define IOMUXC_PAD_PAD_GPIO_B0_CR10 IOMUXC_32BASE03._0x0340
#define IOMUXC_PAD_PAD_GPIO_B0_CR11 IOMUXC_32BASE03._0x0344
#define IOMUXC_PAD_PAD_GPIO_B0_CR12 IOMUXC_32BASE03._0x0348
#define IOMUXC_PAD_PAD_GPIO_B0_CR13 IOMUXC_32BASE03._0x034c
#define IOMUXC_PAD_PAD_GPIO_B0_CR14 IOMUXC_32BASE03._0x0350
#define IOMUXC_PAD_PAD_GPIO_B0_CR15 IOMUXC_32BASE03._0x0354

// SW_MUX_PAD_GPIO_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_B1_CR00 IOMUXC_32BASE03._0x0358
#define IOMUXC_PAD_PAD_GPIO_B1_CR01 IOMUXC_32BASE03._0x035c
#define IOMUXC_PAD_PAD_GPIO_B1_CR02 IOMUXC_32BASE03._0x0360
#define IOMUXC_PAD_PAD_GPIO_B1_CR03 IOMUXC_32BASE03._0x0364
#define IOMUXC_PAD_PAD_GPIO_B1_CR04 IOMUXC_32BASE03._0x0368
#define IOMUXC_PAD_PAD_GPIO_B1_CR05 IOMUXC_32BASE03._0x036c
#define IOMUXC_PAD_PAD_GPIO_B1_CR06 IOMUXC_32BASE03._0x0370
#define IOMUXC_PAD_PAD_GPIO_B1_CR07 IOMUXC_32BASE03._0x0374
#define IOMUXC_PAD_PAD_GPIO_B1_CR08 IOMUXC_32BASE03._0x0378
#define IOMUXC_PAD_PAD_GPIO_B1_CR09 IOMUXC_32BASE03._0x037c
#define IOMUXC_PAD_PAD_GPIO_B1_CR10 IOMUXC_32BASE03._0x0380
#define IOMUXC_PAD_PAD_GPIO_B1_CR11 IOMUXC_32BASE03._0x0384
#define IOMUXC_PAD_PAD_GPIO_B1_CR12 IOMUXC_32BASE03._0x0388
#define IOMUXC_PAD_PAD_GPIO_B1_CR13 IOMUXC_32BASE03._0x038c
#define IOMUXC_PAD_PAD_GPIO_B1_CR14 IOMUXC_32BASE03._0x0390
#define IOMUXC_PAD_PAD_GPIO_B1_CR15 IOMUXC_32BASE03._0x0394

// SW_MUX_PAD_GPIO_SD_B0_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR00 IOMUXC_32BASE03._0x0398
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR01 IOMUXC_32BASE03._0x039c
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR02 IOMUXC_32BASE03._0x03a0
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR03 IOMUXC_32BASE03._0x03a4
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR04 IOMUXC_32BASE03._0x03a8
#define IOMUXC_PAD_PAD_GPIO_SD_B0_CR05 IOMUXC_32BASE03._0x03ac

// SW_MUX_PAD_GPIO_SD_B1_xx SW MUX Control Register
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR00 IOMUXC_32BASE03._0x03b0
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR01 IOMUXC_32BASE03._0x03b4
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR02 IOMUXC_32BASE03._0x03b8
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR03 IOMUXC_32BASE03._0x03bc
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR04 IOMUXC_32BASE03._0x03c0
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR05 IOMUXC_32BASE03._0x03c4
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR06 IOMUXC_32BASE03._0x03c8
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR07 IOMUXC_32BASE03._0x03cc
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR08 IOMUXC_32BASE03._0x03d0
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR09 IOMUXC_32BASE03._0x03d4
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR10 IOMUXC_32BASE03._0x03d8
#define IOMUXC_PAD_PAD_GPIO_SD_B1_CR11 IOMUXC_32BASE03._0x03dc

// 11.7 IOMUXC Memory Map/Register definition, DAISY Registers
// p.417 - p.426
#define IOMUXC_32BASE04 MAP_32BIT_REGISTER(0x401f83f4)
#define IOMUXC_ANATOP_USBOTG1_ID__SLCT_IN_DR IOMUXC_32BASE04._0x0000
#define IOMUXC_ANATOP_USBOTG2_ID__SLCT_IN_DR IOMUXC_32BASE04._0x0004
#define IOMUXC_CCM_PMIC_RDY__SLCT_IN_DR IOMUXC_32BASE04._0x0008

// CSI
#define IOMUXC_CSI_DATA02__SLCT_IN_DR IOMUXC_32BASE04._0x000c
#define IOMUXC_CSI_DATA03__SLCT_IN_DR IOMUXC_32BASE04._0x0010
#define IOMUXC_CSI_DATA04__SLCT_IN_DR IOMUXC_32BASE04._0x0014
#define IOMUXC_CSI_DATA05__SLCT_IN_DR IOMUXC_32BASE04._0x0018
#define IOMUXC_CSI_DATA06__SLCT_IN_DR IOMUXC_32BASE04._0x001c
#define IOMUXC_CSI_DATA07__SLCT_IN_DR IOMUXC_32BASE04._0x0020
#define IOMUXC_CSI_DATA08__SLCT_IN_DR IOMUXC_32BASE04._0x0024
#define IOMUXC_CSI_DATA09__SLCT_IN_DR IOMUXC_32BASE04._0x0028

#define IOMUXC_CSI_HSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x002c
#define IOMUXC_CSI_PIXCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0030
#define IOMUXC_CSI_VSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0034

// ENET
#define IOMUXC_ENET_IPG_CLKRMII__SLCT_IN_DR IOMUXC_32BASE04._0x0038
#define IOMUXC_ENET_MDIO__SLCT_IN_DR IOMUXC_32BASE04._0x003c
#define IOMUXC_ENET_RXDATA__SLCT_IN_DR00 IOMUXC_32BASE04._0x0040
#define IOMUXC_ENET_RXDATA__SLCT_IN_DR01 IOMUXC_32BASE04._0x0044
#define IOMUXC_ENET_RXEN__SLCT_IN_DR IOMUXC_32BASE04._0x0048 // RX ENABLE
#define IOMUXC_ENET_RXERR__SLCT_IN_DR IOMUXC_32BASE04._0x004c // RX ERROR
#define IOMUXC_ENET_TIMER__SLCT_IN_DR00 IOMUXC_32BASE04._0x0050
#define IOMUXC_ENET_TXCLK__SLCT_IN_DR00 IOMUXC_32BASE04._0x0054

// FLEX
#define IOMUXC_FLEXCAN1_RX__SLCT_IN_DR00 IOMUXC_32BASE04._0x0058
#define IOMUXC_FLEXCAN2_RX__SLCT_IN_DR00 IOMUXC_32BASE04._0x005c

#define IOMUXC_FLEXPWM01_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x0060
#define IOMUXC_FLEXPWM01_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x0064
#define IOMUXC_FLEXPWM01_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x0068
#define IOMUXC_FLEXPWM01_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x006c
#define IOMUXC_FLEXPWM01_PWMB03__SLCT_IN_DR IOMUXC_32BASE04._0x0070
#define IOMUXC_FLEXPWM01_PWMB00__SLCT_IN_DR IOMUXC_32BASE04._0x0074
#define IOMUXC_FLEXPWM01_PWMB01__SLCT_IN_DR IOMUXC_32BASE04._0x0078
#define IOMUXC_FLEXPWM01_PWMB02__SLCT_IN_DR IOMUXC_32BASE04._0x007c
#define IOMUXC_FLEXPWM02_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x0080
#define IOMUXC_FLEXPWM02_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x0084
#define IOMUXC_FLEXPWM02_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x0088
#define IOMUXC_FLEXPWM02_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x008c
#define IOMUXC_FLEXPWM02_PWMB03__SLCT_IN_DR IOMUXC_32BASE04._0x0090
#define IOMUXC_FLEXPWM02_PWMB00__SLCT_IN_DR IOMUXC_32BASE04._0x0094
#define IOMUXC_FLEXPWM02_PWMB01__SLCT_IN_DR IOMUXC_32BASE04._0x0098
#define IOMUXC_FLEXPWM02_PWMB02__SLCT_IN_DR IOMUXC_32BASE04._0x009c
#define IOMUXC_FLEXPWM04_PWMA00__SLCT_IN_DR IOMUXC_32BASE04._0x00a0
#define IOMUXC_FLEXPWM04_PWMA01__SLCT_IN_DR IOMUXC_32BASE04._0x00a4
#define IOMUXC_FLEXPWM04_PWMA02__SLCT_IN_DR IOMUXC_32BASE04._0x00a8
#define IOMUXC_FLEXPWM04_PWMA03__SLCT_IN_DR IOMUXC_32BASE04._0x00ac

#define IOMUXC_FLEXSPIA_DQS_SLCT_IN_DR IOMUXC_32BASE04._0x00b0

#define IOMUXC_FLEXSPIA_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x00b4
#define IOMUXC_FLEXSPIA_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x00b8
#define IOMUXC_FLEXSPIA_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x00bc
#define IOMUXC_FLEXSPIA_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x00c0
#define IOMUXC_FLEXSPIB_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x00c4
#define IOMUXC_FLEXSPIB_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x00c8
#define IOMUXC_FLEXSPIB_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x00cc
#define IOMUXC_FLEXSPIB_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x00d0

#define IOMUXC_FLEXSPIA_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x00d4

// LPI2C
#define IOMUXC_LPI2C1_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00d8
#define IOMUXC_LPI2C1_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00dc
#define IOMUXC_LPI2C2_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00e0
#define IOMUXC_LPI2C2_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00e4
#define IOMUXC_LPI2C3_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00e8
#define IOMUXC_LPI2C3_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00ec
#define IOMUXC_LPI2C4_SCL__SLCT_IN_DR IOMUXC_32BASE04._0x00f0
#define IOMUXC_LPI2C4_SDA__SLCT_IN_DR IOMUXC_32BASE04._0x00f4

// LPSPI
#define IOMUXC_LPSPI1_PCS0__SLCT_IN_DR IOMUXC_32BASE04._0x00f8
#define IOMUXC_LPSPI1_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x00fc
#define IOMUXC_LPSPI1_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0100
#define IOMUXC_LPSPI1_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0104

#define IOMUXC_LPSPI2_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0108
#define IOMUXC_LPSPI2_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x010c
#define IOMUXC_LPSPI2_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0110
#define IOMUXC_LPSPI2_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0114

#define IOMUXC_LPSPI3_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0118
#define IOMUXC_LPSPI3_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x011c
#define IOMUXC_LPSPI3_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0120
#define IOMUXC_LPSPI3_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0124

#define IOMUXC_LPSPI4_SCK0__SLCT_IN_DR IOMUXC_32BASE04._0x0128
#define IOMUXC_LPSPI4_SCK__SLCT_IN_DR IOMUXC_32BASE04._0x012c
#define IOMUXC_LPSPI4_SDI__SLCT_IN_DR IOMUXC_32BASE04._0x0130
#define IOMUXC_LPSPI4_SDO__SLCT_IN_DR IOMUXC_32BASE04._0x0134

// LPUART 2-8 (15)
#define IOMUXC2_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0138
#define IOMUXC2_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x013c
#define IOMUXC3_LPUART_CTS_B__SLCT_IN_DR IOMUXC_32BASE04._0x0140
#define IOMUXC3_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0144
#define IOMUXC3_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0148
#define IOMUXC4_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x014c
#define IOMUXC4_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0150
#define IOMUXC5_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0154
#define IOMUXC5_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0158
#define IOMUXC6_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x015c
#define IOMUXC6_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0160
#define IOMUXC7_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x0164
#define IOMUXC7_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0168
#define IOMUXC8_LPUART_RX__SLCT_IN_DR IOMUXC_32BASE04._0x016c
#define IOMUXC9_LPUART_TX__SLCT_IN_DR IOMUXC_32BASE04._0x0170

#define IOMUXC_NMI_SLCT_IN_DR IOMUXC_32BASE03._0x0174

// QTIMER (8)

#define IOMUXC_QTIMER2_TIMER0__SLCT_IN_DR IOMUXC_32BASE04._0x0178
#define IOMUXC_QTIMER2_TIMER1__SLCT_IN_DR IOMUXC_32BASE04._0x017c
#define IOMUXC_QTIMER2_TIMER2__SLCT_IN_DR IOMUXC_32BASE04._0x0180
#define IOMUXC_QTIMER2_TIMER3__SLCT_IN_DR IOMUXC_32BASE04._0x0184
#define IOMUXC_QTIMER3_TIMER0__SLCT_IN_DR IOMUXC_32BASE04._0x0188
#define IOMUXC_QTIMER3_TIMER1__SLCT_IN_DR IOMUXC_32BASE04._0x018c
#define IOMUXC_QTIMER3_TIMER2__SLCT_IN_DR IOMUXC_32BASE04._0x0190
#define IOMUXC_QTIMER3_TIMER3__SLCT_IN_DR IOMUXC_32BASE04._0x0194

// SAI1,SAI2 (15)
#define IOMUXC_SAI1_MCLK2__SLCT_IN_DR IOMUXC_32BASE04._0x0198
#define IOMUXC_SAI1_RX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x019c
#define IOMUXC_SAI1_RX_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01a0
#define IOMUXC_SAI1_RX_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x01a4
#define IOMUXC_SAI1_RX_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x01a8
#define IOMUXC_SAI1_RX_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x01ac
#define IOMUXC_SAI1_RX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01b0
#define IOMUXC_SAI1_TX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01b4
#define IOMUXC_SAI1_TX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01b8
#define IOMUXC_SAI2_MCLK2__SLCT_IN_DR IOMUXC_32BASE04._0x01bc
#define IOMUXC_SAI2_RX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01c0
#define IOMUXC_SAI2_RX_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01c4
#define IOMUXC_SAI2_RX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01c8
#define IOMUXC_SAI2_TX_BCLK__SLCT_IN_DR IOMUXC_32BASE04._0x01cc
#define IOMUXC_SAI2_TX_SYNC__SLCT_IN_DR IOMUXC_32BASE04._0x01d0
#define IOMUXC_SPDIF_IN__SLCT_IN_DR IOMUXC_32BASE04._0x01d4

// USB (2)
#define IOMUXC_USB_OTG2_OC__SLCT_IN_DR IOMUXC_32BASE04._0x01d8
#define IOMUXC_USB_OTG1_OC__SLCT_IN_DR IOMUXC_32BASE04._0x01dc

// USDHC (14)
#define IOMUXC_USDHC1_CD_B__SLCT_IN_DR IOMUXC_32BASE04._0x01e0
#define IOMUXC_USDHC1_WP__SLCT_IN_DR IOMUXC_32BASE04._0x01e4
#define IOMUXC_USDHC2_CLK__SLCT_IN_DR IOMUXC_32BASE04._0x01e8
#define IOMUXC_USDHC2_CD_B__SLCT_IN_DR IOMUXC_32BASE04._0x01ec
#define IOMUXC_USDHC2_CMD__SLCT_IN_DR IOMUXC_32BASE04._0x01f0
#define IOMUXC_USDHC2_DATA0__SLCT_IN_DR IOMUXC_32BASE04._0x01f4
#define IOMUXC_USDHC2_DATA1__SLCT_IN_DR IOMUXC_32BASE04._0x01f8
#define IOMUXC_USDHC2_DATA2__SLCT_IN_DR IOMUXC_32BASE04._0x01fc
#define IOMUXC_USDHC2_DATA3__SLCT_IN_DR IOMUXC_32BASE04._0x0200
#define IOMUXC_USDHC2_DATA4__SLCT_IN_DR IOMUXC_32BASE04._0x0204
#define IOMUXC_USDHC2_DATA5__SLCT_IN_DR IOMUXC_32BASE04._0x0208
#define IOMUXC_USDHC2_DATA6__SLCT_IN_DR IOMUXC_32BASE04._0x020c
#define IOMUXC_USDHC2_DATA7__SLCT_IN_DR IOMUXC_32BASE04._0x0210
#define IOMUXC_USDHC2_WP__SLCT_IN_DR IOMUXC_32BASE04._0x0214

// XBAR (20) p.423-p.424
#define IOMUXC_XBAR1_IN02__SLCT_IN_DR IOMUXC_32BASE04._0x0218
#define IOMUXC_XBAR1_IN03__SLCT_IN_DR IOMUXC_32BASE04._0x021c
#define IOMUXC_XBAR1_IN04__SLCT_IN_DR IOMUXC_32BASE04._0x0220
#define IOMUXC_XBAR1_IN05__SLCT_IN_DR IOMUXC_32BASE04._0x0224
#define IOMUXC_XBAR1_IN06__SLCT_IN_DR IOMUXC_32BASE04._0x0228
#define IOMUXC_XBAR1_IN07__SLCT_IN_DR IOMUXC_32BASE04._0x022c
#define IOMUXC_XBAR1_IN08__SLCT_IN_DR IOMUXC_32BASE04._0x0230
#define IOMUXC_XBAR1_IN09__SLCT_IN_DR IOMUXC_32BASE04._0x0234
#define IOMUXC_XBAR1_IN17__SLCT_IN_DR IOMUXC_32BASE04._0x0238
#define IOMUXC_XBAR1_IN18__SLCT_IN_DR IOMUXC_32BASE04._0x023c
#define IOMUXC_XBAR1_IN20__SLCT_IN_DR IOMUXC_32BASE04._0x0240
#define IOMUXC_XBAR1_IN22__SLCT_IN_DR IOMUXC_32BASE04._0x0244
#define IOMUXC_XBAR1_IN23__SLCT_IN_DR IOMUXC_32BASE04._0x0248
#define IOMUXC_XBAR1_IN24__SLCT_IN_DR IOMUXC_32BASE04._0x024c
#define IOMUXC_XBAR1_IN14__SLCT_IN_DR IOMUXC_32BASE04._0x0250
#define IOMUXC_XBAR1_IN15__SLCT_IN_DR IOMUXC_32BASE04._0x0254
#define IOMUXC_XBAR1_IN16__SLCT_IN_DR IOMUXC_32BASE04._0x0258
#define IOMUXC_XBAR1_IN25__SLCT_IN_DR IOMUXC_32BASE04._0x025c
#define IOMUXC_XBAR1_IN19__SLCT_IN_DR IOMUXC_32BASE04._0x0260
#define IOMUXC_XBAR1_IN23__SLCT_IN_DR IOMUXC_32BASE04._0x0264

// ENET2 (8)
#define IOMUXC_ENET2_IPG_CLK_RMII__SLCT_IN_DR IOMUXC_32BASE04._0x0318
#define IOMUXC_ENET2_IPP_IND_MAC0_MDIO__SLCT_IN_DR IOMUXC_32BASE04._0x031c
#define IOMUXC_ENET2_IPP_IND_MAC0_RXDATA0__SLCT_IN_DR IOMUXC_32BASE04._0x0320
#define IOMUXC_ENET2_IPP_IND_MAC0_RXDATA1__SLCT_IN_DR IOMUXC_32BASE04._0x0324
#define IOMUXC_ENET2_IPP_IND_MAC0_RXEN__SLCT_IN_DR IOMUXC_32BASE04._0x0328
#define IOMUXC_ENET2_IPP_IND_MAC0_RXERR__SLCT_IN_DR IOMUXC_32BASE04._0x032c
#define IOMUXC_ENET2_IPP_IND_MAC0_TIMER__SLCT_IN_DR IOMUXC_32BASE04._0x0330
#define IOMUXC_ENET2_IPP_IND_MAC0_TXCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0334

// FLEXSPI2 (11)
#define IOMUXC_FLEXSPI2_IPP_IND_DQS_FA__SLCT_IN_DR IOMUXC_32BASE04._0x0338
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0__SLCT_IN_DR IOMUXC_32BASE04._0x033c
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1__SLCT_IN_DR IOMUXC_32BASE04._0x0340
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2__SLCT_IN_DR IOMUXC_32BASE04._0x0344
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3__SLCT_IN_DR IOMUXC_32BASE04._0x0348
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT0__SLCT_IN_DR IOMUXC_32BASE04._0x034c
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT1__SLCT_IN_DR IOMUXC_32BASE04._0x0350
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT2__SLCT_IN_DR IOMUXC_32BASE04._0x0354
#define IOMUXC_FLEXSPI2_IPP_IND_IO_FB_BIT3__SLCT_IN_DR IOMUXC_32BASE04._0x0358
#define IOMUXC_FLEXSPI2_IPP_IND_SCK_FA__SLCT_IN_DR IOMUXC_32BASE04._0x035c
#define IOMUXC_FLEXSPI2_IPP_IND_SCK_FB__SLCT_IN_DR IOMUXC_32BASE04._0x0360

// GPT (6)
#define IOMUXC_GPT1_IPP_IND_CAPIN1__SLCT_IN_DR IOMUXC_32BASE04._0x0364
#define IOMUXC_GPT1_IPP_IND_CAPIN2__SLCT_IN_DR IOMUXC_32BASE04._0x0368
#define IOMUXC_GPT1_IPP_IND_CLKIN__SLCT_IN_DR IOMUXC_32BASE04._0x036c
#define IOMUXC_GPT2_IPP_IND_CAPIN1__SLCT_IN_DR IOMUXC_32BASE04._0x0370
#define IOMUXC_GPT2_IPP_IND_CAPIN2__SLCT_IN_DR IOMUXC_32BASE04._0x0374
#define IOMUXC_GPT2_IPP_IND_CLKIN__SLCT_IN_DR IOMUXC_32BASE04._0x0378

// SAI3 (6)
#define IOMUXC_SAI3_IPG_CLK_SAI_MCLK__SLCT_IN_DR IOMUXC_32BASE04._0x037c
#define IOMUXC_SAI3_IPP_IND_RXBCLK__SLCT_IN_DR IOMUXC_32BASE04._0x0380
#define IOMUXC_SAI3_IPP_IND_RXDATA__SLCT_IN_DR IOMUXC_32BASE04._0x0384
#define IOMUXC_SAI3_IPP_IND_RXDSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0388
#define IOMUXC_SAI3_IPP_IND_TXBCLK__SLCT_IN_DR IOMUXC_32BASE04._0x038c
#define IOMUXC_SAI3_IPP_IND_TXSYNC__SLCT_IN_DR IOMUXC_32BASE04._0x0390

// SEMC (1)
#define IOMUXC_SEMC_IPP_IND_DQS4__SLCT_IN_DR IOMUXC_32BASE04._0x0394

// CANFD (1)
#define IOMUXC_CANFD_IPP_IND_CANRX__SLCT_IN_DR IOMUXC_32BASE04._0x0398

//===

/**
 * @brief: GPIO Memory Map, 12.5.1, p.261
 * GPIOn base address: 401B_8000h + (n-1)×4000h, where n is from 1 to 4.
 * GPIO5 base address: 400C_0000h.
 * GPIOn base address: 4200_0000h + (n-6)×4000h, where n is from 6 to 9.
 *
 **/

#define GPIO_1_4_32BASE00 MAP_32BIT_REGISTER(0x401b8000)
#define GPIO_1_4_32BASE01 MAP_32BIT_REGISTER(0x401bc000)
#define GPIO_1_4_32BASE02 MAP_32BIT_REGISTER(0x401c0000)
#define GPIO_1_4_32BASE03 MAP_32BIT_REGISTER(0x401c4000)
#define GPIO_5_32BASE00 MAP_32BIT_REGISTER(0x400c0000)
#define GPIO_6_9_32BASE00 MAP_32BIT_REGISTER(0x42000000)
#define GPIO_6_9_32BASE01 MAP_32BIT_REGISTER(0x42004000)
#define GPIO_6_9_32BASE02 MAP_32BIT_REGISTER(0x42008000)
#define GPIO_6_9_32BASE03 MAP_32BIT_REGISTER(0x4200c000)
#define GPIO_6_9_32BASE04 MAP_32BIT_REGISTER(0x42010000)
#define GPIO_6_9_32BASE05 MAP_32BIT_REGISTER(0x42014000)

// GPIO1
#define GPIO1_DR GPIO_1_4_32BASE00._0x0000
#define GPIO1_DIRR GPIO_1_4_32BASE00._0x0004
#define GPIO1_PSR GPIO_1_4_32BASE00._0x0008
#define GPIO1_ICR1 GPIO_1_4_32BASE00._0x000c
#define GPIO1_ICR2 GPIO_1_4_32BASE00._0x0010
#define GPIO1_IMR GPIO_1_4_32BASE00._0x0014
#define GPIO1_ISR GPIO_1_4_32BASE00._0x0018
#define GPIO1_EDGE_SEL GPIO_1_4_32BASE00._0x001c
#define GPIO1_DR_SET GPIO_1_4_32BASE00._0x0084
#define GPIO1_DR_CLEAR GPIO_1_4_32BASE00._0x0088
#define GPIO1_DR_TOGGLE GPIO_1_4_32BASE00._0x008c

// GPIO2
#define GPIO2_DR GPIO_1_4_32BASE01._0x0000
#define GPIO2_DIRR GPIO_1_4_32BASE01._0x0004
#define GPIO2_PSR GPIO_1_4_32BASE01._0x0008
#define GPIO2_ICR1 GPIO_1_4_32BASE01._0x000c
#define GPIO2_ICR2 GPIO_1_4_32BASE01._0x0010
#define GPIO2_IMR GPIO_1_4_32BASE01._0x0014
#define GPIO2_ISR GPIO_1_4_32BASE01._0x0018
#define GPIO2_EDGE_SEL GPIO_1_4_32BASE01._0x001c
#define GPIO2_DR_SET GPIO_1_4_32BASE01._0x0084
#define GPIO2_DR_CLEAR GPIO_1_4_32BASE01._0x0088
#define GPIO2_DR_TOGGLE GPIO_1_4_32BASE01._0x008c

// GPIO3
#define GPIO3_DR GPIO_1_4_32BASE02._0x0000
#define GPIO3_DIRR GPIO_1_4_32BASE02._0x0004
#define GPIO3_PSR GPIO_1_4_32BASE02._0x0008
#define GPIO3_ICR1 GPIO_1_4_32BASE02._0x000c
#define GPIO3_ICR2 GPIO_1_4_32BASE02._0x0010
#define GPIO3_IMR GPIO_1_4_32BASE02._0x0014
#define GPIO3_ISR GPIO_1_4_32BASE02._0x0018
#define GPIO3_EDGE_SEL GPIO_1_4_32BASE02._0x001c
#define GPIO3_DR_SET GPIO_1_4_32BASE02._0x0084
#define GPIO3_DR_CLEAR GPIO_1_4_32BASE02._0x0088
#define GPIO3_DR_TOGGLE GPIO_1_4_32BASE02._0x008c

// GPIO4
#define GPIO4_DR GPIO_1_4_32BASE03._0x0000
#define GPIO4_DIRR GPIO_1_4_32BASE03._0x0004
#define GPIO4_PSR GPIO_1_4_32BASE03._0x0008
#define GPIO4_ICR1 GPIO_1_4_32BASE03._0x000c
#define GPIO4_ICR2 GPIO_1_4_32BASE03._0x0010
#define GPIO4_IMR GPIO_1_4_32BASE03._0x0014
#define GPIO4_ISR GPIO_1_4_32BASE03._0x0018
#define GPIO4_EDGE_SEL GPIO_1_4_32BASE03._0x001c
#define GPIO4_DR_SET GPIO_1_4_32BASE03._0x0084
#define GPIO4_DR_CLEAR GPIO_1_4_32BASE03._0x0088
#define GPIO4_DR_TOGGLE GPIO_1_4_32BASE03._0x008c

// GPIO5
#define GPIO5_DR GPIO_5_32BASE00._0x0000
#define GPIO5_DIRR GPIO_5_32BASE00._0x0004
#define GPIO5_PSR GPIO_5_32BASE00._0x0008
#define GPIO5_ICR1 GPIO_5_32BASE00._0x000c
#define GPIO5_ICR2 GPIO_5_32BASE00._0x0010
#define GPIO5_IMR GPIO_5_32BASE00._0x0014
#define GPIO5_ISR GPIO_5_32BASE00._0x0018
#define GPIO5_EDGE_SEL GPIO_5_32BASE00._0x001c
#define GPIO5_DR_SET GPIO_5_32BASE00._0x0084
#define GPIO5_DR_CLEAR GPIO_5_32BASE00._0x0088
#define GPIO5_DR_TOGGLE GPIO_5_32BASE00._0x008c

// GPIO6
#define GPIO6_DR GPIO_6_9_32BASE00._0x0000
#define GPIO6_DIRR GPIO_6_9_32BASE00._0x0004
#define GPIO6_PSR GPIO_6_9_32BASE00._0x0008
#define GPIO6_ICR1 GPIO_6_9_32BASE00._0x000c
#define GPIO6_ICR2 GPIO_6_9_32BASE00._0x0010
#define GPIO6_IMR GPIO_6_9_32BASE00._0x0014
#define GPIO6_ISR GPIO_6_9_32BASE00._0x0018
#define GPIO6_EDGE_SEL GPIO_6_9_32BASE00._0x001c
#define GPIO6_DR_SET GPIO_6_9_32BASE00._0x0084
#define GPIO6_DR_CLEAR GPIO_6_9_32BASE00._0x0088
#define GPIO6_DR_TOGGLE GPIO_6_9_32BASE00._0x008c

// GPIO7
#define GPIO7_DR GPIO_6_9_32BASE01._0x0000
#define GPIO7_DIRR GPIO_6_9_32BASE01._0x0004
#define GPIO7_PSR GPIO_6_9_32BASE01._0x0008
#define GPIO7_ICR1 GPIO_6_9_32BASE01._0x000c
#define GPIO7_ICR2 GPIO_6_9_32BASE01._0x0010
#define GPIO7_IMR GPIO_6_9_32BASE01._0x0014
#define GPIO7_ISR GPIO_6_9_32BASE01._0x0018
#define GPIO7_EDGE_SEL GPIO_6_9_32BASE01._0x001c
#define GPIO7_DR_SET GPIO_6_9_32BASE01._0x0084
#define GPIO7_DR_CLEAR GPIO_6_9_32BASE01._0x0088
#define GPIO7_DR_TOGGLE GPIO_6_9_32BASE01._0x008c

// GPIO8
#define GPIO8_DR GPIO_6_9_32BASE02._0x0000
#define GPIO8_DIRR GPIO_6_9_32BASE02._0x0004
#define GPIO8_PSR GPIO_6_9_32BASE02._0x0008
#define GPIO8_ICR1 GPIO_6_9_32BASE02._0x000c
#define GPIO8_ICR2 GPIO_6_9_32BASE02._0x0010
#define GPIO8_IMR GPIO_6_9_32BASE02._0x0014
#define GPIO8_ISR GPIO_6_9_32BASE02._0x0018
#define GPIO8_EDGE_SEL GPIO_6_9_32BASE02._0x001c
#define GPIO8_DR_SET GPIO_6_9_32BASE02._0x0084
#define GPIO8_DR_CLEAR GPIO_6_9_32BASE02._0x0088
#define GPIO8_DR_TOGGLE GPIO_6_9_32BASE02._0x008c

// GPIO9
#define GPIO9_DR GPIO_6_9_32BASE03._0x0000
#define GPIO9_DIRR GPIO_6_9_32BASE03._0x0004
#define GPIO9_PSR GPIO_6_9_32BASE03._0x0008
#define GPIO9_ICR1 GPIO_6_9_32BASE03._0x000c
#define GPIO9_ICR2 GPIO_6_9_32BASE03._0x0010
#define GPIO9_IMR GPIO_6_9_32BASE03._0x0014
#define GPIO9_ISR GPIO_6_9_32BASE03._0x0018
#define GPIO9_EDGE_SEL GPIO_6_9_32BASE03._0x001c
#define GPIO9_DR_SET GPIO_6_9_32BASE03._0x0084
#define GPIO9_DR_CLEAR GPIO_6_9_32BASE03._0x0088
#define GPIO9_DR_TOGGLE GPIO_6_9_32BASE03._0x008c

/**
 * @brief: CCM Memory Map, 14.7, p.1045
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 **/
#define CCM_BASE MAP_32BIT_REGISTER(0x400fc000)
#define CCM_C_CR CCM_BASE._0x0000 // Control Register
#define CCM_C_SR CCM_BASE._0x0008 // Read-Only, Status Register
#define CCM_C_CSR CCM_BASE._0x000c // CLock Switcher Register
#define CCM_C_ACRR CCM_BASE._0x0010 // Arm Clock Root Register
#define CCM_C_BCDR CCM_BASE._0x0014 // Bus Clock Divider Register
#define CCM_C_BCMR CCM_BASE._0x0018 // Bus Clock Multiplexer Register
#define CCM_C_SCMR1 CCM_BASE._0x001c // Serial Clock Multiplexer Register 1
#define CCM_C_SCMR2 CCM_BASE._0x0020 // Serial Clock Multiplexer Register 2

#define CCM_C_SCDR1 CCM_BASE._0x0024 // Serial Clock Divider Register 1
#define CCM_C_S1CDR CCM_BASE._0x0028 // Clock Divider Register 1
#define CCM_C_S2CDR CCM_BASE._0x002c // Clock Divider Register 2
#define CCM_C_DCDR CCM_BASE._0x0030 // D1 Clock Divider Register
#define CCM_C_SCDR2 CCM_BASE._0x0038 // Serial Clock Divider Register 2
#define CCM_C_SCDR3 CCM_BASE._0x003c // Serial Clock Divider Register 3
#define CCM_C_DHIPR                                                            \
  CCM_BASE._0x0048 // Read-Only, Divider Handshake In-Process Register
#define CCM_C_LPCR CCM_BASE._0x0054 // Lowe Power Control Register
#define CCM_C_ISR CCM_BASE._0x0058 // w1c, Interrupt Status Register
#define CCM_C_IMR CCM_BASE._0x005c // Interrupt Mask Register
#define CCM_C_COSR CCM_BASE._0x0060 // Clock Output Source Register
#define CCM_C_GPR CCM_BASE._0x0064 // General Purpose Register
#define CCM_C_CGR0 CCM_BASE._0x0068 // Clock Gating Register 0
#define CCM_C_CGR1 CCM_BASE._0x006c // Clock Gating Register 1
#define CCM_C_CGR2 CCM_BASE._0x0070 // Clock Gating Register 2
#define CCM_C_CGR3 CCM_BASE._0x0074 // Clock Gating Register 3
#define CCM_C_CGR4 CCM_BASE._0x0078 // Clock Gating Register 4
#define CCM_C_CGR5 CCM_BASE._0x007c // Clock Gating Register 5
#define CCM_C_CGR6 CCM_BASE._0x0080 // Clock Gating Register 6
#define CCM_C_CGR7 CCM_BASE._0x0084 // Clock Gating Register 7
#define CCM_C_MEOR CCM_BASE._0x0088 // Module Enable Overide Register

/**
 * @brief: CCM Analog Memory Map, 14.8, p.1096
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 * This section describes the registers for the analog PLLs.
 * The registers which have the same description are grouped within {}.
 * The register offsets for the various PLLs are:
 * •  ARM PLL: {0h000, 0h004, 0h008, 0h00C}.
 * •  USB1 PLL: {0h010, 0h014, 0h018, 0h01C}, {0h0F0, 0h0F4, 0h0F8, 0h0FC}.
 * •  System PLL: {0h030, 0h034, 0h038, 0h03C}, 0h040, 0h050, 0h060,
 *    {0h100,0h104,0h108, 0h10C}.
 * • Audio / Video PLL: {0h070, 0h074, 0h078, 0h07C},
 *    0h080, 0h090, {0h0A0, 0h0A4,0h0A8, 0h0AC}, 0h0B0, 0h0C0
 *
 **/
#define CCM_ANALOG_BASE MAP_32BIT_REGISTER(0x400d8000)
// ARM PLL
#define CCM_ANALOG_PLL_ARM CCM_ANALOG_BASE._0x0000
#define CCM_ANALOG_PLL_ARM_SET CCM_ANALOG_BASE._0x0004
#define CCM_ANALOG_PLL_ARM_CLR CCM_ANALOG_BASE._0x0008
#define CCM_ANALOG_PLL_ARM_TOG CCM_ANALOG_BASE._0x000c

// UBS1 PLL
#define CCM_ANALOG_PLL_USB1 CCM_ANALOG_BASE._0x0010
#define CCM_ANALOG_PLL_USB1_SET CCM_ANALOG_BASE._0x0014
#define CCM_ANALOG_PLL_USB1_CLR CCM_ANALOG_BASE._0x0018
#define CCM_ANALOG_PLL_USB1_TOG CCM_ANALOG_BASE._0x001c

// USB2 PLL
#define CCM_ANALOG_PLL_USB2 CCM_ANALOG_BASE._0x0020
#define CCM_ANALOG_PLL_USB2_SET CCM_ANALOG_BASE._0x0024
#define CCM_ANALOG_PLL_USB2_CLR CCM_ANALOG_BASE._0x0028
#define CCM_ANALOG_PLL_USB2_TOG CCM_ANALOG_BASE._0x002c

// ANALOG SYSTEM PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_PLL_SYS CCM_ANALOG_BASE._0x0030
#define CCM_ANALOG_PLL_SYS_SET CCM_ANALOG_BASE._0x0034
#define CCM_ANALOG_PLL_SYS_CLR CCM_ANALOG_BASE._0x0038
#define CCM_ANALOG_PLL_SYS_TOG CCM_ANALOG_BASE._0x003c
#define CCM_ANALOG_528M_PLL_SYS_SSR CCM_ANALOG_BASE._0x0040
#define CCM_NUMERATOR_528M_PLL_SYS_NUM CCM_ANALOG_BASE._0x0050
#define CCM_DENOMINATOR_528M_PLL_SYS_NUM CCM_ANALOG_BASE._0x0060

// ANALOG AUDIO PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_AUDIO_PLL CCM_ANALOG_BASE._0x0070
#define CCM_ANALOG_AUDIO_PLL_SET CCM_ANALOG_BASE._0x0074
#define CCM_ANALOG_AUDIO_PLL_CLR CCM_ANALOG_BASE._0x0078
#define CCM_ANALOG_AUDIO_PLL_TOG CCM_ANALOG_BASE._0x007c
#define CCM_ANALOG_AUDIO_PLL_NUM CCM_ANALOG_BASE._0x0080
#define CCM_ANALOG_AUDIO_PLL_DENOM CCM_ANALOG_BASE._0x0090

// ANALOG VIDEO PLL & NUMERATOR + DENOMINATOR
#define CCM_ANALOG_VIDEO_PLL CCM_ANALOG_BASE._0x00a0
#define CCM_ANALOG_VIDEO_PLL_SET CCM_ANALOG_BASE._0x00a4
#define CCM_ANALOG_VIDEO_PLL_CLR CCM_ANALOG_BASE._0x00a8
#define CCM_ANALOG_VIDEO_PLL_TOG CCM_ANALOG_BASE._0x00ac
#define CCM_ANALOG_VIDEO_PLL_NUM CCM_ANALOG_BASE._0x00b0
#define CCM_ANALOG_VIDEO_PLL_DENOM CCM_ANALOG_BASE._0x00c0

// ANALOG ETHERNET PLL  [0x00e0, 0x00ec]
#define CCM_ANALOG_PLL_ENET CCM_ANALOG_BASE._0x00e0
#define CCM_ANALOG_PLL_ENET_SET CCM_ANALOG_BASE._0x00e4
#define CCM_ANALOG_PLL_ENET_CLR CCM_ANALOG_BASE._0x00e8
#define CCM_ANALOG_PLL_ENET_TOG CCM_ANALOG_BASE._0x00ec

// Phase Fractional Divider 480MHz (PLL3) [0x00f0, 0x00fc]
#define CCM_ANALOG_PFD480 CCM_ANALOG_BASE._0x00f0
#define CCM_ANALOG_PFD480_SET CCM_ANALOG_BASE._0x00f4
#define CCM_ANALOG_PFD480_CLR CCM_ANALOG_BASE._0x00f8
#define CCM_ANALOG_PFD480_TOG CCM_ANALOG_BASE._0x00fc

// Phase Fractional Divider 528MHz (PLL2) [0x0100, 0x010c]
#define CCM_ANALOG_PFD528 CCM_ANALOG_BASE._0x0100
#define CCM_ANALOG_PFD528_SET CCM_ANALOG_BASE._0x0104
#define CCM_ANALOG_PFD528_CLR CCM_ANALOG_BASE._0x0108
#define CCM_ANALOG_PFD528_TOG CCM_ANALOG_BASE._0x010c

// MISC.  [0x0150, 0x017c]
#define CCM_ANALOG_MISC0 CCM_ANALOG_BASE._0x0150
#define CCM_ANALOG_MISC0_SET CCM_ANALOG_BASE._0x0154
#define CCM_ANALOG_MISC0_CLR CCM_ANALOG_BASE._0x0158
#define CCM_ANALOG_MISC0_TOG CCM_ANALOG_BASE._0x015c
#define CCM_ANALOG_MISC1 CCM_ANALOG_BASE._0x0160
#define CCM_ANALOG_MISC1_SET CCM_ANALOG_BASE._0x0164
#define CCM_ANALOG_MISC1_CLR CCM_ANALOG_BASE._0x0168
#define CCM_ANALOG_MISC1_TOG CCM_ANALOG_BASE._0x016c
#define CCM_ANALOG_MISC2 CCM_ANALOG_BASE._0x0170
#define CCM_ANALOG_MISC2_SET CCM_ANALOG_BASE._0x0174
#define CCM_ANALOG_MISC2_CLR CCM_ANALOG_BASE._0x0178
#define CCM_ANALOG_MISC2_TOG CCM_ANALOG_BASE._0x017c

/**
 * @brief: XTALOSC 24MHz, CRYSTAL OSCILLATOR, Memory Map/Register, 15.6, p.1142
 * The register reset values for CCM change depending on the boot configuration.
 * See Clocks at boot time for more information
 *
 **/
#define XOSC_BASE MAP_32BIT_REGISTER(0x400d8150)
#define XOSC_24M_MISC XOSC_BASE._0x0000
#define XOSC_24M_MISC_SET XOSC_BASE._0x0004
#define XOSC_24M_MISC_CLR XOSC_BASE._0x0008
#define XOSC_24M_MISC_TOG XOSC_BASE._0x000c

#define XOSC_24M_LOWPWR_CTRL XOSC_BASE._0x0120
#define XOSC_24M_LOWPWR_CTRL_SET XOSC_BASE._0x0124
#define XOSC_24M_LOWPWR_CTRL_CLR XOSC_BASE._0x0128
#define XOSC_24M_LOWPWR_CTRL_TOG XOSC_BASE._0x012c

#define XOSC_24M_OSC_CONF0 XOSC_BASE._0x0150
#define XOSC_24M_OSC_CONF0_SET XOSC_BASE._0x0154
#define XOSC_24M_OSC_CONF0_CLR XOSC_BASE._0x0158
#define XOSC_24M_OSC_CONF0_TOG XOSC_BASE._0x015c

#define XOSC_24M_OSC_CONF1 XOSC_BASE._0x0160
#define XOSC_24M_OSC_CONF1_SET XOSC_BASE._0x0164
#define XOSC_24M_OSC_CONF1_CLR XOSC_BASE._0x0168
#define XOSC_24M_OSC_CONF1_TOG XOSC_BASE._0x016c

#define XOSC_24M_OSC_CONF2 XOSC_BASE._0x0170
#define XOSC_24M_OSC_CONF2_SET XOSC_BASE._0x0174
#define XOSC_24M_OSC_CONF2_CLR XOSC_BASE._0x0178
#define XOSC_24M_OSC_CONF2_TOG XOSC_BASE._0x017c

/**
 * @brief: PMU Memory Map/Register, 16.6, p.1142
 * The register definitions that affect the behavior
 * of the digital LDO regulators follow.
 *
 * NOTE: Some of the registers are collections of bits that affect
 * multiple components on the chip. Those that are not pertinent
 * to this chapter have comments in the related register bitfields.
 * If a full description is desired, please consult the full
 * register programming reference in the related block
 *
 **/
#define PMU_BASE MAP_32BIT_REGISTER(0x400d8110)
#define PMU_REG_1P1 PMU_BASE._0x0000
#define PMU_REG_1P1_SET PMU_BASE._0x0004
#define PMU_REG_1P1_CLR PMU_BASE._0x0008
#define PMU_REG_1P1_TOG PMU_BASE._0x000c

#define PMU_REG_3P0 PMU_BASE._0x0010
#define PMU_REG_3P0_SET PMU_BASE._0x0014
#define PMU_REG_3P0_CLR PMU_BASE._0x0018
#define PMU_REG_3P0_TOG PMU_BASE._0x001c

#define PMU_REG_2P5 PMU_BASE._0x0020
#define PMU_REG_2P5_SET PMU_BASE._0x0024
#define PMU_REG_2P5_CLR PMU_BASE._0x0028
#define PMU_REG_2P5_TOG PMU_BASE._0x002c

#define PMU_REG_CORE PMU_BASE._0x0030
#define PMU_REG_CORE_SET PMU_BASE._0x0034
#define PMU_REG_CORE_CLR PMU_BASE._0x0038
#define PMU_REG_CORE_TOG PMU_BASE._0x003c

#define PMU_MISC0 PMU_BASE._0x0040
#define PMU_MISC0_SET PMU_BASE._0x0044
#define PMU_MISC0_CLR PMU_BASE._0x0048
#define PMU_MISC0_TOG PMU_BASE._0x004c

#define PMU_MISC1 PMU_BASE._0x0050
#define PMU_MISC1_SET PMU_BASE._0x0054
#define PMU_MISC1_CLR PMU_BASE._0x0058
#define PMU_MISC1_TOG PMU_BASE._0x005c

#define PMU_MISC2 PMU_BASE._0x0060
#define PMU_MISC2_SET PMU_BASE._0x0064
#define PMU_MISC2_CLR PMU_BASE._0x0068
#define PMU_MISC2_TOG PMU_BASE._0x006c

/**
 * @brief: (General Power Controller) GPC Memory Map/Register, 17.6, p.1190
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define GPC_BASE MAP_32BIT_REGISTER(0x400f4000)
#define GPC_ICTRL GPC_BASE._0x0000
#define GPC_IRQ_MR1 GPC_BASE._0x0008
#define GPC_IRQ_MR2 GPC_BASE._0x000c
#define GPC_IRQ_MR3 GPC_BASE._0x0010
#define GPC_IRQ_MR4 GPC_BASE._0x0014
#define GPC_IRQ_SR GPC_BASE._0x0018
#define GPC_IRQ_SR GPC_BASE._0x001c
#define GPC_IRQ_SR GPC_BASE._0x0020
#define GPC_IRQ_SR GPC_BASE._0x0024
#define GPC_IRQ_MR5 GPC_BASE._0x0034
#define GPC_IRQ_SR5 GPC_BASE._0x0038

/**
 * @brief: PGC Memory Map/Register, 17.7, p.1196
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define PGC_BASE MAP_32BIT_REGISTER(0x400f4220)
#define PGC_MEGA_CTRL PGC_BASE._0x0000
#define PGC_MEGA_PUPSCR PGC_BASE._0x0004
#define PGC_MEGA_PDNSCR PGC_BASE._0x0008
#define PGC_MEGA_SR PGC_BASE._0x000c
#define PGC_CPU_CTRL PGC_BASE._0x00a0
#define PGC_CPU_PUPSCR PGC_BASE._0x00a4
#define PGC_PDCSCR PGC_BASE._0x00a8
#define PGC_CPU_SR PGC_BASE._0x00ac

/**
 * @brief: DCDC Memory Map/Register, 18.7, p.1209
 * NOTE: Writes to GPC registers only takes effect in supervisor mode.
 *
 **/
#define DCDC_BASE MAP_32BIT_REGISTER(0x40080000)
#define DCDC_REG0 DCDC_BASE._0x0000
#define DCDC_REG1 DCDC_BASE._0x0004
#define DCDC_REG2 DCDC_BASE._0x0008
#define DCDC_REG3 DCDC_BASE._0x000c

/**
 * @brief: TEMPMON Memory Map/Register, 19.4, p.1224
 *
 **/
#define TEMPMON_BASE MAP_32BIT_REGISTER(0x400d8180)
#define TEMPMON_TEMPSENSE0 TEMPMON_BASE._0x0000
#define TEMPMON_TEMPSENSE0_SET TEMPMON_BASE._0x0004
#define TEMPMON_TEMPSENSE0_CLR TEMPMON_BASE._0x0008
#define TEMPMON_TEMPSENSE0_TOG TEMPMON_BASE._0x000c
#define TEMPMON_TEMPSENSE1 TEMPMON_BASE._0x0010
#define TEMPMON_TEMPSENSE1_SET TEMPMON_BASE._0x0014
#define TEMPMON_TEMPSENSE1_CLR TEMPMON_BASE._0x0018
#define TEMPMON_TEMPSENSE1_TOG TEMPMON_BASE._0x001c
#define TEMPMON_TEMPSENSE2 TEMPMON_BASE._0x0020
#define TEMPMON_TEMPSENSE2_SET TEMPMON_BASE._0x0024
#define TEMPMON_TEMPSENSE2_CLR TEMPMON_BASE._0x0028
#define TEMPMON_TEMPSENSE2_TOG TEMPMON_BASE._0x002c

/**
 * @brief: SVNS Memory Map/Register, 20.6.1, p.1224
 *
 **/
#define SVNS_BASE MAP_32BIT_REGISTER(0x400d4000)
#define SVNS_HP_LR SVNS_BASE._0x0000 // Lock Register
#define SVNS_HP_COMR SVNS_BASE._0x0004 // Command Register
#define SVNS_HP_CR SVNS_BASE._0x0008 // Control Register
#define SVNS_HP_ST SVNS_BASE._0x0014 // Status Register
#define SVNS_HP_RTCMR SVNS_BASE._0x0024 // Realtime Counter MSB Register
#define SVNS_HP_RTCLR SVNS_BASE._0x0028 // Realtime Counter LSB Register
#define SVNS_HP_TAMR SVNS_BASE._0x002c // Time Alarm MSB Register
#define SVNS_HP_TALR SVNS_BASE._0x0030 // Time Alarm LSB Register

#define SVNS_LP_LR SVNS_BASE._0x0034 // Lock Register
#define SVNS_LP_CR SVNS_BASE._0x0038 // Control Register
#define SVNS_LP_SR SVNS_BASE._0x004c // Status Register
#define SVNS_LP_SMCMR SVNS_BASE._0x005c // Secure Monotonic Counter MSB Register
#define SVNS_LP_SMCLR SVNS_BASE._0x0060 // Secure Monotonic Counter LSB Register
#define SVNS_LP_GPR0_LEGACY SVNS_BASE._0x0068 // GeneralPurposeRegister0 Legacy

#define SVNS_LP_GPR0_ALIAS SVNS_BASE._0x0090 // General Purpose Register0 alias
#define SVNS_LP_GPR1_ALIAS SVNS_BASE._0x0094 // General Purpose Register1 alias
#define SVNS_LP_GPR2_ALIAS SVNS_BASE._0x0098 // General Purpose Register2 alias
#define SVNS_LP_GPR3_ALIAS SVNS_BASE._0x009c // General Purpose Register3 alias

#define SVNS_LP_GPR0 SVNS_BASE._0x0100 // General Purpose Register0
#define SVNS_LP_GPR1 SVNS_BASE._0x0104 // General Purpose Register1
#define SVNS_LP_GPR2 SVNS_BASE._0x0108 // General Purpose Register2
#define SVNS_LP_GPR4 SVNS_BASE._0x010c // General Purpose Register3

#define SVNS_HP_VIDR1 SVNS_BASE._0x0bf8 // Version ID Register
#define SVNS_HP_VIDR2 SVNS_BASE._0x0bfc // Version ID Register

/**
 * @brief: SRC Memory Map/Register, 21.8, p.1224
 *
 **/
#define SRC_BASE MAP_32BIT_REGISTER(0x400f8000)
#define SRC_CR SRC_BASE._0x0000 // Control Register
#define SRC_BMR1 SRC_BASE._0x0004 // Boot Mode Register 1
#define SRC_RSR SRC_BASE._0x0008 // Reset Status Register
#define SRC_BMR2 SRC_BASE._0x001c // Boot Mode Register 2
#define SRC_GPR01 SRC_BASE._0x0020 // General Purpose Register 1
#define SRC_GPR02 SRC_BASE._0x0024 // General Purpose Register 2
#define SRC_GPR03 SRC_BASE._0x0028 // General Purpose Register 3
#define SRC_GPR04 SRC_BASE._0x002c // General Purpose Register 4
#define SRC_GPR05 SRC_BASE._0x0030 // General Purpose Register 5
#define SRC_GPR06 SRC_BASE._0x0034 // General Purpose Register 6
#define SRC_GPR07 SRC_BASE._0x0038 // General Purpose Register 7
#define SRC_GPR08 SRC_BASE._0x003c // General Purpose Register 8
#define SRC_GPR09 SRC_BASE._0x0040 // General Purpose Register 9
#define SRC_GPR10 SRC_BASE._0x0044 // General Purpose Register 10

/**
 * @brief: OTP Memory Map/Register, 23.6, p.1331
 *
 **/
#define OTP_BASE00 MAP_32BIT_REGISTER(0x401f4000)
#define OTP_CRSR SRC_BASE00._0x0000 // OTP Controller Control & Status
#define OTP_CRSR_SET SRC_BASE00._0x0004 // OTP Contr. Control & Status,SET
#define OTP_CRSR_CLR SRC_BASE00._0x0008 // OTP Contr. Control & Status,CLR
#define OTP_CRSR_TOG SRC_BASE00._0x000c // OTP Contr. Control & Status,TOG
#define OTP_TIMING SRC_BASE00._0x0010 // OTP Controller Timing Register
#define OTP_WDATA SRC_BASE00._0x0020 // OTP Controller Write Data Register
#define OTP_W_READCTRL SRC_BASE00._0x0030 // OTP Controller W/ Data Register
#define OTP_R_DR SRC_BASE00._0x0040 // OTP Controller R/ Data Register
#define OTP_SCS SRC_BASE00._0x0060 // Software Controllable Signal
#define OTP_SCS_SET SRC_BASE00._0x0064 // Software Controllable Signal Set
#define OTP_SCS_CLR SRC_BASE00._0x0068 // SoftwareControllableSignal Clear
#define OTP_SCS_TOG SRC_BASE00._0x006c // SoftwareControllableSignal Toggle
#define OTP_VERSION SRC_BASE00._0x0090 // OTP Controller Version Register
#define OTP_TIMING2 SRC_BASE00._0x0100 // OTP Controller Timing Register 2

#define OTP_BASE MAP_32BIT_REGISTER(0x401f4400)
#define OTP_GPR05 SRC_BASE01._0x0000 // Value of OTP Bank0 Word0 (LOCK)
#define OTP_GPR06 SRC_BASE01._0x0010 // Value of OTP Bank0 Word1 (CFG0)
#define OTP_GPR07 SRC_BASE01._0x0020 // Value of OTP Bank0 Word2 (CFG1)
#define OTP_GPR08 SRC_BASE01._0x0030 // Value of OTP Bank0 Word3 (CFG2)
#define OTP_GPR09 SRC_BASE01._0x0040 // Value of OTP Bank0 Word4 (CFG3)
#define OTP_GPR10 SRC_BASE01._0x0050 // Value of OTP Bank0 Word5 (CFG4)
#define OTP_GPR01 SRC_BASE01._0x0060 // Value of OTP Bank0 Word6 (CFG5)
#define OTP_GPR02 SRC_BASE01._0x0070 // Value of OTP Bank0 Word7 (CFG6)
#define OTP_GPR03 SRC_BASE01._0x00f0 // Value of OTP Bank1 Word7 (Analog info)

#define OTP_BASE00 MAP_32BIT_REGISTER(0x401f4600)
#define OTP_SJC_RESP0 SRC_BASE02._0x0000 // Value of OTP Bank4 Word0
#define OTP_SJC_RESP1 SRC_BASE02._0x0010 // Value of OTP Bank4 Word1
#define OTP_MAC0 SRC_BASE02._0x0020 // Value of OTP Bank4 Word2
#define OTP_MAC1 SRC_BASE02._0x0030 // Value of OTP Bank4 Word3
#define OTP_MAC2 SRC_BASE02._0x0040 // Value of OTP Bank4 Word4
#define OTP_GP1 SRC_BASE02._0x0060 // Value of OTP Bank4 Word6
#define OTP_GP2 SRC_BASE02._0x0070 // Value of OTP Bank4 Word7
#define OTP_B5W0_SW SRC_BASE02._0x0080 // Value of OTP Bank5 Word0
#define OTP_B5W5_MISC SRC_BASE02._0x00d0 // Value of OTP Bank5 Word5
#define OTP_B5W6_MISC SRC_BASE02._0x00e0 // Value of OTP Bank5 Word6
#define OTP_B7W0 SRC_BASE02._0x0280 // Value of OTP Bank7 Word0
#define OTP_B7W1 SRC_BASE02._0x0290 // Value of OTP Bank7 Word1
#define OTP_B7W2 SRC_BASE02._0x02a0 // Value of OTP Bank7 Word2
#define OTP_B7W3 SRC_BASE02._0x02b0 // Value of OTP Bank7 Word3

/**
 * @brief: SEMC Memory Map/Register, 25.4.1.1, p.1385
 *
 **/
#define SEMC_BASE00 MAP_32BIT_REGISTER(0x402f0000)
#define SEMC_MCR SEMC_BASE00._0x0000 // Module Control Register
#define SEMC_IOCR SEMC_BASE00._0x0004 // IO MUX Control Register
#define SEMC_BMCR0 SEMC_BASE00._0x0008 // Bus Master Control Register 0
#define SEMC_BMCR1 SEMC_BASE00._0x000c // Bus Master Control Register 1
#define SEMC_BR0 SEMC_BASE00._0x0010 // Base Register for SDRAMCS0
#define SEMC_BR1 SEMC_BASE00._0x0014 // Base Register for SDRAMCS1
#define SEMC_BR2 SEMC_BASE00._0x0018 // Base Register for SDRAMCS2
#define SEMC_BR3 SEMC_BASE00._0x001c // Base Register for SDRAMCS3
#define SEMC_BR4 SEMC_BASE00._0x0020 // Base Register for NAND Device
#define SEMC_BR5 SEMC_BASE00._0x0024 // Base Register for NOR Device
#define SEMC_BR6 SEMC_BASE00._0x0028 // Base Register for PSRAM
#define SEMC_BR7 SEMC_BASE00._0x002c // Base Register for DBI-B
#define SEMC_BR8 SEMC_BASE00._0x0030 // Base Register for NAND Device
#define SEMC_DLLCR SEMC_BASE00._0x0034 // DLL Control Register (DLLCR)
#define SEMC_BR8 SEMC_BASE00._0x0038 // Interrupt Enable Register (INTEN)
#define SEMC_BR8 SEMC_BASE00._0x003c // Interrupt Enable Register (INTR)
#define SEMC_SDRAMCR0 SEMC_BASE00._0x0040 // SDRAM control register 0
#define SEMC_SDRAMCR1 SEMC_BASE00._0x0044 // SDRAM control register 1
#define SEMC_SDRAMCR2 SEMC_BASE00._0x0048 // SDRAM control register 2
#define SEMC_SDRAMCR3 SEMC_BASE00._0x004c // SDRAM control register 3
#define SEMC_NANDCR0 SEMC_BASE00._0x0050 // NAND control register 0
#define SEMC_NANDCR1 SEMC_BASE00._0x0054 // NAND control register 1
#define SEMC_NANDCR2 SEMC_BASE00._0x0058 // NAND control register 2
#define SEMC_NANDCR3 SEMC_BASE00._0x005c // NAND control register 3
#define SEMC_NORCR0 SEMC_BASE00._0x0060 // NOR control register 0
#define SEMC_NORCR1 SEMC_BASE00._0x0064 // NOR control register 1
#define SEMC_NORCR2 SEMC_BASE00._0x0068 // NOR control register 2
#define SEMC_NORCR3 SEMC_BASE00._0x006c // NOR control register 3
#define SEMC_SRAMCR0 SEMC_BASE00._0x0070 // SRAM control register 0
#define SEMC_SRAMCR1 SEMC_BASE00._0x0074 // SRAM control register 1
#define SEMC_SRAMCR2 SEMC_BASE00._0x0078 // SRAM control register 2
#define SEMC_SRAMCR3 SEMC_BASE00._0x007c // SRAM control register 3
#define SEMC_DBICR0 SEMC_BASE00._0x0080 // DBI-B control register 0
#define SEMC_DBICR1 SEMC_BASE00._0x0084 // DBI-B control register 1
#define SEMC_IPCR0 SEMC_BASE00._0x0090 // IP Command control register 0 (IPCR0)
#define SEMC_IPCR1 SEMC_BASE00._0x0094 // IP Command control register 1 (IPCR1)
#define SEMC_IPCR2 SEMC_BASE00._0x0098 // IP Command control register 2 (IPCR2)
#define SEMC_IPCMD SEMC_BASE00._0x009c // IP Command register _ _ (IPCMD)
#define SEMC_IPTXDAT SEMC_BASE00._0x00a0 // TX DATA register (IPCOMD)
#define SEMC_IPRXDAT SEMC_BASE00._0x00b0 // RX DATA register (IPCOMD)
#define SEMC_STS00 SEMC_BASE00._0x00c0 // Status register 0 (STS00)
#define SEMC_STS01 SEMC_BASE00._0x00c4 // Status register 0 (STS01)
#define SEMC_STS02 SEMC_BASE00._0x00c8 // Status register 0 (STS02)
#define SEMC_STS03 SEMC_BASE00._0x00cc // Status register 0 (STS03)
#define SEMC_STS04 SEMC_BASE00._0x00d0 // Status register 0 (STS04)
#define SEMC_STS05 SEMC_BASE00._0x00d4 // Status register 0 (STS05)
#define SEMC_STS06 SEMC_BASE00._0x00d8 // Status register 0 (STS06)
#define SEMC_STS07 SEMC_BASE00._0x00dc // Status register 0 (STS07)
#define SEMC_STS08 SEMC_BASE00._0x00e0 // Status register 0 (STS08)
#define SEMC_STS09 SEMC_BASE00._0x00e4 // Status register 0 (STS09)
#define SEMC_STS10 SEMC_BASE00._0x00e8 // Status register 0 (STS10)
#define SEMC_STS11 SEMC_BASE00._0x00ec // Status register 0 (STS11)
#define SEMC_STS12 SEMC_BASE00._0x00f0 // Status register 0 (STS12)
#define SEMC_STS13 SEMC_BASE00._0x00f4 // Status register 0 (STS13)
#define SEMC_STS14 SEMC_BASE00._0x00f8 // Status register 0 (STS14)
#define SEMC_STS15 SEMC_BASE00._0x00fc // Status register 0 (STS15)

/**
 * @brief: uSDHC Memory Map/Register, 26.9.1, p.1553
 * This section includes the module memory map
 * and detailed descriptions of all registers.
 * See the table on p.1553 for the register memory map for the uSDHC.
 * All these registers only support 32-bit accesses.
 * Base address:
 * 402C_0000h uSDHC1,
 * 402C_4000h for uSDHC2
 **/
#define uSDHC1_BASE MAP_32BIT_REGISTER(0x402c0000) // uSDHC1
#define uSDHC2_BASE MAP_32BIT_REGISTER(0x402c4000) // uSDHC2

#define uSDHC1_DS_ADDR uSDHC1_BASE._0x0000 // DMA Systems Address
#define uSDHC2_DS_ADDR uSDHC2_BASE._0x0000 //
#define uSDHC1_BLK_ATTR uSDHC1_BASE._0x0004 // Block Attributes
#define uSDHC2_BLK_ATTR uSDHC2_BASE._0x0004 //
#define uSDHC1_CMD_ARG uSDHC1_BASE._0x0008 // Command Argument
#define uSDHC2_CMD_ARG uSDHC2_BASE._0x0008 //
#define uSDHC1_CMD_TX_TYPE uSDHC1_BASE._0x000c // Command Transfer Type
#define uSDHC2_CMD_TX_TYPE uSDHC2_BASE._0x000c //
#define uSDHC1_CMD_RSP0 uSDHC1_BASE._0x0010 // Command Response 0
#define uSDHC2_CMD_RSP0 uSDHC2_BASE._0x0010 //
#define uSDHC1_CMD_RSP1 uSDHC1_BASE._0x0014 // Command Response 1
#define uSDHC2_CMD_RSP1 uSDHC2_BASE._0x0014 //
#define uSDHC1_CMD_RSP2 uSDHC1_BASE._0x0018 // Command Response 2
#define uSDHC2_CMD_RSP2 uSDHC2_BASE._0x0018 //
#define uSDHC1_CMD_RSP3 uSDHC1_BASE._0x001c // Command Response 3
#define uSDHC2_CMD_RSP3 uSDHC2_BASE._0x001c //
#define uSDHC1_DATABUF_ACCSS_PORT uSDHC1_BASE._0x0020 // Data Buf. Access Port
#define uSDHC2_DATABUF_ACCSS_PORT uSDHC2_BASE._0x0020 //
#define uSDHC1_PRES_STATE uSDHC1_BASE._0x0024 // Present State
#define uSDHC2_PRES_STATE uSDHC2_BASE._0x0024 //
#define uSDHC1_PRTCL_CTRL uSDHC1_BASE._0x0028 // Protocol Control
#define uSDHC2_PRTCL_CTRL uSDHC2_BASE._0x0028 //
#define uSDHC1_SYS_CTRL uSDHC1_BASE._0x002c // System Control
#define uSDHC2_SYS_CTRL uSDHC2_BASE._0x002c //
#define uSDHC1_INT_STATUS uSDHC1_BASE._0x0030 // Interrupt Status
#define uSDHC2_INT_STATUS uSDHC2_BASE._0x0030 //
#define uSDHC1_INT_STATUS_EN uSDHC1_BASE._0x0034 // Interrupt Status Enable
#define uSDHC2_INT_STATUS_EN uSDHC2_BASE._0x0034 //
#define uSDHC1_INT_SIGNAL_EN uSDHC1_BASE._0x0038 // Interrupt Signal Enable
#define uSDHC2_INT_SIGNAL_EN uSDHC2_BASE._0x0038 //
#define uSDHC1_AUTOCMD12_ERRSTAT uSDHC1_BASE._0x003c // Auto CMD12 ERRSTAT
#define uSDHC2_AUTOCMD12_ERRSTAT uSDHC2_BASE._0x003c //
#define uSDHC1_HOST_CTRL_CAP uSDHC1_BASE._0x0040 // Host Ctrller Capabilities
#define uSDHC2_HOST_CTRL_CAP uSDHC2_BASE._0x0040 //
#define uSDHC1_WATMK_LVL uSDHC1_BASE._0x0044 // Watermark Level
#define uSDHC2_WATMK_LVL uSDHC2_BASE._0x0044 //
#define uSDHC1_MIX_CTRL uSDHC1_BASE._0x0048 // Mixer Control
#define uSDHC2_MIX_CTRL uSDHC2_BASE._0x0048 //
#define uSDHC1_FORCE_EVENT uSDHC1_BASE._0x0050 // Force Event
#define uSDHC2_FORCE_EVENT uSDHC2_BASE._0x0050 //
#define uSDHC1_ADMA_ERRSTAT uSDHC1_BASE._0x0054 // ADMA Err Stat Register
#define uSDHC2_ADMA_ERRSTAT uSDHC2_BASE._0x0054 //
#define uSDHC1_ADMA_SYS_ADDR uSDHC1_BASE._0x0058 // ADMA Systems Address
#define uSDHC2_ADMA_SYS_ADDR uSDHC2_BASE._0x0058 //
#define uSDHC1_DLL_CTRL uSDHC1_BASE._0x0060 // Delay Line Control
#define uSDHC2_DLL_CTRL uSDHC2_BASE._0x0060 //
#define uSDHC1_DLL_STAT uSDHC1_BASE._0x0064 // Delay Line Status, READONLY
#define uSDHC2_DLL_STAT uSDHC2_BASE._0x0064 //
#define uSDHC1_TUNE_CTRL_STAT uSDHC1_BASE._0x0068 // CLK Tuning ctrl & stat
#define uSDHC2_TUNE_CTRL_STAT uSDHC2_BASE._0x0068 //
#define uSDHC1_VEND_SPEC uSDHC1_BASE._0x00c0 //  Vendor Specific 2 Register
#define uSDHC2_VEND_SPEC uSDHC2_BASE._0x00c0 //
#define uSDHC1_MMC_BOOT uSDHC1_BASE._0x00c4 // MMC Boot Register
#define uSDHC2_MMC_BOOT uSDHC2_BASE._0x00c4 //
#define uSDHC1_VEND_SPEC2 uSDHC1_BASE._0x00c8 // Vendor Specific 2 Register
#define uSDHC2_VEND_SPEC2 uSDHC2_BASE._0x00c8 //
#define uSDHC1_TUNING_CTRL uSDHC1_BASE._0x00cc // DMA Systems Address
#define uSDHC2_TUNING_CTRL uSDHC2_BASE._0x00cc //

// Such a long list for FLEXSPI, put it into a seperate header
#include "flexspi_addr.h"

/**
 * @brief: ARM-Cortex M7 NIC-301 Memory Map/Register, 29.4, p.1744
 * The bus system is composed of five instances:
 * SIM_M7, SIM_PER, SIM_M,SIM_MAIN and SIM_EMS.
 * Three of them have GPV registers which are
 * helpful for busarbitration and performance.
 *
 * NOTE: This chip supports up to 16 interrupt priority levels,
 * i.e. itimplements bits [7:4] of each NVIC Interrupt Priority Register
 *
 * These registers are NOT implemented on chip:
 * IB registers. Address region control registers.
 *
 * These are the available registers:
 * SIM_MAIN registers,
 * SIM_M registers,
 * SIM_M7 registers,
 * Periphial ID registers.
 * (The peripheral ID registers are implemented in SIM_MAIN, SIM_M,
 * and SIM_M7.For more details, please see the below mentioned document.)
 *
 *
 * For detailed descriptions of these registers,
 * see the ARMdocument which is in Resources/teenssy4_1_docs/:
 * DI0397I_corelink_network_interconnect_nic301_r2p3_trm.pdf.
 **/

/**
 * @brief: 1.SIM_MAIN registers
 * The SIM_MAIN GPV base address is GPV0_BASE = 0x41000000. The
 * following registers are implemented in this NIC.
 * REGISTERGROUP_REGISTERNAME_MODULENAME_PORTNAME
 **/
#define GPV0_BASE MAP_32BIT_REGISTER(0x41000000)
#define SIM_MAIN_RESRVD_S GPV0_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV0_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV0_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV0_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV0_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV0_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV0_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV0_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV0_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV0_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV0_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV0_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV0_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV0_BASE._0x0000 + 0x0fffc)

#define SIM_MAIN_READQOS_LCD_MA2 (GPV0_BASE._0x0100 + 0x44000)
#define SIM_MAIN_READQOS_CSI_MA3 (GPV0_BASE._0x0100 + 0x45000)
#define SIM_MAIN_READQOS_PXP_MA4 (GPV0_BASE._0x0100 + 0x46000)

#define SIM_MAIN_WRITEQOS_LCD_MA2 (GPV0_BASE._0x0104 + 0x44000)
#define SIM_MAIN_WRITEQOS_CSI_MA3 (GPV0_BASE._0x0104 + 0x45000)
#define SIM_MAIN_WRITEQOS_PXP_MA4 (GPV0_BASE._0x0104 + 0x46000)

#define SIM_MAIN_FNMOD_LCD_MA2 (GPV0_BASE._0x0108 + 0x44000)
#define SIM_MAIN_FNMOD_CSI_MA3 (GPV0_BASE._0x0108 + 0x45000)
#define SIM_MAIN_FNMOD_PXP_MA4 (GPV0_BASE._0x0108 + 0x46000)

/**
 * @brief: 2.SIM_M registers
 * The SIM_M GPV base address is GPV1_BASE = 0x41100000. The
 * following registers are implemented in this NIC.
 **/
#define GPV1_BASE MAP_32BIT_REGISTER(0x41100000)

#define SIM_MAIN_RESRVD_S GPV1_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV1_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV1_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV1_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV1_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV1_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV1_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV1_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV1_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV1_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV1_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV1_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV1_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV1_BASE._0x0000 + 0x0ffc)

#define SIM_MAIN_FNMOD2_DCP_MC0 (GPV1_BASE._0x0024 + 0x42000)
#define SIM_MAIN_FNMODAHB_ENET_MC1 (GPV1_BASE._0x0028 + 0x43000)
#define SIM_MAIN_FNMODAHB_TEST_MC5 (GPV1_BASE._0x0028 + 0x47000)
#define SIM_MAIN_FNMODAHB_ENET2_MC6 (GPV1_BASE._0x0100 + 0x48000)

#define SIM_MAIN_READQOS_DCP_MC0 (GPV1_BASE._0x0100 + 0x42000)
#define SIM_MAIN_READQOS_ENET_MC1 (GPV1_BASE._0x0100 + 0x43000)
#define SIM_MAIN_READQOS_USBO2_MC2 (GPV1_BASE._0x0100 + 0x44000)
#define SIM_MAIN_READQOS_USDHC1_MC3 (GPV1_BASE._0x0100 + 0x45000)
#define SIM_MAIN_READQOS_USDHC2_MC4 (GPV1_BASE._0x0100 + 0x46000)
#define SIM_MAIN_READQOS_TEST_MC5 (GPV1_BASE._0x0100 + 0x47000)
#define SIM_MAIN_READQOS_ENET2_MC6 (GPV1_BASE._0x0100 + 0x48000)
//
#define SIM_MAIN_WRITEQOS_DCP_MC0 (GPV1_BASE._0x0104 + 0x42000)
#define SIM_MAIN_WRITEQOS_ENET_MC0 (GPV1_BASE._0x0104 + 0x43000)
#define SIM_MAIN_WRITEQOS_USBO2_MC0 (GPV1_BASE._0x0104 + 0x44000)
#define SIM_MAIN_WRITEQOS_USDHC1_MC0 (GPV1_BASE._0x0104 + 0x45000)
#define SIM_MAIN_WRITEQOS_USDHC2_MC0 (GPV1_BASE._0x0104 + 0x46000)
#define SIM_MAIN_WRITEQOS_TEST_MC0 (GPV1_BASE._0x0104 + 0x47000)
#define SIM_MAIN_WRITEQOS_ENET2_MC0 (GPV1_BASE._0x0104 + 0x48000)
//
#define SIM_MAIN_FNMOD_DCP_MC0 (GPV1_BASE._0x0108 + 0x42000)
#define SIM_MAIN_FNMOD_ENET_MC0 (GPV1_BASE._0x0108 + 0x43000)
#define SIM_MAIN_FNMOD_USBO2_MC0 (GPV1_BASE._0x0108 + 0x44000)
#define SIM_MAIN_FNMOD_USDHC1_MC0 (GPV1_BASE._0x0108 + 0x45000)
#define SIM_MAIN_FNMOD_USDHC2_MC0 (GPV1_BASE._0x0108 + 0x46000)
#define SIM_MAIN_FNMOD_TEST_MC0 (GPV1_BASE._0x0108 + 0x47000)
#define SIM_MAIN_FNMOD_ENET2_MC0 (GPV1_BASE._0x0108 + 0x48000)

/**
 * @brief: 3.SIM_M7 registers
 * The SIM_M7 GPV base address is GPV4_BASE = 0x41400000. The
 * following registers are implemented in this NIC.
 **/
#define GPV4_BASE MAP_32BIT_REGISTER(0x41400000)

#define SIM_MAIN_RESRVD_S GPV4_BASE._0x0000
#define SIM_MAIN_RESRVD_E (GPV4_BASE._0x0000 + 0x0fcc)
#define SIM_MAIN_4KB_JEP106_PID4 (GPV4_BASE._0x0000 + 0x0fd0)
#define SIM_MAIN_RESRVD_PID5 (GPV4_BASE._0x0000 + 0x0fd4)
#define SIM_MAIN_RESRVD_PID6 (GPV4_BASE._0x0000 + 0x0fd8)
#define SIM_MAIN_RESRVD_PID7 (GPV4_BASE._0x0000 + 0x0fdc)
#define SIM_MAIN_PARTNUM7_0_PID0 (GPV4_BASE._0x0000 + 0x0fe0)
#define SIM_MAIN_JEP106_PID1 (GPV4_BASE._0x0000 + 0x0fe4)
#define SIM_MAIN_JEP106_REV_PID2 (GPV4_BASE._0x0000 + 0x0fe8)
#define SIM_MAIN_AMBAGUI_PID3 (GPV4_BASE._0x0000 + 0x0fec)
#define SIM_MAIN_PREAMBLE_PID0 (GPV4_BASE._0x0000 + 0x0ff0)
#define SIM_MAIN_GIP_PID1 (GPV4_BASE._0x0000 + 0x0ff4)
#define SIM_MAIN_PREAMBLE_PID2 (GPV4_BASE._0x0000 + 0x0ff8)
#define SIM_MAIN_PREAMBLE_PID3 (GPV4_BASE._0x0000 + 0x0ffc)

#define SIM_MAIN_FNMODAHB_DMA_MB1 (GPV4_BASE._0x0028 + 0x43000)
#define SIM_MAIN_WRTIDEMARK_CM7_MB0 (GPV4_BASE._0x0040 + 0x42000)
#define SIM_MAIN_READQOS_CM7_MB0 (GPV4_BASE._0x0100 + 0x42000)
#define SIM_MAIN_READQOS_DMA_MB1 (GPV4_BASE._0x0100 + 0x43000)
#define SIM_MAIN_WRITEQOS_CM7_MB0 (GPV4_BASE._0x0104 + 0x42000)
#define SIM_MAIN_WRITEQOS_DMA_MB1 (GPV4_BASE._0x0104 + 0x43000)
#define SIM_MAIN_FNMOD_CM7_MB0 (GPV4_BASE._0x0108 + 0x42000)
#define SIM_MAIN_FNMOD_DMA_MB1 (GPV4_BASE._0x0108 + 0x43000)

/**
 * @brief: FlexRAM, Flexible Memory Array Map/Register
 * 31.4, p.1766
 * FlexRAM base address: 0x400b0000
 **/
#define FLEXRAM_BASE MAP_32BIT_REGISTER(0x400b0000)
#define FLEXRAM_TCM_CTRL FLEXRAM_BASE._0x0000
#define FLEXRAM_INT_STATUS FLEXRAM_BASE._0x0010
#define FLEXRAM_INT_STAT_EN FLEXRAM_BASE._0x0014
#define FLEXRAM_INT_SIG_EN FLEXRAM_BASE._0x0018

/**
 * @brief: AIPSTZ, AHB to IP Bridge Memory Map/Register
 * 32.8, p.1778
 *
 *  Each AIPSTZx_MPR specifies 16 4-bit fields defining the access privilege
 *  level associated with a bus master in the platform, as well as specifying
 *  whether write accesses from this master are bufferable shown in Table 32-5
 *
 * AIPSTZ base address: 0x4007c000
 **/
#define AIPSTZ_BASE00 MAP_32BIT_REGISTER(0x4007c000)
// Master Priviledge Register (AIPSTZ1_MPR)
#define AIPSTZ1_MPR AIPSTZ_BASE00._0x0000
#define AIPSTZ1_OPACR AIPSTZ_BASE00._0x0040
#define AIPSTZ1_OPACR1 AIPSTZ_BASE00._0x0044
#define AIPSTZ1_OPACR2 AIPSTZ_BASE00._0x0048
#define AIPSTZ1_OPACR3 AIPSTZ_BASE00._0x004c
#define AIPSTZ1_OPACR4 AIPSTZ_BASE00._0x0050

#define AIPSTZ_BASE01 MAP_32BIT_REGISTER(0x4017c000)
// Master Priviledge Register (AIPSTZ2_MPR)
#define AIPSTZ2_MPR AIPSTZ_BASE01._0x0000
#define AIPSTZ2_OPACR AIPSTZ_BASE01._0x0040
#define AIPSTZ2_OPACR1 AIPSTZ_BASE01._0x0044
#define AIPSTZ2_OPACR2 AIPSTZ_BASE01._0x0048
#define AIPSTZ2_OPACR3 AIPSTZ_BASE01._0x004c
#define AIPSTZ2_OPACR4 AIPSTZ_BASE01._0x0050

#define AIPSTZ_BASE02 MAP_32BIT_REGISTER(0x4027c000)
// Master Priviledge Register (AIPSTZ3_MPR)
#define AIPSTZ3_MPR AIPSTZ_BASE02._0x0000
#define AIPSTZ3_OPACR AIPSTZ_BASE02._0x0040
#define AIPSTZ3_OPACR1 AIPSTZ_BASE02._0x0044
#define AIPSTZ3_OPACR2 AIPSTZ_BASE02._0x0048
#define AIPSTZ3_OPACR3 AIPSTZ_BASE02._0x004c
#define AIPSTZ3_OPACR4 AIPSTZ_BASE02._0x0050

#define AIPSTZ_BASE03 MAP_32BIT_REGISTER(0x4037c000)
// Master Priviledge Register (AIPSTZ4_MPR)
#define AIPSTZ4_MPR AIPSTZ_BASE03._0x0000
#define AIPSTZ4_OPACR AIPSTZ_BASE03._0x0040
#define AIPSTZ4_OPACR1 AIPSTZ_BASE03._0x0044
#define AIPSTZ4_OPACR2 AIPSTZ_BASE03._0x0048
#define AIPSTZ4_OPACR3 AIPSTZ_BASE03._0x004c
#define AIPSTZ4_OPACR4 AIPSTZ_BASE03._0x0050

/**
 * @brief: CSI, CMOS Sensor Interface Memory Map/Register
 * 34.8, p.1818
 * CSI base address: 0x402bc000
 **/
#define CSI_BASE MAP_32BIT_REGISTER(0x402bc000)
#define CSI_CR1 CSI_BASE._0x0000
#define CSI_CR2 CSI_BASE._0x0004
#define CSI_CR3 CSI_BASE._0x0008
#define CSI_STATFIFO CSI_BASE._0x000c
#define CSI_RXFIFO CSI_BASE._0x0010
#define CSI_RXCOUNT CSI_BASE._0x0014
#define CSI_SR CSI_BASE._0x0018
#define CSI_DMA_SAR_STATFIFO CSI_BASE._0x0020
#define CSI_DMA_TSR_STATFIFO CSI_BASE._0x0024
#define CSI_DMA_TSR_FB1 CSI_BASE._0x0028
#define CSI_DMA_TSR_FB2 CSI_BASE._0x002c
#define CSI_BUF_PARAMR CSI_BASE._0x0030
#define CSI_IMG_PARAMR CSI_BASE._0x0034
#define CSI_CR18 CSI_BASE._0x0048
#define CSI_CR19 CSI_BASE._0x004c

/**
 * @brief: LCDIF, Enhanced LCD Interface Memory Map/Register
 * 35.7, p.1861
 *
 *
 * Some of the LCDIF registers (XXX_SET, XXX_CLR, and XXX_TOG)
 * allow direct bitfield masking and access.
 * •  When writing 1 to XXX_SET bit fields, these registers allow
 *    setting the masked 1 bitfields, while keeping unchanged all
 *    bit fields which remain on 0 logic state.

 * •  When writing 1 to XXX_CLR bit fields, these registers allow
 *    clearing the masked 1bit fields, while keeping unchanged all
 *    other bit fields which remained on 0 logicstate.
 *
 * •  When writing 1 to XXX_TOG bit fields, these registers allow
 *    inverting the logicstate of all masked 1 bit fields, while
 *    they keep unchanged the remaining bit fields
 *    which were kept on 0 logic state.
 *
 * LCDIF base address: 0x402b8000
 **/
#define LCDIF_BASE00 MAP_32BIT_REGISTER(0x402b8000)
#define LCDIF_CTRL0 LCDIF_BASE00._0x0000
#define LCDIF_CTRL0_SET LCDIF_BASE00._0x0004
#define LCDIF_CTRL0_CLR LCDIF_BASE00._0x0008
#define LCDIF_CTRL0_TOG LCDIF_BASE00._0x000c

#define LCDIF_CTRL1 LCDIF_BASE00._0x0010
#define LCDIF_CTRL1_SET LCDIF_BASE00._0x0014
#define LCDIF_CTRL1_CLR LCDIF_BASE00._0x0018
#define LCDIF_CTRL1_TOG LCDIF_BASE00._0x001c

#define LCDIF_CTRL2 LCDIF_BASE00._0x0020
#define LCDIF_CTRL2_SET LCDIF_BASE00._0x0024
#define LCDIF_CTRL2_CLR LCDIF_BASE00._0x0028
#define LCDIF_CTRL2_TOG LCDIF_BASE00._0x002c

// LCDIF Horizontal and Certical Valid Data Count Register
#define LCDIF_TX_COUNT LCDIF_BASE00._0x0030

// LCD Interface Current Buffer Address Register
#define LCDIF_CUR_BUF LCDIF_BASE00._0x0040

// LCD Interface Next Buffer Address Register
#define LCDIF_NEXT_BUF LCDIF_BASE00._0x0060

// LCDIF VSYNC Mode and Dotclk Mode Control Register 0
#define LCDIF_VDCTRL0 LCDIF_BASE00._0x0070
#define LCDIF_VDCTRL0_SET LCDIF_BASE00._0x0074
#define LCDIF_VDCTRL0_CLR LCDIF_BASE00._0x0078
#define LCDIF_VDCTRL0_TOG LCDIF_BASE00._0x007c

// LCDIF VSYNC Mode and Dotclk Mode Control Register [1,4]
#define LCDIF_VDCTRL1 LCDIF_BASE00._0x0080
#define LCDIF_VDCTRL2 LCDIF_BASE00._0x0090
#define LCDIF_VDCTRL3 LCDIF_BASE00._0x00a0
#define LCDIF_VDCTRL4 LCDIF_BASE00._0x00b0

// Bus Master Error Status Register
#define LCDIF_BM_ERRSTAT LCDIF_BASE00._0x0190

// CRC and LCD Interface Status Registers
#define LCDIF_CRC_SR LCDIF_BASE00._0x01a0
#define LCDIF_SR LCDIF_BASE00._0x01b0

// LCDIF Pigeon Mode Control Registers
#define LCDIF_PIGEONCTRL0 LCDIF_BASE00._0x0380
#define LCDIF_PIGEONCTRL0_SET LCDIF_BASE00._0x0384
#define LCDIF_PIGEONCTRL0_CLR LCDIF_BASE00._0x0388
#define LCDIF_PIGEONCTRL0_TOG LCDIF_BASE00._0x038c

#define LCDIF_PIGEONCTRL1 LCDIF_BASE00._0x0390
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE00._0x0394
#define LCDIF_PIGEONCTRL1_CLR LCDIF_BASE00._0x0398
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE00._0x039c

#define LCDIF_PIGEONCTRL2 LCDIF_BASE00._0x03a0
#define LCDIF_PIGEONCTRL2_SET LCDIF_BASE00._0x03a4
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE00._0x03a8
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE00._0x03ac

#define LCDIF_BASE01 MAP_32BIT_REGISTER(0x402b8800)
#define LCDIF_PIGEON_0_0 LCDIF_BASE01._0x0000
#define LCDIF_PIGEON_0_1 LCDIF_BASE01._0x0010
#define LCDIF_PIGEON_0_2 LCDIF_BASE01._0x0020

#define LCDIF_PIGEON_1_0 LCDIF_BASE01._0x0040
#define LCDIF_PIGEON_1_1 LCDIF_BASE01._0x0050
#define LCDIF_PIGEON_1_2 LCDIF_BASE01._0x0060

#define LCDIF_PIGEON_2_0 LCDIF_BASE01._0x0080
#define LCDIF_PIGEON_2_1 LCDIF_BASE01._0x0090
#define LCDIF_PIGEON_2_2 LCDIF_BASE01._0x00a0

#define LCDIF_PIGEON_3_0 LCDIF_BASE01._0x00c0
#define LCDIF_PIGEON_3_1 LCDIF_BASE01._0x00d0
#define LCDIF_PIGEON_3_2 LCDIF_BASE01._0x00e0

#define LCDIF_PIGEON_4_0 LCDIF_BASE01._0x0100
#define LCDIF_PIGEON_4_1 LCDIF_BASE01._0x0110
#define LCDIF_PIGEON_4_2 LCDIF_BASE01._0x0120

#define LCDIF_PIGEON_5_0 LCDIF_BASE01._0x0140
#define LCDIF_PIGEONCTRL1 LCDIF_BASE01._0x0150
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE01._0x0160

#define LCDIF_PIGEON_6_0 LCDIF_BASE01._0x0180
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE01._0x0190
#define LCDIF_PIGEONCTRL2 LCDIF_BASE01._0x01a0

#define LCDIF_PIGEON_7_0 LCDIF_BASE01._0x01c0
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE01._0x01d0
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE01._0x01e0

#define LCDIF_PIGEON_8_0 LCDIF_BASE01._0x0200
#define LCDIF_PIGEONCTRL0_SET LCDIF_BASE01._0x0210
#define LCDIF_PIGEONCTRL0_CLR LCDIF_BASE01._0x0220

#define LCDIF_PIGEON_9_0 LCDIF_BASE01._0x0240
#define LCDIF_PIGEONCTRL1 LCDIF_BASE01._0x0250
#define LCDIF_PIGEONCTRL1_SET LCDIF_BASE01._0x0260

#define LCDIF_PIGEON_10_0 LCDIF_BASE01._0x0280
#define LCDIF_PIGEONCTRL1_TOG LCDIF_BASE01._0x0290
#define LCDIF_PIGEONCTRL2 LCDIF_BASE01._0x02a0

#define LCDIF_PIGEON_11_0 LCDIF_BASE01._0x02c0
#define LCDIF_PIGEONCTRL2_CLR LCDIF_BASE01._0x02d0
#define LCDIF_PIGEONCTRL2_TOG LCDIF_BASE01._0x02e0

#define LCDIF_LUT_CTRL LCDIF_BASE01._0x0300
#define LCDIF_LUT0_ADDR LCDIF_BASE01._0x0310
#define LCDIF_LUT0_DATA LCDIF_BASE01._0x0320
#define LCDIF_LUT1_ADDR LCDIF_BASE01._0x0340
#define LCDIF_LUT1_DATA LCDIF_BASE01._0x0350

/**
 * @brief: PXP, PiXel Pipeline Memory Map/Register
 * 36.8, p.1923
 * PXP base address: 0x402b4000
 **/
#define PXP_BASE00 MAP_32BIT_REGISTER(0x402b4000)
#define PXP_CTRL0 PXP_BASE00._0x0000
#define PXP_CTRL0_SET PXP_BASE00._0x0004
#define PXP_CTRL0_CLR PXP_BASE00._0x0008
#define PXP_CTRL0_TOG PXP_BASE00._0x000c

#define PXP_STAT PXP_BASE00._0x0010
#define PXP_STAT_SET PXP_BASE00._0x0014
#define PXP_STAT_CLR PXP_BASE00._0x0018
#define PXP_STAT_TOG PXP_BASE00._0x001c

#define PXP_OUTBUF_CR PXP_BASE00._0x0020
#define PXP_OUTBUF_CR_SET PXP_BASE00._0x0024
#define PXP_OUTBUF_CR_CLR PXP_BASE00._0x0028
#define PXP_OUTBUF_CR_TOG PXP_BASE00._0x002c

#define PXP_OUT_FRAMBUF PXP_BASE00._0x0030
#define PXP_OUT_FRAMBUF2 PXP_BASE00._0x0040
#define PXP_OUT_BUF_PITCH PXP_BASE00._0x0050
#define PXP_OUT_LRC PXP_BASE00._0x0060

#define PXP_OUT_PS_ULC PXP_BASE00._0x0070
#define PXP_OUT_PS_LRC PXP_BASE00._0x0080
#define PXP_OUT_AS_ULC PXP_BASE00._0x0090
#define PXP_OUT_AS_LRC PXP_BASE00._0x00a0

#define PXP_PS_CTRL PXP_BASE00._0x00b0
#define PXP_PS_CTRL_SET PXP_BASE00._0x00b4
#define PXP_PS_CTRL_CLR PXP_BASE00._0x00b8
#define PXP_PS_CTRL_TOG PXP_BASE00._0x00bc

#define PXP_IN_PS_BUF PXP_BASE00._0x00c0
#define PXP_PS_UBUF PXP_BASE00._0x00d0
#define PXP_IN_VBUF PXP_BASE00._0x00e0
#define PXP_PS_PITCH PXP_BASE00._0x00f0

#define PXP_PS_BG PXP_BASE00._0x0100
#define PXP_PS_SCALE PXP_BASE00._0x0110
#define PXP_PS_OFFSET PXP_BASE00._0x0120
#define PXP_PS_CLRKEYLOW PXP_BASE00._0x0130

#define PXP_PS_CLRKEYHIGH PXP_BASE00._0x0140
#define PXP_AS_CTRL PXP_BASE00._0x0150
#define PXP_AS_BUF PXP_BASE00._0x0160
#define PXP_AS_PITCH PXP_BASE00._0x0170

#define PXP_AS_CLRKEYLOW PXP_BASE00._0x0180
#define PXP_AS_CLRKEYHIGH PXP_BASE00._0x0190

#define PXP_CSC1_COEF0 PXP_BASE00._0x01a0
#define PXP_CSC1_COEF1 PXP_BASE00._0x01b0
#define PXP_CSC1_COEF2 PXP_BASE00._0x01c0

#define PXP_POWER PXP_BASE00._0x0320
#define PXP_NEXT (PXP_BASE00._0x0100 + 0x0300)
#define PXP_PORTER_DUFF_CTRL (PXP_BASE00._0x0100 + 0x0340)

/**
 * @brief: SAI, Synchrounous Audio Interface Memory Map/Register
 * 38.5, p.1981
 * SAI1 base address: 0x40384000
 * SAI2 base address: 0x40388000
 * SAI3 base address: 0x4038c000
 **/
#define SAI1_BASE00 MAP_32BIT_REGISTER(0x40384000)
#define SAI2_BASE00 MAP_32BIT_REGISTER(0x40388000)
#define SAI3_BASE00 MAP_32BIT_REGISTER(0x4038c000)

// SAI1
#define SAI1_VERID SAI1_BASE00._0x0000
#define SAI1_PARAMR SAI1_BASE00._0x0004
// TX ADDRESSES
#define SAI1_TX_CR SAI1_BASE00._0x0008
#define SAI1_TX_CONFR1 SAI1_BASE00._0x000c
#define SAI1_TX_CONFR2 SAI1_BASE00._0x0010
#define SAI1_TX_CONFR3 SAI1_BASE00._0x0014
#define SAI1_TX_CONFR4 SAI1_BASE00._0x0018
#define SAI1_TX_CONFR5 SAI1_BASE00._0x001c
#define SAI1_TX_DR0 SAI1_BASE00._0x0020
#define SAI1_TX_DR1 SAI1_BASE00._0x0024
#define SAI1_TX_DR2 SAI1_BASE00._0x0028
#define SAI1_TX_DR3 SAI1_BASE00._0x002c
#define SAI1_TX_FR0 SAI1_BASE00._0x0040
#define SAI1_TX_FR1 SAI1_BASE00._0x0044
#define SAI1_TX_FR2 SAI1_BASE00._0x0048
#define SAI1_TX_FR3 SAI1_BASE00._0x004c
#define SAI1_TX_MR SAI1_BASE00._0x0060
// RX ADDRESSES
#define SAI1_RX_CR SAI1_BASE00._0x0088
#define SAI1_RX_CONFR1 SAI1_BASE00._0x008c
#define SAI1_RX_CONFR2 SAI1_BASE00._0x0090
#define SAI1_RX_CONFR3 SAI1_BASE00._0x0094
#define SAI1_RX_CONFR4 SAI1_BASE00._0x0098
#define SAI1_RX_CONFR5 SAI1_BASE00._0x009c
#define SAI1_RX_DR0 SAI1_BASE00._0x00a0
#define SAI1_RX_DR1 SAI1_BASE00._0x00a4
#define SAI1_RX_DR2 SAI1_BASE00._0x00a8
#define SAI1_RX_DR3 SAI1_BASE00._0x00ac
#define SAI1_RX_FR0 SAI1_BASE00._0x00c0
#define SAI1_RX_FR1 SAI1_BASE00._0x00c4
#define SAI1_RX_FR2 SAI1_BASE00._0x00c8
#define SAI1_RX_FR3 SAI1_BASE00._0x00cc
#define SAI1_RX_MR SAI1_BASE00._0x00e0

// SAI2
#define SAI2_BASE00 MAP_32BIT_REGISTER(0x40388000)
#define SAI2_VERID SAI2_BASE00._0x0000
#define SAI2_PARAMR SAI2_BASE00._0x0004
// TX ADDRESSES
#define SAI2_TX_CR SAI2_BASE00._0x0008
#define SAI2_TX_CONFR1 SAI2_BASE00._0x000c
#define SAI2_TX_CONFR2 SAI2_BASE00._0x0010
#define SAI2_TX_CONFR3 SAI2_BASE00._0x0014
#define SAI2_TX_CONFR4 SAI2_BASE00._0x0018
#define SAI2_TX_CONFR5 SAI2_BASE00._0x001c
#define SAI2_TX_DR0 SAI2_BASE00._0x0020
#define SAI2_TX_DR1 SAI2_BASE00._0x0024
#define SAI2_TX_DR2 SAI2_BASE00._0x0028
#define SAI2_TX_DR3 SAI2_BASE00._0x002c
#define SAI2_TX_FR0 SAI2_BASE00._0x0040
#define SAI2_TX_FR1 SAI2_BASE00._0x0044
#define SAI2_TX_FR2 SAI2_BASE00._0x0048
#define SAI2_TX_FR3 SAI2_BASE00._0x004c
#define SAI2_TX_MR SAI2_BASE00._0x0060
// RX ADDRESSES
#define SAI2_RX_CR SAI2_BASE00._0x0088
#define SAI2_RX_CONFR1 SAI2_BASE00._0x008c
#define SAI2_RX_CONFR2 SAI2_BASE00._0x0090
#define SAI2_RX_CONFR3 SAI2_BASE00._0x0094
#define SAI2_RX_CONFR4 SAI2_BASE00._0x0098
#define SAI2_RX_CONFR5 SAI2_BASE00._0x009c
#define SAI2_RX_DR0 SAI2_BASE00._0x00a0
#define SAI2_RX_DR1 SAI2_BASE00._0x00a4
#define SAI2_RX_DR2 SAI2_BASE00._0x00a8
#define SAI2_RX_DR3 SAI2_BASE00._0x00ac
#define SAI2_RX_FR0 SAI2_BASE00._0x00c0
#define SAI2_RX_FR1 SAI2_BASE00._0x00c4
#define SAI2_RX_FR2 SAI2_BASE00._0x00c8
#define SAI2_RX_FR3 SAI2_BASE00._0x00cc
#define SAI2_RX_MR SAI2_BASE00._0x00e0

// SAI3
#define SAI3_BASE00 MAP_32BIT_REGISTER(0x4038c000)
#define SAI3_VERID SAI3_BASE00._0x0000
#define SAI3_PARAMR SAI3_BASE00._0x0004
// TX ADDRESSES
#define SAI3_TX_CR SAI3_BASE00._0x0008
#define SAI3_TX_CONFR1 SAI3_BASE00._0x000c
#define SAI3_TX_CONFR2 SAI3_BASE00._0x0010
#define SAI3_TX_CONFR3 SAI3_BASE00._0x0014
#define SAI3_TX_CONFR4 SAI3_BASE00._0x0018
#define SAI3_TX_CONFR5 SAI3_BASE00._0x001c
#define SAI3_TX_DR0 SAI3_BASE00._0x0020
#define SAI3_TX_DR1 SAI3_BASE00._0x0024
#define SAI3_TX_DR2 SAI3_BASE00._0x0028
#define SAI3_TX_DR3 SAI3_BASE00._0x002c
#define SAI3_TX_FR0 SAI3_BASE00._0x0040
#define SAI3_TX_FR1 SAI3_BASE00._0x0044
#define SAI3_TX_FR2 SAI3_BASE00._0x0048
#define SAI3_TX_FR3 SAI3_BASE00._0x004c
#define SAI3_TX_MR SAI3_BASE00._0x0060
// RX ADDRESSES
#define SAI3_RX_CR SAI3_BASE00._0x0088
#define SAI3_RX_CONFR1 SAI3_BASE00._0x008c
#define SAI3_RX_CONFR2 SAI3_BASE00._0x0090
#define SAI3_RX_CONFR3 SAI3_BASE00._0x0094
#define SAI3_RX_CONFR4 SAI3_BASE00._0x0098
#define SAI3_RX_CONFR5 SAI3_BASE00._0x009c
#define SAI3_RX_DR0 SAI3_BASE00._0x00a0
#define SAI3_RX_DR1 SAI3_BASE00._0x00a4
#define SAI3_RX_DR2 SAI3_BASE00._0x00a8
#define SAI3_RX_DR3 SAI3_BASE00._0x00ac
#define SAI3_RX_FR0 SAI3_BASE00._0x00c0
#define SAI3_RX_FR1 SAI3_BASE00._0x00c4
#define SAI3_RX_FR2 SAI3_BASE00._0x00c8
#define SAI3_RX_FR3 SAI3_BASE00._0x00cc
#define SAI1_RX_MR SAI3_BASE00._0x00e0

/**
 * @brief: SPDIF, Sony/Philips Digital Interface Memory Map/Register
 * 40.6, p.2036
 * SPDIF base address: 0x40380000
 **/
#define SPDIF_BASE MAP_32BIT_REGISTER(0x4038c000)
#define SPDIF_SCR SPDIF_BASE._0x0000
#define SPDIF_SRCD SPDIF_BASE._0x0004
#define SPDIF_SRPC SPDIF_BASE._0x0008
#define SPDIF_SIE SPDIF_BASE._0x000c
#define SPDIF_SIS SPDIF_BASE._0x0010
#define SPDIF_SIC SPDIF_BASE._0x0010 // both at 0x10
#define SPDIF_SRL SPDIF_BASE._0x0014
#define SPDIF_SRR SPDIF_BASE._0x0018
#define SPDIF_SRCSH SPDIF_BASE._0x001c
#define SPDIF_SRCSL SPDIF_BASE._0x0020
#define SPDIF_SRU SPDIF_BASE._0x0024
#define SPDIF_SRQ SPDIF_BASE._0x0028
#define SPDIF_STL SPDIF_BASE._0x002c
#define SPDIF_STR SPDIF_BASE._0x0030
#define SPDIF_SRCSCH SPDIF_BASE._0x0034
#define SPDIF_STCSCL SPDIF_BASE._0x0038
#define SPDIF_SRFM SPDIF_BASE._0x0044
#define SPDIF_STC SPDIF_BASE._0x0050

/**
 * @brief: ENET, Ethernet MAC
 * 41.6, p.2068
 *
 * ENET registers must be read or written with 32-bit accesses.
 * Non-32 bit accesses willterminate with an error.
 * Reserved bits should be written with 0 and ignored on read.
 * Unused registers read zeroand a write has no effect
 *
 * Register Map Summary
 * 0x0000 – 0x01FF    Configuration
 *                    Core control and status registers
 *
 * 0x0200 – 0x03FF    Statistics counters
 *                    MIB and Remote Network Monitoring (RFC 2819) registers
 *
 * 0x0400 – 0x0430    1588 control
 *                    1588 adjustable timer (TSM) and 1588 frame control
 *
 * 0x0600 – 0x07FC    Capture/Comp block
 *                    Registers for the Capture/Compare block
 **/
#define ENET_BASE00 MAP_32BIT_REGISTER(0x402d4000)
#define ENET2_EIR ENET_BASE00._0x0004
#define ENET2_EIMR ENET_BASE00._0x0008
#define ENET2_RX_DAR ENET_BASE00._0x0010
#define ENET2_TX_DAR ENET_BASE00._0x0014
#define ENET2_ECR ENET_BASE00._0x0024
#define ENET2_MMFR ENET_BASE00._0x0040
#define ENET2_MSCR ENET_BASE00._0x0044
#define ENET2_MIBC ENET_BASE00._0x0064
#define ENET2_RX_CR ENET_BASE00._0x0084
#define ENET2_TC_CR ENET_BASE00._0x00c4
#define ENET2_PALR ENET_BASE00._0x00e4
#define ENET2_PAUR ENET_BASE00._0x00e8
#define ENET2_OPD ENET_BASE00._0x00ec
#define ENET2_TX_IC ENET_BASE00._0x00f0
#define ENET2_RX_IC ENET_BASE00._0x0100
#define ENET2_IAUR ENET_BASE00._0x0118
#define ENET2_IALR ENET_BASE00._0x011c
#define ENET2_GAUR ENET_BASE00._0x0120
#define ENET2_GALR ENET_BASE00._0x0124
#define ENET2_TFWR ENET_BASE00._0x0144
#define ENET2_RX_DSR ENET_BASE00._0x0180
#define ENET2_TX_DSR ENET_BASE00._0x0184
#define ENET2_MRBR ENET_BASE00._0x0188
#define ENET2_RX_FSL ENET_BASE00._0x0190
#define ENET2_RX_FSEM ENET_BASE00._0x0194
#define ENET2_RX_FAEM ENET_BASE00._0x0198
#define ENET2_RX_AFL ENET_BASE00._0x019c
#define ENET2_TX_SEM ENET_BASE00._0x01a0
#define ENET2_TX_AEM ENET_BASE00._0x01a4
#define ENET2_TX_AFL ENET_BASE00._0x01a8
#define ENET2_TX_IPG ENET_BASE00._0x01ac
#define ENET2_FTRL ENET_BASE00._0x01b0
#define ENET2_TX_ACC ENET_BASE00._0x01c0
#define ENET2_RX_ACC ENET_BASE00._0x01c4

// TX RMON
#define ENET2_RMON_TXDROP ENET_BASE00._0x0200
#define ENET2_RMON_T_PACKETS ENET_BASE00._0x0204
#define ENET2_RMON_T_BC_PKT ENET_BASE00._0x0208
#define ENET2_RMON_T_MC_PKT ENET_BASE00._0x020c
#define ENET2_RMON_T_CRC_ALIGN ENET_BASE00._0x0210
#define ENET2_RMON_T_UNDERSIZE ENET_BASE00._0x0214
#define ENET2_RMON_T_OVERSIZE ENET_BASE00._0x0218
#define ENET2_RMON_T_FRAG ENET_BASE00._0x021c
#define ENET2_RMON_T_JAB ENET_BASE00._0x0220
#define ENET2_RMON_T_COL ENET_BASE00._0x0224
#define ENET2_RMON_T_P64 ENET_BASE00._0x0228
#define ENET2_RMON_T_P65TO127 ENET_BASE00._0x022c
#define ENET2_RMON_T_P128TO255 ENET_BASE00._0x0230
#define ENET2_RMON_T_P256TO511 ENET_BASE00._0x0234
#define ENET2_RMON_T_P512TO1023 ENET_BASE00._0x0238
#define ENET2_RMON_T_P1024TO2047 ENET_BASE00._0x023c
#define ENET2_RMON_T_P_GTE2048 ENET_BASE00._0x0240
#define ENET2_RMON_T_OCTETS ENET_BASE00._0x0244

// TX IEEE
#define ENET2_IEEE_T_DROP ENET_BASE00._0x0248
#define ENET2_IEEE_T_FRAME_OK ENET_BASE00._0x024c
#define ENET2_IEEE_T_1COL ENET_BASE00._0x0250
#define ENET2_IEEE_T_MCOL ENET_BASE00._0x0254
#define ENET2_IEEE_T_DEF ENET_BASE00._0x0258
#define ENET2_IEEE_T_LCOL ENET_BASE00._0x025c
#define ENET2_IEEE_T_EXCOL ENET_BASE00._0x0260
#define ENET2_IEEE_T_MACERR ENET_BASE00._0x0264
#define ENET2_IEEE_T_CSERR ENET_BASE00._0x0268
#define ENET2_IEEE_T_SQE ENET_BASE00._0x026c
#define ENET2_IEEE_T_FDXFC ENET_BASE00._0x0270
#define ENET2_IEEE_T_OCTETS_OK ENET_BASE00._0x0274

// RX RMON
#define ENET2_RMON_R_PACKETS ENET_BASE00._0x0284
#define ENET2_RMON_R_BC_PKT ENET_BASE00._0x0288
#define ENET2_RMON_R_MC_PKT ENET_BASE00._0x028c
#define ENET2_RMON_R_CRC_ALIGN ENET_BASE00._0x0290
#define ENET2_RMON_R_UNDERSIZE ENET_BASE00._0x0294
#define ENET2_RMON_R_OVERSIZE ENET_BASE00._0x0298
#define ENET2_RMON_R_FRAG ENET_BASE00._0x029c
#define ENET2_RMON_R_JAB ENET_BASE00._0x02a0
#define ENET2_RMON_R_RESVD_0 ENET_BASE00._0x02a4
#define ENET2_RMON_R_P64 ENET_BASE00._0x02a8
#define ENET2_RMON_R_P65TO127 ENET_BASE00._0x02ac
#define ENET2_RMON_R_P128TO255 ENET_BASE00._0x02b0
#define ENET2_RMON_R_P256TO511 ENET_BASE00._0x02b4
#define ENET2_RMON_R_P512TO1023 ENET_BASE00._0x02b8
#define ENET2_RMON_R_P1024TO2047 ENET_BASE00._0x02bc
#define ENET2_RMON_R_P_GTE2048 ENET_BASE00._0x02c0
#define ENET2_RMON_R_OCTETS ENET_BASE00._0x02c4

// RX IEEE
#define ENET2_IEEE_R_DROP ENET_BASE00._0x02c8
#define ENET2_IEEE_R_FRAME_OK ENET_BASE00._0x02cc
#define ENET2_IEEE_R_CRC ENET_BASE00._0x02d0
#define ENET2_IEEE_R_ALIGN ENET_BASE00._0x02d4
#define ENET2_IEEE_R_MACERR ENET_BASE00._0x02d8
#define ENET2_IEEE_R_FDXFC ENET_BASE00._0x02dc
#define ENET2_IEEE_R_OCTETS_OK ENET_BASE00._0x02e0

#define EB0 ENET_BASE00._0x0000
#define ENET2_ATCR _OFFSET(EB0, 0x400)
#define ENET2_ATVR _OFFSET(EB0, 0x404)
#define ENET2_ATOFF _OFFSET(EB0, 0x408)
#define ENET2_ATPER _OFFSET(EB0, 0x40c)
#define ENET2_ATCOR _OFFSET(EB0, 0x410)
#define ENET2_ATINC _OFFSET(EB0, 0x414)
#define ENET2_ATSTMP _OFFSET(EB0, 0x418)
#define ENET2_TGSR _OFFSET(EB0, 0x604)
#define ENET2_TCSR0 _OFFSET(EB0, 0x608)
#define ENET2_TCCR0 _OFFSET(EB0, 0x60c)
#define ENET2_TCSR1 _OFFSET(EB0, 0x610)
#define ENET2_TCCR1 _OFFSET(EB0, 0x614)
#define ENET2_TCSR2 _OFFSET(EB0, 0x618)
#define ENET2_TCCR2 _OFFSET(EB0, 0x61c)
#define ENET2_TCSR3 _OFFSET(EB0, 0x620)
#define ENET2_TCCR3 _OFFSET(EB0, 0x624)

#define ENET_BASE20 MAP_32BIT_REGISTER(0x402d8000)
#define ENET_EIR ENET_BASE20._0x0004
#define ENET_EIMR ENET_BASE20._0x0008
#define ENET_RX_DAR ENET_BASE20._0x0010
#define ENET_TX_DAR ENET_BASE20._0x0014
#define ENET_ECR ENET_BASE20._0x0024
#define ENET_MMFR ENET_BASE20._0x0040
#define ENET_MSCR ENET_BASE20._0x0044
#define ENET_MIBC ENET_BASE20._0x0064
#define ENET_RX_CR ENET_BASE20._0x0084
#define ENET_TC_CR ENET_BASE20._0x00c4
#define ENET_PALR ENET_BASE20._0x00e4
#define ENET_PAUR ENET_BASE20._0x00e8
#define ENET_OPD ENET_BASE20._0x00ec
#define ENET_TX_IC ENET_BASE20._0x00f0
#define ENET_RX_IC ENET_BASE20._0x0100
#define ENET_IAUR ENET_BASE20._0x0118
#define ENET_IALR ENET_BASE20._0x011c
#define ENET_GAUR ENET_BASE20._0x0120
#define ENET_GALR ENET_BASE20._0x0124
#define ENET_TFWR ENET_BASE20._0x0144
#define ENET_RX_DSR ENET_BASE20._0x0180
#define ENET_TX_DSR ENET_BASE20._0x0184
#define ENET_MRBR ENET_BASE20._0x0188
#define ENET_RX_FSL ENET_BASE20._0x0190
#define ENET_RX_FSEM ENET_BASE20._0x0194
#define ENET_RX_FAEM ENET_BASE20._0x0198
#define ENET_RX_AFL ENET_BASE20._0x019c
#define ENET_TX_SEM ENET_BASE20._0x01a0
#define ENET_TX_AEM ENET_BASE20._0x01a4
#define ENET_TX_AFL ENET_BASE20._0x01a8
#define ENET_TX_IPG ENET_BASE20._0x01ac
#define ENET_FTRL ENET_BASE20._0x01b0
#define ENET_TX_ACC ENET_BASE20._0x01c0
#define ENET_RX_ACC ENET_BASE20._0x01c4

// TX RMON
#define ENET_RMON_TXDROP ENET_BASE20._0x0200
#define ENET_RMON_T_PACKETS ENET_BASE20._0x0204
#define ENET_RMON_T_BC_PKT ENET_BASE20._0x0208
#define ENET_RMON_T_MC_PKT ENET_BASE20._0x020c
#define ENET_RMON_T_CRC_ALIGN ENET_BASE20._0x0210
#define ENET_RMON_T_UNDERSIZE ENET_BASE20._0x0214
#define ENET_RMON_T_OVERSIZE ENET_BASE20._0x0218
#define ENET_RMON_T_FRAG ENET_BASE20._0x021c
#define ENET_RMON_T_JAB ENET_BASE20._0x0220
#define ENET_RMON_T_COL ENET_BASE20._0x0224
#define ENET_RMON_T_P64 ENET_BASE20._0x0228
#define ENET_RMON_T_P65TO127 ENET_BASE20._0x022c
#define ENET_RMON_T_P128TO255 ENET_BASE20._0x0230
#define ENET_RMON_T_P256TO511 ENET_BASE20._0x0234
#define ENET_RMON_T_P512TO1023 ENET_BASE20._0x0238
#define ENET_RMON_T_P1024TO2047 ENET_BASE20._0x023c
#define ENET_RMON_T_P_GTE2048 ENET_BASE20._0x0240
#define ENET_RMON_T_OCTETS ENET_BASE20._0x0244

// TX IEEE
#define ENET_IEEE_T_DROP ENET_BASE20._0x0248
#define ENET_IEEE_T_FRAME_OK ENET_BASE20._0x024c
#define ENET_IEEE_T_1COL ENET_BASE20._0x0250
#define ENET_IEEE_T_MCOL ENET_BASE20._0x0254
#define ENET_IEEE_T_DEF ENET_BASE20._0x0258
#define ENET_IEEE_T_LCOL ENET_BASE20._0x025c
#define ENET_IEEE_T_EXCOL ENET_BASE20._0x0260
#define ENET_IEEE_T_MACERR ENET_BASE20._0x0264
#define ENET_IEEE_T_CSERR ENET_BASE20._0x0268
#define ENET_IEEE_T_SQE ENET_BASE20._0x026c
#define ENET_IEEE_T_FDXFC ENET_BASE20._0x0270
#define ENET_IEEE_T_OCTETS_OK ENET_BASE20._0x0274

// RX RMON
#define ENET_RMON_R_PACKETS ENET_BASE20._0x0284
#define ENET_RMON_R_BC_PKT ENET_BASE20._0x0288
#define ENET_RMON_R_MC_PKT ENET_BASE20._0x028c
#define ENET_RMON_R_CRC_ALIGN ENET_BASE20._0x0290
#define ENET_RMON_R_UNDERSIZE ENET_BASE20._0x0294
#define ENET_RMON_R_OVERSIZE ENET_BASE20._0x0298
#define ENET_RMON_R_FRAG ENET_BASE20._0x029c
#define ENET_RMON_R_JAB ENET_BASE20._0x02a0
#define ENET_RMON_R_RESVD_0 ENET_BASE20._0x02a4
#define ENET_RMON_R_P64 ENET_BASE20._0x02a8
#define ENET_RMON_R_P65TO127 ENET_BASE20._0x02ac
#define ENET_RMON_R_P128TO255 ENET_BASE20._0x02b0
#define ENET_RMON_R_P256TO511 ENET_BASE20._0x02b4
#define ENET_RMON_R_P512TO1023 ENET_BASE20._0x02b8
#define ENET_RMON_R_P1024TO2047 ENET_BASE20._0x02bc
#define ENET_RMON_R_P_GTE2048 ENET_BASE20._0x02c0
#define ENET_RMON_R_OCTETS ENET_BASE20._0x02c4

// RX IEEE
#define ENET_IEEE_R_DROP ENET_BASE20._0x02c8
#define ENET_IEEE_R_FRAME_OK ENET_BASE20._0x02cc
#define ENET_IEEE_R_CRC ENET_BASE20._0x02d0
#define ENET_IEEE_R_ALIGN ENET_BASE20._0x02d4
#define ENET_IEEE_R_MACERR ENET_BASE20._0x02d8
#define ENET_IEEE_R_FDXFC ENET_BASE20._0x02dc
#define ENET_IEEE_R_OCTETS_OK ENET_BASE20._0x02e0

#define EB1 ENET_BASE20._0x0000
#define ENET_ATCR _OFFSET(EB1, 0x400)
#define ENET_ATVR _OFFSET(EB1, 0x404)
#define ENET_ATOFF _OFFSET(EB1, 0x408)
#define ENET_ATPER _OFFSET(EB1, 0x40c)
#define ENET_ATCOR _OFFSET(EB1, 0x410)
#define ENET_ATINC _OFFSET(EB1, 0x414)
#define ENET_ATSTMP _OFFSET(EB1, 0x418)
#define ENET_TGSR _OFFSET(EB1, 0x604)
#define ENET_TCSR0 _OFFSET(EB1, 0x608)
#define ENET_TCCR0 _OFFSET(EB1, 0x60c)
#define ENET_TCSR1 _OFFSET(EB1, 0x610)
#define ENET_TCCR1 _OFFSET(EB1, 0x614)
#define ENET_TCSR2 _OFFSET(EB1, 0x618)
#define ENET_TCCR2 _OFFSET(EB1, 0x61c)
#define ENET_TCSR3 _OFFSET(EB1, 0x620)
#define ENET_TCCR3 _OFFSET(EB1, 0x624)

/**
 * @brief: USB, Non-Core and Core Memory Map
 * 42.6 + 42.7, p.2376
 *
 *  There are two kinds of registers in the USB module: USB core registers and
 *  USB non-core registers. USB core registers are used to control USB core
 *  functions, and moreindependent of USB features. Each USB controller core has
 *  its own core registers. USBnon-core registers are additional to USB core
 *  registers, and more dependent on USBfeatures. i.MX series products vary in
 *  non-core registers.
 *
 *  USBNC denotes the Non Core mappings
 *
 **/
#define USBCORE_BASE MAP_32BIT_REGISTER(0x402e0000)
#define USBCB0 USBCORE_BASE._0x0000
#define USBNC_USB_OTG1_CTRL _OFFSET(USBCB0, 0x800)
#define USBNC_USB_OTG2_CTRL _OFFSET(USBCB0, 0x804)
#define USBNC_USB_OTG1_PHY_CTRL_0 _OFFSET(USBCB0, 0x818)
#define USBNC_USB_OTG2_PHY_CTRL_0 _OFFSET(USBCB0, 0x81c)

#define USB_UOG1_ID USBCORE_BASE._0x0000
#define USB_UOG1_HWGENERAL USBCORE_BASE._0x0004
#define USB_UOG1_HWHOST USBCORE_BASE._0x0008
#define USB_UOG1_HWTXBUF USBCORE_BASE._0x000c
#define USB_UOG1_HWTXBUF USBCORE_BASE._0x0010
#define USB_UOG1_HWRXBUF USBCORE_BASE._0x0014

#define USB_UOG1_GPTIMER0LD USBCORE_BASE._0x0080
#define USB_UOG1_GPTIMER0CTRL USBCORE_BASE._0x0084
#define USB_UOG1_GPTIMER1LD USBCORE_BASE._0x0088
#define USB_UOG1_GPTIMER1CTRL USBCORE_BASE._0x008c
#define USB_UOG1_SBUSCFG USBCORE_BASE._0x0090
#define _8_USBCORE_BASE MAP_8BIT_REGISTER(0x402e0100)
#define _16_USBCORE_BASE MAP_16BIT_REGISTER(0x402e0100)
#define USB_UOG1_CAPLENGTH _8_USBCORE_BASE._0x0000
#define USB_UOG1_HCIVERSION _16_USBCORE_BASE._0x0002

#define USB_UOG1_HCSPARAMS USBCORE_BASE._0x0104
#define USB_UOG1_HCCPARAMS USBCORE_BASE._0x0108

#define USB_UOG1_DCIVERSION _16_USBCORE_BASE._0x0020

#define USB_UOG1_DCCPARAMS USBCORE_BASE._0x0124
#define USB_UOG1_USBCMD USBCORE_BASE._0x0140
#define USB_UOG1_USBSTS USBCORE_BASE._0x0144
#define USB_UOG1_USBINTR USBCORE_BASE._0x0148
#define USB_UOG1_FRINDEX USBCORE_BASE._0x014c
#define USB_UOG1_PERIODICLISTBASE USBCORE_BASE._0x0154 // Host Controller Only
#define USB_UOG1_DEVICEADDR USBCORE_BASE._0x0154 // Device Controller only
#define USB_UOG1_ASYNCLISTADDR USBCORE_BASE._0x0158 // Host Controller Only
#define USB_UOG1_ENDPTLISTADDR USBCORE_BASE._0x0158 // Device Controller Only

#define USB_UOG1_BURSTSIZE USBCORE_BASE._0x0160
#define USB_UOG1_TXFILLTUNING USBCORE_BASE._0x0164
#define USB_UOG1_ENDPTNAK USBCORE_BASE._0x0178
#define USB_UOG1_ENDPTNAKEN USBCORE_BASE._0x017c
#define USB_UOG1_CONFIGFLAG USBCORE_BASE._0x0180
#define USB_UOG1_PORTSC1 USBCORE_BASE._0x0184
#define USB_UOG1_OTGSC USBCORE_BASE._0x01a4
#define USB_UOG1_USBMODE USBCORE_BASE._0x01a8
#define USB_UOG1_ENDPTSETUPSTAT USBCORE_BASE._0x01ac
#define USB_UOG1_ENDPTPRIME USBCORE_BASE._0x01b0
#define USB_UOG1_ENDPTFLUSH USBCORE_BASE._0x01b4
#define USB_UOG1_ENDPTSTAT USBCORE_BASE._0x01b8
#define USB_UOG1_ENDPTCOMPLETE USBCORE_BASE._0x01bc
#define USB_UOG1_ENDPTCTRL0 USBCORE_BASE._0x01c0
#define USB_UOG1_ENDPTCTRL1 USBCORE_BASE._0x01c4
#define USB_UOG1_ENDPTCTRL2 USBCORE_BASE._0x01c8
#define USB_UOG1_ENDPTCTRL3 USBCORE_BASE._0x01cc
#define USB_UOG1_ENDPTCTRL4 USBCORE_BASE._0x01d0
#define USB_UOG1_ENDPTCTRL5 USBCORE_BASE._0x01d4
#define USB_UOG1_ENDPTCTRL6 USBCORE_BASE._0x01d8
#define USB_UOG1_ENDPTCTRL7 USBCORE_BASE._0x01dc

// UOB2
#define USB_UOG2_ID USBCORE_BASE._0x0200
#define USB_UOG2_HWGENERAL USBCORE_BASE._0x0204
#define USB_UOG2_HWHOST USBCORE_BASE._0x0208
#define USB_UOG2_HWDEVICE USBCORE_BASE._0x020c
#define USB_UOG2_HWTXBUF USBCORE_BASE._0x0210
#define USB_UOG2_HWRXBUF USBCORE_BASE._0x0214
#define USB_UOG2_GPTIMER0LD USBCORE_BASE._0x0280
#define USB_UOG2_GPTIMER0CTRL USBCORE_BASE._0x0284
#define USB_UOG2_GPTIMER1LD USBCORE_BASE._0x0288
#define USB_UOG2_GPTIMER1CTRL USBCORE_BASE._0x028c
#define USB_UOG2_SBUSCFG USBCORE_BASE._0x0290

#define _8_USBCORE_BASE1 MAP_8BIT_REGISTER(0x402e0300)
#define _16_USBCORE_BASE1 MAP_16BIT_REGISTER(0x402e0300)
#define USB_UOG2_CAPLENGTH _8_USBCORE_BASE1._0x0000
#define USB_UOG2_HCIVERSION _16_USBCORE_BASE1._0x0002
#define USB_UOG2_HCSPARAMS USBCORE_BASE._0x0304
#define USB_UOG2_HCCPARAMS USBCORE_BASE._0x0308

#define USB_UOG2_DCIVERSION _16_USBCORE_BASE1._0x0020
#define USB_UOG2_DCCPARAMS USBCORE_BASE._0x0324
#define USB_UOG2_USBCMD USBCORE_BASE._0x0340
#define USB_UOG2_USBSTS USBCORE_BASE._0x0344
#define USB_UOG2_USBINTR USBCORE_BASE._0x0348
#define USB_UOG2_FRINDEX USBCORE_BASE._0x034c
#define USB_UOG2_PERIODICLISTBASE USBCORE_BASE._0x0354 // Host Controller only
#define USB_UOG2_DEVICEADDR USBCORE_BASE._0x0354 // Device Controller only
#define USB_UOG2_ASYNCLISTADDR USBCORE_BASE._0x0358 // Host Controller only
#define USB_UOG2_ENDPTLISTADDR USBCORE_BASE._0x0358 // Device Controller only

#define USB_UOG2_BURSTSIZE USBCORE_BASE._0x0360
#define USB_UOG2_TXFILLTUNING USBCORE_BASE._0x0364
#define USB_UOG2_ENDPTNAK USBCORE_BASE._0x0378
#define USB_UOG2_ENDPTNAKEN USBCORE_BASE._0x037c
#define USB_UOG2_CONFIGFLAG USBCORE_BASE._0x0380
#define USB_UOG2_PORTSC1 USBCORE_BASE._0x0384
#define USB_UOG2_OTGSC USBCORE_BASE._0x03a4
#define USB_UOG2_USBMODE USBCORE_BASE._0x03a8
#define USB_UOG2_ENDPTSETUPSTAT USBCORE_BASE._0x03ac
#define USB_UOG2_ENDPTPRIME USBCORE_BASE._0x03b0
#define USB_UOG2_ENDPTFLUSH USBCORE_BASE._0x03b4
#define USB_UOG2_ENDPTSTAT USBCORE_BASE._0x03b8
#define USB_UOG2_ENDPTCOMPLETE USBCORE_BASE._0x03bc
#define USB_UOG2_ENDPTCTRL0 USBCORE_BASE._0x03c0
#define USB_UOG2_ENDPTCTRL1 USBCORE_BASE._0x03c4
#define USB_UOG2_ENDPTCTRL2 USBCORE_BASE._0x03c8
#define USB_UOG2_ENDPTCTRL3 USBCORE_BASE._0x03cc
#define USB_UOG2_ENDPTCTRL4 USBCORE_BASE._0x03d0
#define USB_UOG2_ENDPTCTRL5 USBCORE_BASE._0x03d4
#define USB_UOG2_ENDPTCTRL6 USBCORE_BASE._0x03d8
#define USB_UOG2_ENDPTCTRL7 USBCORE_BASE._0x03dc

/**
 * USB-PHY Chapter 43, p.2463
 */
{ /**
   * @brief: USBPHY Memory Map
   * 43.4, p.2475
   *
   * USBPHY Hardware Register Format Summary
   * Base Address: 0x400d9000
   * // 54 registers
   **/
#define USBPHY_BASE0 MAP_32BIT_REGISTER(0x400d9000)
#define USBPHY1_PWD USBPHY_BASE0._0x0000
#define USBPHY1_PWD_SET USBPHY_BASE0._0x0004
#define USBPHY1_PWD_CLR USBPHY_BASE0._0x0008
#define USBPHY1_PWD_TOG USBPHY_BASE0._0x000c
#define USBPHY1_TX USBPHY_BASE0._0x0010
#define USBPHY1_TX_SET USBPHY_BASE0._0x0014
#define USBPHY1_TX_CLR USBPHY_BASE0._0x0018
#define USBPHY1_TX_TOG USBPHY_BASE0._0x001c
#define USBPHY1_RX USBPHY_BASE0._0x0020
#define USBPHY1_RX_SET USBPHY_BASE0._0x0024
#define USBPHY1_RX_CLR USBPHY_BASE0._0x0028
#define USBPHY1_RX_TOG USBPHY_BASE0._0x002c
#define USBPHY1_CTRL USBPHY_BASE0._0x0030
#define USBPHY1_CTRL_SET USBPHY_BASE0._0x0034
#define USBPHY1_CTRL_CLR USBPHY_BASE0._0x0038
#define USBPHY1_CTRL_TOG USBPHY_BASE0._0x003c
#define USBPHY1_STATUS USBPHY_BASE0._0x0040
#define USBPHY1_DEBUG USBPHY_BASE0._0x0050
#define USBPHY1_DEBUG_SET USBPHY_BASE0._0x0054
#define USBPHY1_DEBUG_CLR USBPHY_BASE0._0x0058
#define USBPHY1_DEBUG_TOG USBPHY_BASE0._0x005c
#define USBPHY1_DEBUG0_STATUS USBPHY_BASE0._0x0060
#define USBPHY1_DEBUG1 USBPHY_BASE0._0x0070
#define USBPHY1_DEBUG1_SET USBPHY_BASE0._0x0074
#define USBPHY1_DEBUG1_CLR USBPHY_BASE0._0x0078
#define USBPHY1_DEBUG1_TOG USBPHY_BASE0._0x007c
#define USBPHY1_VERSION USBPHY_BASE0._0x0080

#define USBPHY_BASE1 MAP_32BIT_REGISTER(0x400da000)
#define USBPHY2_PWD USBPHY_BASE1._0x0000
#define USBPHY2_PWD_SET USBPHY_BASE1._0x0004
#define USBPHY2_PWD_CLR USBPHY_BASE1._0x0008
#define USBPHY2_PWD_TOG USBPHY_BASE1._0x000c
#define USBPHY2_TX USBPHY_BASE1._0x0010
#define USBPHY2_TX_SET USBPHY_BASE1._0x0014
#define USBPHY2_TX_CLR USBPHY_BASE1._0x0018
#define USBPHY2_TX_TOG USBPHY_BASE1._0x001c
#define USBPHY2_RX USBPHY_BASE1._0x0020
#define USBPHY2_RX_SET USBPHY_BASE1._0x0024
#define USBPHY2_RX_CLR USBPHY_BASE1._0x0028
#define USBPHY2_RX_TOG USBPHY_BASE1._0x002c
#define USBPHY2_CTRL USBPHY_BASE1._0x0030
#define USBPHY2_CTRL_SET USBPHY_BASE1._0x0034
#define USBPHY2_CTRL_CLR USBPHY_BASE1._0x0038
#define USBPHY2_CTRL_TOG USBPHY_BASE1._0x003c
#define USBPHY2_STATUS USBPHY_BASE1._0x0040
#define USBPHY2_DEBUG USBPHY_BASE1._0x0050
#define USBPHY2_DEBUG_SET USBPHY_BASE1._0x0054
#define USBPHY2_DEBUG_CLR USBPHY_BASE1._0x0058
#define USBPHY2_DEBUG_TOG USBPHY_BASE1._0x005c
#define USBPHY2_DEBUG0_STATUS USBPHY_BASE1._0x0060
#define USBPHY2_DEBUG1 USBPHY_BASE1._0x0070
#define USBPHY2_DEBUG1_SET USBPHY_BASE1._0x0074
#define USBPHY2_DEBUG1_CLR USBPHY_BASE1._0x0078
#define USBPHY2_DEBUG1_TOG USBPHY_BASE1._0x007c
#define USBPHY2_VERSION USBPHY_BASE1._0x0080

/**
 * @brief: USBPHY ANALOG Memory Map
 * 43.5, p.2491
 *
 * USBPHY Hardware Register Format Summary
 * Base Address: 0x400c81a0
 * 
 * // 37 registers
 **/}
// UBS1
#define USB_PA_BASE0 MAP_32BIT_REGISTER(0x400c81a0)
#define USB_ANALOG_USB1_VBUS_DETECT USB_PA_BASE0._0x0000
#define USB_ANALOG_USB1_VBUS_DETECT_SET USB_PA_BASE0._0x0004
#define USB_ANALOG_USB1_VBUS_DETECT_CLR USB_PA_BASE0._0x0008
#define USB_ANALOG_USB1_VBUS_DETECT_TOG USB_PA_BASE0._0x000c
#define USB_ANALOG_USB1_CHRG_DETECT USB_PA_BASE0._0x0010
#define USB_ANALOG_USB1_CHRG_DETECT_SET USB_PA_BASE0._0x0014
#define USB_ANALOG_USB1_CHRG_DETECT_CLR USB_PA_BASE0._0x0018
#define USB_ANALOG_USB1_CHRG_DETECT_TOG USB_PA_BASE0._0x001c
#define USB_ANALOG_USB1_VBUS_DETECT_STAT USB_PA_BASE0._0x0020
#define USB_ANALOG_USB1_CHRG_DETECT_STAT USB_PA_BASE0._0x0030
#define USB_ANALOG_USB1_LOOPBACK USB_PA_BASE0._0x0040
#define USB_ANALOG_USB1_LOOPBACK_SET USB_PA_BASE0._0x0044
#define USB_ANALOG_USB1_LOOPBACK_CLR USB_PA_BASE0._0x0048
#define USB_ANALOG_USB1_LOOPBACK_TOG USB_PA_BASE0._0x004c
#define USB_ANALOG_USB1_MISC USB_PA_BASE0._0x0050
#define USB_ANALOG_USB1_MISC_SET USB_PA_BASE0._0x0054
#define USB_ANALOG_USB1_MISC_CLR USB_PA_BASE0._0x0058
#define USB_ANALOG_USB1_MISC_TOG USB_PA_BASE0._0x005c
// USB2
#define USB_ANALOG_USB2_VBUS_DETECT USB_PA_BASE0._0x0060
#define USB_ANALOG_USB2_VBUS_DETECT_SET USB_PA_BASE0._0x0064
#define USB_ANALOG_USB2_VBUS_DETECT_CLR USB_PA_BASE0._0x0068
#define USB_ANALOG_USB2_VBUS_DETECT_TOG USB_PA_BASE0._0x006c
#define USB_ANALOG_USB2_CHRG_DETECT USB_PA_BASE0._0x0070
#define USB_ANALOG_USB2_CHRG_DETECT_SET USB_PA_BASE0._0x0074
#define USB_ANALOG_USB2_CHRG_DETECT_CLR USB_PA_BASE0._0x0078
#define USB_ANALOG_USB2_CHRG_DETECT_TOG USB_PA_BASE0._0x007c
#define USB_ANALOG_USB2_VBUS_DETECT_STAT USB_PA_BASE0._0x0080
#define USB_ANALOG_USB2_CHRG_DETECT_STAT USB_PA_BASE0._0x0090
#define USB_ANALOG_USB2_LOOPBACK USB_PA_BASE0._0x00a0
#define USB_ANALOG_USB2_LOOPBACK_SET USB_PA_BASE0._0x0a4
#define USB_ANALOG_USB2_LOOPBACK_CLR USB_PA_BASE0._0x00a8
#define USB_ANALOG_USB2_LOOPBACK_TOG USB_PA_BASE0._0x00ac
#define USB_ANALOG_USB2_MISC USB_PA_BASE0._0x00b0
#define USB_ANALOG_USB2_MISC_SET USB_PA_BASE0._0x00b4
#define USB_ANALOG_USB2_MISC_CLR USB_PA_BASE0._0x00b8
#define USB_ANALOG_USB2_MISC_TOG USB_PA_BASE0._0x00bc

#define USB_ANALOG_DIGPROG USB_PA_BASE0._0x00c0

//  Low Speed periphials
/**
 * @brief: FLEXCAN, Flexible Controller Area Network Memory Map
 * 44.9, p.2555
 *
 * USBPHY Hardware Register Format Summary
 * Base Address: 0x401d0000
 *
 * // About 150+ registers
 **/
#define FLEXCAN_BASE00 MAP_32BIT_REGISTER(0x401d0000)
#define FLEXCAN1_MCR FLEXCAN_BASE00._0x0000
#define FLEXCAN1_CTRL1 FLEXCAN_BASE00._0x0004
#define FLEXCAN1_TIMER FLEXCAN_BASE00._0x0008
#define FLEXCAN1_RXMGMASK FLEXCAN_BASE00._0x0010
#define FLEXCAN1_RX14MASK FLEXCAN_BASE00._0x0014
#define FLEXCAN1_RX15MASK FLEXCAN_BASE00._0x0018
#define FLEXCAN1_ECR FLEXCAN_BASE00._0x001c
#define FLEXCAN1_ESR1 FLEXCAN_BASE00._0x0020
#define FLEXCAN1_IMASK2 FLEXCAN_BASE00._0x0024
#define FLEXCAN1_IMASK1 FLEXCAN_BASE00._0x0028
#define FLEXCAN1_IFLAG2 FLEXCAN_BASE00._0x002c
#define FLEXCAN1_IFLAG1 FLEXCAN_BASE00._0x0030
#define FLEXCAN1_CTRL2 FLEXCAN_BASE00._0x0034
#define FLEXCAN1_ESR2 FLEXCAN_BASE00._0x0038
#define FLEXCAN1_CRCR FLEXCAN_BASE00._0x0044
#define FLEXCAN1_RXFGMASK FLEXCAN_BASE00._0x0048
#define FLEXCAN1_RXFIR FLEXCAN_BASE00._0x004c

#define FLEXCAN_BASE01 MAP_32BIT_REGISTER(0x401d0800)
#define FLEXCAN1_RXIMR0 FLEXCAN_BASE00._0x0080
#define FLEXCAN1_RXIMR1 FLEXCAN_BASE00._0x0084
#define FLEXCAN1_RXIMR2 FLEXCAN_BASE00._0x0088
#define FLEXCAN1_RXIMR3 FLEXCAN_BASE00._0x008c
#define FLEXCAN1_RXIMR4 FLEXCAN_BASE00._0x0090
#define FLEXCAN1_RXIMR5 FLEXCAN_BASE00._0x0094
#define FLEXCAN1_RXIMR6 FLEXCAN_BASE00._0x0098
#define FLEXCAN1_RXIMR7 FLEXCAN_BASE00._0x009c
#define FLEXCAN1_RXIMR8 FLEXCAN_BASE00._0x00a0
#define FLEXCAN1_RXIMR9 FLEXCAN_BASE00._0x00a4
#define FLEXCAN1_RXIMR10 FLEXCAN_BASE00._0x00a8
#define FLEXCAN1_RXIMR11 FLEXCAN_BASE00._0x00ac
#define FLEXCAN1_RXIMR12 FLEXCAN_BASE00._0x00b0
#define FLEXCAN1_RXIMR13 FLEXCAN_BASE00._0x00b4
#define FLEXCAN1_RXIMR14 FLEXCAN_BASE00._0x00b8
#define FLEXCAN1_RXIMR15 FLEXCAN_BASE00._0x00bc
#define FLEXCAN1_RXIMR16 FLEXCAN_BASE00._0x00c0
#define FLEXCAN1_RXIMR17 FLEXCAN_BASE00._0x00c4
#define FLEXCAN1_RXIMR18 FLEXCAN_BASE00._0x00c8
#define FLEXCAN1_RXIMR19 FLEXCAN_BASE00._0x00cc
#define FLEXCAN1_RXIMR20 FLEXCAN_BASE00._0x00d0
#define FLEXCAN1_RXIMR21 FLEXCAN_BASE00._0x00d4
#define FLEXCAN1_RXIMR22 FLEXCAN_BASE00._0x00d8
#define FLEXCAN1_RXIMR23 FLEXCAN_BASE00._0x00dc
#define FLEXCAN1_RXIMR24 FLEXCAN_BASE00._0x00e0
#define FLEXCAN1_RXIMR25 FLEXCAN_BASE00._0x00e4
#define FLEXCAN1_RXIMR26 FLEXCAN_BASE00._0x00e8
#define FLEXCAN1_RXIMR27 FLEXCAN_BASE00._0x00eC
#define FLEXCAN1_RXIMR28 FLEXCAN_BASE00._0x00f0
#define FLEXCAN1_RXIMR29 FLEXCAN_BASE00._0x00f4
#define FLEXCAN1_RXIMR30 FLEXCAN_BASE00._0x00f8
#define FLEXCAN1_RXIMR31 FLEXCAN_BASE00._0x00fc
#define FLEXCAN1_RXIMR32 FLEXCAN_BASE00._0x0100
#define FLEXCAN1_RXIMR33 FLEXCAN_BASE00._0x0104
#define FLEXCAN1_RXIMR34 FLEXCAN_BASE00._0x0108
#define FLEXCAN1_RXIMR35 FLEXCAN_BASE00._0x010c
#define FLEXCAN1_RXIMR36 FLEXCAN_BASE00._0x0110
#define FLEXCAN1_RXIMR37 FLEXCAN_BASE00._0x0114
#define FLEXCAN1_RXIMR38 FLEXCAN_BASE00._0x0118
#define FLEXCAN1_RXIMR39 FLEXCAN_BASE00._0x011c
#define FLEXCAN1_RXIMR40 FLEXCAN_BASE00._0x0120
#define FLEXCAN1_RXIMR41 FLEXCAN_BASE00._0x0124
#define FLEXCAN1_RXIMR42 FLEXCAN_BASE00._0x0128
#define FLEXCAN1_RXIMR43 FLEXCAN_BASE00._0x012c
#define FLEXCAN1_RXIMR44 FLEXCAN_BASE00._0x0130
#define FLEXCAN1_RXIMR45 FLEXCAN_BASE00._0x0134
#define FLEXCAN1_RXIMR46 FLEXCAN_BASE00._0x0138
#define FLEXCAN1_RXIMR47 FLEXCAN_BASE00._0x013c
#define FLEXCAN1_RXIMR48 FLEXCAN_BASE00._0x0140
#define FLEXCAN1_RXIMR49 FLEXCAN_BASE00._0x0144
#define FLEXCAN1_RXIMR50 FLEXCAN_BASE00._0x0148
#define FLEXCAN1_RXIMR51 FLEXCAN_BASE00._0x014c
#define FLEXCAN1_RXIMR52 FLEXCAN_BASE00._0x0150
#define FLEXCAN1_RXIMR53 FLEXCAN_BASE00._0x0154
#define FLEXCAN1_RXIMR54 FLEXCAN_BASE00._0x0158
#define FLEXCAN1_RXIMR55 FLEXCAN_BASE00._0x015c
#define FLEXCAN1_RXIMR56 FLEXCAN_BASE00._0x0160
#define FLEXCAN1_RXIMR57 FLEXCAN_BASE00._0x0164
#define FLEXCAN1_RXIMR58 FLEXCAN_BASE00._0x0168
#define FLEXCAN1_RXIMR59 FLEXCAN_BASE00._0x016c
#define FLEXCAN1_RXIMR60 FLEXCAN_BASE00._0x0170
#define FLEXCAN1_RXIMR61 FLEXCAN_BASE00._0x0174
#define FLEXCAN1_RXIMR62 FLEXCAN_BASE00._0x0178
#define FLEXCAN1_RXIMR63 FLEXCAN_BASE00._0x017c
#define FLEXCAN1_GFWR FLEXCAN_BASE00._0x01e0

#define FLEXCAN_BASE02 MAP_32BIT_REGISTER(0x401d4000)
#define FLEXCAN2_MCR FLEXCAN_BASE00._0x0000
#define FLEXCAN2_CTRL1 FLEXCAN_BASE00._0x0004
#define FLEXCAN2_TIMER FLEXCAN_BASE00._0x0008
#define FLEXCAN2_RXMGMASK FLEXCAN_BASE00._0x0010
#define FLEXCAN2_RX14MASK FLEXCAN_BASE00._0x0014
#define FLEXCAN2_RX15MASK FLEXCAN_BASE00._0x0018
#define FLEXCAN2_ECR FLEXCAN_BASE00._0x001c
#define FLEXCAN2_ESR1 FLEXCAN_BASE00._0x0020
#define FLEXCAN2_IMASK2 FLEXCAN_BASE00._0x0024
#define FLEXCAN2_IMASK1 FLEXCAN_BASE00._0x0028
#define FLEXCAN2_IFLAG2 FLEXCAN_BASE00._0x002c
#define FLEXCAN2_IFLAG1 FLEXCAN_BASE00._0x0030
#define FLEXCAN2_CTRL2 FLEXCAN_BASE00._0x0034
#define FLEXCAN2_ESR2 FLEXCAN_BASE00._0x0038
#define FLEXCAN2_CRCR FLEXCAN_BASE00._0x0044
#define FLEXCAN2_RXFGMASK FLEXCAN_BASE00._0x0048
#define FLEXCAN2_RXFIR FLEXCAN_BASE00._0x004c

#define FLEXCAN_BASE03 MAP_32BIT_REGISTER(0x401d4800)
#define FLEXCAN2_RXIMR0 FLEXCAN_BASE00._0x0080
#define FLEXCAN2_RXIMR1 FLEXCAN_BASE00._0x0084
#define FLEXCAN2_RXIMR2 FLEXCAN_BASE00._0x0088
#define FLEXCAN2_RXIMR3 FLEXCAN_BASE00._0x008c
#define FLEXCAN2_RXIMR4 FLEXCAN_BASE00._0x0090
#define FLEXCAN2_RXIMR5 FLEXCAN_BASE00._0x0094
#define FLEXCAN2_RXIMR6 FLEXCAN_BASE00._0x0098
#define FLEXCAN2_RXIMR7 FLEXCAN_BASE00._0x009c
#define FLEXCAN2_RXIMR8 FLEXCAN_BASE00._0x00a0
#define FLEXCAN2_RXIMR9 FLEXCAN_BASE00._0x00a4
#define FLEXCAN2_RXIMR10 FLEXCAN_BASE00._0x00a8
#define FLEXCAN2_RXIMR11 FLEXCAN_BASE00._0x00aC
#define FLEXCAN2_RXIMR12 FLEXCAN_BASE00._0x00b0
#define FLEXCAN2_RXIMR13 FLEXCAN_BASE00._0x00b4
#define FLEXCAN2_RXIMR14 FLEXCAN_BASE00._0x00b8
#define FLEXCAN2_RXIMR15 FLEXCAN_BASE00._0x00bC
#define FLEXCAN2_RXIMR16 FLEXCAN_BASE00._0x00c0
#define FLEXCAN2_RXIMR17 FLEXCAN_BASE00._0x00c4
#define FLEXCAN2_RXIMR18 FLEXCAN_BASE00._0x00c8
#define FLEXCAN2_RXIMR19 FLEXCAN_BASE00._0x00cc
#define FLEXCAN2_RXIMR20 FLEXCAN_BASE00._0x00d0
#define FLEXCAN2_RXIMR21 FLEXCAN_BASE00._0x00d4
#define FLEXCAN2_RXIMR22 FLEXCAN_BASE00._0x00d8
#define FLEXCAN2_RXIMR23 FLEXCAN_BASE00._0x00dc
#define FLEXCAN2_RXIMR24 FLEXCAN_BASE00._0x00e0
#define FLEXCAN2_RXIMR25 FLEXCAN_BASE00._0x00e4
#define FLEXCAN2_RXIMR26 FLEXCAN_BASE00._0x00e8
#define FLEXCAN2_RXIMR27 FLEXCAN_BASE00._0x00ec
#define FLEXCAN2_RXIMR28 FLEXCAN_BASE00._0x00f0
#define FLEXCAN2_RXIMR29 FLEXCAN_BASE00._0x00f4
#define FLEXCAN2_RXIMR30 FLEXCAN_BASE00._0x00f8
#define FLEXCAN2_RXIMR31 FLEXCAN_BASE00._0x00fc
#define FLEXCAN2_RXIMR32 FLEXCAN_BASE00._0x0100
#define FLEXCAN2_RXIMR33 FLEXCAN_BASE00._0x0104
#define FLEXCAN2_RXIMR34 FLEXCAN_BASE00._0x0108
#define FLEXCAN2_RXIMR35 FLEXCAN_BASE00._0x010c
#define FLEXCAN2_RXIMR36 FLEXCAN_BASE00._0x0110
#define FLEXCAN2_RXIMR37 FLEXCAN_BASE00._0x0114
#define FLEXCAN2_RXIMR38 FLEXCAN_BASE00._0x0118
#define FLEXCAN2_RXIMR39 FLEXCAN_BASE00._0x011c
#define FLEXCAN2_RXIMR40 FLEXCAN_BASE00._0x0120
#define FLEXCAN2_RXIMR41 FLEXCAN_BASE00._0x0124
#define FLEXCAN2_RXIMR42 FLEXCAN_BASE00._0x0128
#define FLEXCAN2_RXIMR43 FLEXCAN_BASE00._0x012c
#define FLEXCAN2_RXIMR44 FLEXCAN_BASE00._0x0130
#define FLEXCAN2_RXIMR45 FLEXCAN_BASE00._0x0134
#define FLEXCAN2_RXIMR46 FLEXCAN_BASE00._0x0138
#define FLEXCAN2_RXIMR47 FLEXCAN_BASE00._0x013c
#define FLEXCAN2_RXIMR48 FLEXCAN_BASE00._0x0140
#define FLEXCAN2_RXIMR49 FLEXCAN_BASE00._0x0144
#define FLEXCAN2_RXIMR50 FLEXCAN_BASE00._0x0148
#define FLEXCAN2_RXIMR51 FLEXCAN_BASE00._0x014c
#define FLEXCAN2_RXIMR52 FLEXCAN_BASE00._0x0150
#define FLEXCAN2_RXIMR53 FLEXCAN_BASE00._0x0154
#define FLEXCAN2_RXIMR54 FLEXCAN_BASE00._0x0158
#define FLEXCAN2_RXIMR55 FLEXCAN_BASE00._0x015c
#define FLEXCAN2_RXIMR56 FLEXCAN_BASE00._0x0160
#define FLEXCAN2_RXIMR57 FLEXCAN_BASE00._0x0164
#define FLEXCAN2_RXIMR58 FLEXCAN_BASE00._0x0168
#define FLEXCAN2_RXIMR59 FLEXCAN_BASE00._0x016c
#define FLEXCAN2_RXIMR60 FLEXCAN_BASE00._0x0170
#define FLEXCAN2_RXIMR61 FLEXCAN_BASE00._0x0174
#define FLEXCAN2_RXIMR62 FLEXCAN_BASE00._0x0178
#define FLEXCAN2_RXIMR63 FLEXCAN_BASE00._0x017c
#define FLEXCAN2_GFWR FLEXCAN_BASE00._0x01e0

/**
 * @brief: CANFD/FlexCAN3, Flexible Data-rate Controller Area Network Memory Map
 * 45.6.2, p.2654
 *
 *  The address range from offset 0x80 to 0x47F allocates the sixty-four 128-bit
 *  message buffers (MBs).The memory maps for the message buffers are in FlexCAN
 *  message buffer memory map.
 *
 * USBPHY Hardware Register Format Summary
 * Base Address: 0x401d8000
 *
 * // 85 registers
 **/
#define FLEXCANFD3_BASE00 MAP_32BIT_REGISTER(0x401d8000)
#define CANFD_MCR FLEXCANFD3_BASE00._0x0000 // Module Configuration register
#define CANFD_CTRL1 FLEXCANFD3_BASE00._0x0004 // Control 1 register
#define CANFD_TIMER FLEXCANFD3_BASE00._0x0008 // Free Running Timer
#define CANFD_RXMGMASK FLEXCANFD3_BASE00._0x0010 // RX Mailboxs Globl Mask reg.
#define CANFD_RX14MASK FLEXCANFD3_BASE00._0x0014 // RX 14 Mask register
#define CANFD_RX15MASK FLEXCANFD3_BASE00._0x0018 // RX 15 Mask register
#define CANFD_ECR FLEXCANFD3_BASE00._0x001C // Error Counter
#define CANFD_ESR1 FLEXCANFD3_BASE00._0x0020 // Error and Status 1 register
#define CANFD_IMASK2 FLEXCANFD3_BASE00._0x0024 // Interrupt Masks 2 register
#define CANFD_IMASK1 FLEXCANFD3_BASE00._0x0028 // Interrupt Masks 1 register
#define CANFD_IFLAG2 FLEXCANFD3_BASE00._0x002c // Interrupt Flags 2 register
#define CANFD_IFLAG1 FLEXCANFD3_BASE00._0x0030 // Interrupt Flags 1 register
#define CANFD_CTRL2 FLEXCANFD3_BASE00._0x0034 // Control 2 register
#define CANFD_ESR2 FLEXCANFD3_BASE00._0x0038 // Error and Status 2 register
#define CANFD_CRCR FLEXCANFD3_BASE00._0x0044 // CRC register
#define CANFD_RXFGMASK FLEXCANFD3_BASE00._0x0048 // Rx FIFO Global Mask register
#define CANFD_RXFIR FLEXCANFD3_BASE00._0x004c // Rx FIFO Information register
#define CANFD_CBT FLEXCANFD3_BASE00._0x0050 // CAN Bit Timing register

// CANFD RX Individual Mask Registers
#define FLEXCANFD3_BASE01 MAP_32BIT_REGISTER(0x401d8880)
#define CANFD_RXIMR00 FLEXCANFD3_BASE01._0x0000
#define CANFD_RXIMR01 FLEXCANFD3_BASE01._0x0004
#define CANFD_RXIMR02 FLEXCANFD3_BASE01._0x0008
#define CANFD_RXIMR03 FLEXCANFD3_BASE01._0x000c
#define CANFD_RXIMR04 FLEXCANFD3_BASE01._0x0010
#define CANFD_RXIMR05 FLEXCANFD3_BASE01._0x0014
#define CANFD_RXIMR06 FLEXCANFD3_BASE01._0x0018
#define CANFD_RXIMR07 FLEXCANFD3_BASE01._0x001c
#define CANFD_RXIMR08 FLEXCANFD3_BASE01._0x0020
#define CANFD_RXIMR09 FLEXCANFD3_BASE01._0x0024
#define CANFD_RXIMR10 FLEXCANFD3_BASE01._0x0028
#define CANFD_RXIMR11 FLEXCANFD3_BASE01._0x002c
#define CANFD_RXIMR12 FLEXCANFD3_BASE01._0x0030
#define CANFD_RXIMR13 FLEXCANFD3_BASE01._0x0034
#define CANFD_RXIMR14 FLEXCANFD3_BASE01._0x0038
#define CANFD_RXIMR15 FLEXCANFD3_BASE01._0x003c
#define CANFD_RXIMR16 FLEXCANFD3_BASE01._0x0040
#define CANFD_RXIMR17 FLEXCANFD3_BASE01._0x0044
#define CANFD_RXIMR18 FLEXCANFD3_BASE01._0x0048
#define CANFD_RXIMR19 FLEXCANFD3_BASE01._0x004c
#define CANFD_RXIMR20 FLEXCANFD3_BASE01._0x0050
#define CANFD_RXIMR21 FLEXCANFD3_BASE01._0x0054
#define CANFD_RXIMR22 FLEXCANFD3_BASE01._0x0058
#define CANFD_RXIMR23 FLEXCANFD3_BASE01._0x005c
#define CANFD_RXIMR24 FLEXCANFD3_BASE01._0x0060
#define CANFD_RXIMR25 FLEXCANFD3_BASE01._0x0064
#define CANFD_RXIMR26 FLEXCANFD3_BASE01._0x0068
#define CANFD_RXIMR27 FLEXCANFD3_BASE01._0x006c
#define CANFD_RXIMR28 FLEXCANFD3_BASE01._0x0070
#define CANFD_RXIMR29 FLEXCANFD3_BASE01._0x0074
#define CANFD_RXIMR30 FLEXCANFD3_BASE01._0x0078
#define CANFD_RXIMR31 FLEXCANFD3_BASE01._0x007c
#define CANFD_RXIMR32 FLEXCANFD3_BASE01._0x0080
#define CANFD_RXIMR33 FLEXCANFD3_BASE01._0x0084
#define CANFD_RXIMR34 FLEXCANFD3_BASE01._0x0088
#define CANFD_RXIMR35 FLEXCANFD3_BASE01._0x008c
#define CANFD_RXIMR36 FLEXCANFD3_BASE01._0x0090
#define CANFD_RXIMR37 FLEXCANFD3_BASE01._0x0094
#define CANFD_RXIMR38 FLEXCANFD3_BASE01._0x0098
#define CANFD_RXIMR39 FLEXCANFD3_BASE01._0x009c
#define CANFD_RXIMR40 FLEXCANFD3_BASE01._0x00a0
#define CANFD_RXIMR41 FLEXCANFD3_BASE01._0x00a4
#define CANFD_RXIMR42 FLEXCANFD3_BASE01._0x00a8
#define CANFD_RXIMR43 FLEXCANFD3_BASE01._0x00ac
#define CANFD_RXIMR44 FLEXCANFD3_BASE01._0x00b0
#define CANFD_RXIMR45 FLEXCANFD3_BASE01._0x00b4
#define CANFD_RXIMR46 FLEXCANFD3_BASE01._0x00b8
#define CANFD_RXIMR47 FLEXCANFD3_BASE01._0x00bc
#define CANFD_RXIMR48 FLEXCANFD3_BASE01._0x00c0
#define CANFD_RXIMR49 FLEXCANFD3_BASE01._0x00c4
#define CANFD_RXIMR50 FLEXCANFD3_BASE01._0x00c8
#define CANFD_RXIMR51 FLEXCANFD3_BASE01._0x00cc
#define CANFD_RXIMR52 FLEXCANFD3_BASE01._0x00d0
#define CANFD_RXIMR53 FLEXCANFD3_BASE01._0x00d4
#define CANFD_RXIMR54 FLEXCANFD3_BASE01._0x00d8
#define CANFD_RXIMR55 FLEXCANFD3_BASE01._0x00dc
#define CANFD_RXIMR56 FLEXCANFD3_BASE01._0x00e0
#define CANFD_RXIMR57 FLEXCANFD3_BASE01._0x00e4
#define CANFD_RXIMR58 FLEXCANFD3_BASE01._0x00e8
#define CANFD_RXIMR59 FLEXCANFD3_BASE01._0x00ec
#define CANFD_RXIMR60 FLEXCANFD3_BASE01._0x00f0
#define CANFD_RXIMR61 FLEXCANFD3_BASE01._0x00f4
#define CANFD_RXIMR62 FLEXCANFD3_BASE01._0x00f8
#define CANFD_RXIMR63 FLEXCANFD3_BASE01._0x00fc

#define CANFD00 FLEXCANFD3_BASE00._0x0000
#define CANFD_CTRL _OFFSET(CANFD00, 0xc00) // Rx FIFO Global Mask register
#define CANFD_BITTIMING _OFFSET(CANFD00, 0xc04) // Rx FIFO Information register
#define CANFD_CRC _OFFSET(CANFD00, 0xc08) // CAN Bit Timing register

/**
 * @brief: KPP, Key Pad Port Memory Map
 * 46.7 p.2733
 *
 * USBPHY Hardware Register Format Summary
 * Base Address: 0x401d8000
 *
 **/
#define KPP_BASE MAP_16BIT_REGISTER(0x401fc000)
#define KPP_KPCR KPP_BASE._0x0000
#define KPP_KPSR KPP_BASE._0x0002
#define KPP_KDDR KPP_BASE._0x0004
#define KPP_KPDR KPP_BASE._0x0006

/**
 * @brief: LPI2C, Low Power Inter-Integrated Circuit, Memory Map
 * 47.4.1 p.2758
 *
 * // 112 registers , 28 registers per each LPSPI
 * Base addresses:
 * LPI2C1: 0x403f0000
 * LPI2C2: 0x403f4000
 * LPI2C3: 0x403f8000
 * LPI2C4: 0x403fc000
 **/
#define LPI2C1_BASE MAP_32BIT_REGISTER(0x403f0000)
#define LPI2C1_VERID LPI2C1_BASE._0x0000 // Version ID Register
#define LPI2C1_PARAM LPI2C1_BASE._0x004 // Parameter Register
#define LPI2C1_MCR LPI2C1_BASE._0x0010 // Master Control Register
#define LPI2C1_MSR LPI2C1_BASE._0x0014 // Master Status Register
#define LPI2C1_MIER LPI2C1_BASE._0x0018 // Master Interrupt Enable Register
#define LPI2C1_MDER LPI2C1_BASE._0x001c // Master DMA Enable Register
#define LPI2C1_MCFGR0 LPI2C1_BASE._0x0020 // Master Config. Register 0
#define LPI2C1_MCFGR1 LPI2C1_BASE._0x0024 // Master Config. Register 1
#define LPI2C1_MCFGR2 LPI2C1_BASE._0x0028 // Master Config. Register 2
#define LPI2C1_MCFGR3 LPI2C1_BASE._0x002c // Master Config. Register 3
#define LPI2C1_MDMR LPI2C1_BASE._0x0040 // Master Data Match Register
#define LPI2C1_MCCR0 LPI2C1_BASE._0x0048 // Master Clock Config. Register 0
#define LPI2C1_MCCR1 LPI2C1_BASE._0x0050 // Master Clock Config. Register 1
#define LPI2C1_MFCR LPI2C1_BASE._0x0058 // Master FIFO Control Register
#define LPI2C1_MFSR LPI2C1_BASE._0x005c // Master FIFO Status Register
#define LPI2C1_MTDR LPI2C1_BASE._0x0060 // Master Transmit Data Register
#define LPI2C1_MRDR LPI2C1_BASE._0x0070 // Master Receive Data Register
#define LPI2C1_SCR LPI2C1_BASE._0x0110 // Slave Control Register
#define LPI2C1_SSR LPI2C1_BASE._0x0114 // Slave Status Register
#define LPI2C1_SIER LPI2C1_BASE._0x0118 // Slave Interrupt Enable Register
#define LPI2C1_SDER LPI2C1_BASE._0x011C // Slave DMA Enable Register
#define LPI2C1_SCFGR1 LPI2C1_BASE._0x0124 // Slave Config. Register 1
#define LPI2C1_SCFGR2 LPI2C1_BASE._0x0128 // Slave Config. Register 2
#define LPI2C1_SAMR LPI2C1_BASE._0x0140 // Slave Address Match Register
#define LPI2C1_SASR LPI2C1_BASE._0x0150 // Slave Address Status Register
#define LPI2C1_STAR LPI2C1_BASE._0x0154 // Slave Transmit ACK Register
#define LPI2C1_STDR LPI2C1_BASE._0x0160 // Slave Transmit Data Register
#define LPI2C1_SRDR LPI2C1_BASE._0x0170 // Slave Receive Data Register

#define LPI2C2_BASE MAP_32BIT_REGISTER(0x403f4000)
#define LPI2C2_VERID LPI2C2_BASE._0x0000 // Version ID Register
#define LPI2C2_PARAM LPI2C2_BASE._0x004 // Parameter Register
#define LPI2C2_MCR LPI2C2_BASE._0x0010 // Master Control Register
#define LPI2C2_MSR LPI2C2_BASE._0x0014 // Master Status Register
#define LPI2C2_MIER LPI2C2_BASE._0x0018 // Master Interrupt Enable Register
#define LPI2C2_MDER LPI2C2_BASE._0x001c // Master DMA Enable Register
#define LPI2C2_MCFGR0 LPI2C2_BASE._0x0020 // Master Config. Register 0
#define LPI2C2_MCFGR1 LPI2C2_BASE._0x0024 // Master Config. Register 1
#define LPI2C2_MCFGR2 LPI2C2_BASE._0x0028 // Master Config. Register 2
#define LPI2C2_MCFGR3 LPI2C2_BASE._0x002c // Master Config. Register 3
#define LPI2C2_MDMR LPI2C2_BASE._0x0040 // Master Data Match Register
#define LPI2C2_MCCR0 LPI2C2_BASE._0x0048 // Master Clock Config. Register 0
#define LPI2C2_MCCR1 LPI2C2_BASE._0x0050 // Master Clock Config. Register 1
#define LPI2C2_MFCR LPI2C2_BASE._0x0058 // Master FIFO Control Register
#define LPI2C2_MFSR LPI2C2_BASE._0x005c // Master FIFO Status Register
#define LPI2C2_MTDR LPI2C2_BASE._0x0060 // Master Transmit Data Register
#define LPI2C2_MRDR LPI2C2_BASE._0x0070 // Master Receive Data Register
#define LPI2C2_SCR LPI2C2_BASE._0x0110 // Slave Control Register
#define LPI2C2_SSR LPI2C2_BASE._0x0114 // Slave Status Register
#define LPI2C2_SIER LPI2C2_BASE._0x0118 // Slave Interrupt Enable Register
#define LPI2C2_SDER LPI2C2_BASE._0x011C // Slave DMA Enable Register
#define LPI2C2_SCFGR1 LPI2C2_BASE._0x0124 // Slave Config. Register 1
#define LPI2C2_SCFGR2 LPI2C2_BASE._0x0128 // Slave Config. Register 2
#define LPI2C2_SAMR LPI2C2_BASE._0x0140 // Slave Address Match Register
#define LPI2C2_SASR LPI2C2_BASE._0x0150 // Slave Address Status Register
#define LPI2C2_STAR LPI2C2_BASE._0x0154 // Slave Transmit ACK Register
#define LPI2C2_STDR LPI2C2_BASE._0x0160 // Slave Transmit Data Register
#define LPI2C2_SRDR LPI2C2_BASE._0x0170 // Slave Receive Data Register

#define LPI2C3_BASE MAP_32BIT_REGISTER(0x403f8000)
#define LPI2C3_VERID LPI2C3_BASE._0x0000 // Version ID Register
#define LPI2C3_PARAM LPI2C3_BASE._0x004 // Parameter Register
#define LPI2C3_MCR LPI2C3_BASE._0x0010 // Master Control Register
#define LPI2C3_MSR LPI2C3_BASE._0x0014 // Master Status Register
#define LPI2C3_MIER LPI2C3_BASE._0x0018 // Master Interrupt Enable Register
#define LPI2C3_MDER LPI2C3_BASE._0x001c // Master DMA Enable Register
#define LPI2C3_MCFGR0 LPI2C3_BASE._0x0020 // Master Config. Register 0
#define LPI2C3_MCFGR1 LPI2C3_BASE._0x0024 // Master Config. Register 1
#define LPI2C3_MCFGR2 LPI2C3_BASE._0x0028 // Master Config. Register 2
#define LPI2C3_MCFGR3 LPI2C3_BASE._0x002c // Master Config. Register 3
#define LPI2C3_MDMR LPI2C3_BASE._0x0040 // Master Data Match Register
#define LPI2C3_MCCR0 LPI2C3_BASE._0x0048 // Master Clock Config. Register 0
#define LPI2C3_MCCR1 LPI2C3_BASE._0x0050 // Master Clock Config. Register 1
#define LPI2C3_MFCR LPI2C3_BASE._0x0058 // Master FIFO Control Register
#define LPI2C3_MFSR LPI2C3_BASE._0x005c // Master FIFO Status Register
#define LPI2C3_MTDR LPI2C3_BASE._0x0060 // Master Transmit Data Register
#define LPI2C3_MRDR LPI2C3_BASE._0x0070 // Master Receive Data Register
#define LPI2C3_SCR LPI2C3_BASE._0x0110 // Slave Control Register
#define LPI2C3_SSR LPI2C3_BASE._0x0114 // Slave Status Register
#define LPI2C3_SIER LPI2C3_BASE._0x0118 // Slave Interrupt Enable Register
#define LPI2C3_SDER LPI2C3_BASE._0x011C // Slave DMA Enable Register
#define LPI2C3_SCFGR1 LPI2C3_BASE._0x0124 // Slave Config. Register 1
#define LPI2C3_SCFGR2 LPI2C3_BASE._0x0128 // Slave Config. Register 2
#define LPI2C3_SAMR LPI2C3_BASE._0x0140 // Slave Address Match Register
#define LPI2C3_SASR LPI2C3_BASE._0x0150 // Slave Address Status Register
#define LPI2C3_STAR LPI2C3_BASE._0x0154 // Slave Transmit ACK Register
#define LPI2C3_STDR LPI2C3_BASE._0x0160 // Slave Transmit Data Register
#define LPI2C3_SRDR LPI2C3_BASE._0x0170 // Slave Receive Data Register

#define LPI2C4_BASE MAP_32BIT_REGISTER(0x403fc000)
#define LPI2C4_VERID LPI2C4_BASE._0x0000 // Version ID Register
#define LPI2C4_PARAM LPI2C4_BASE._0x004 // Parameter Register
#define LPI2C4_MCR LPI2C4_BASE._0x0010 // Master Control Register
#define LPI2C4_MSR LPI2C4_BASE._0x0014 // Master Status Register
#define LPI2C4_MIER LPI2C4_BASE._0x0018 // Master Interrupt Enable Register
#define LPI2C4_MDER LPI2C4_BASE._0x001c // Master DMA Enable Register
#define LPI2C4_MCFGR0 LPI2C4_BASE._0x0020 // Master Config. Register 0
#define LPI2C4_MCFGR1 LPI2C4_BASE._0x0024 // Master Config. Register 1
#define LPI2C4_MCFGR2 LPI2C4_BASE._0x0028 // Master Config. Register 2
#define LPI2C4_MCFGR3 LPI2C4_BASE._0x002c // Master Config. Register 3
#define LPI2C4_MDMR LPI2C4_BASE._0x0040 // Master Data Match Register
#define LPI2C4_MCCR0 LPI2C4_BASE._0x0048 // Master Clock Config. Register 0
#define LPI2C4_MCCR1 LPI2C4_BASE._0x0050 // Master Clock Config. Register 1
#define LPI2C4_MFCR LPI2C4_BASE._0x0058 // Master FIFO Control Register
#define LPI2C4_MFSR LPI2C4_BASE._0x005c // Master FIFO Status Register
#define LPI2C4_MTDR LPI2C4_BASE._0x0060 // Master Transmit Data Register
#define LPI2C4_MRDR LPI2C4_BASE._0x0070 // Master Receive Data Register
#define LPI2C4_SCR LPI2C4_BASE._0x0110 // Slave Control Register
#define LPI2C4_SSR LPI2C4_BASE._0x0114 // Slave Status Register
#define LPI2C4_SIER LPI2C4_BASE._0x0118 // Slave Interrupt Enable Register
#define LPI2C4_SDER LPI2C4_BASE._0x011C // Slave DMA Enable Register
#define LPI2C4_SCFGR1 LPI2C4_BASE._0x0124 // Slave Configuration Register 1
#define LPI2C4_SCFGR2 LPI2C4_BASE._0x0128 // Slave Configuration Register 2
#define LPI2C4_SAMR LPI2C4_BASE._0x0140 // Slave Address Match Register
#define LPI2C4_SASR LPI2C4_BASE._0x0150 // Slave Address Status Register
#define LPI2C4_STAR LPI2C4_BASE._0x0154 // Slave Transmit ACK Register
#define LPI2C4_STDR LPI2C4_BASE._0x0160 // Slave Transmit Data Register
#define LPI2C4_SRDR LPI2C4_BASE._0x0170 // Slave Receive Data Register

/**
 * @brief: LPSPI, Low Power Serial Peripheral Interface, Memory Map
 * 48.4.1 p.2810
 *
 * // 68 registers , 17 registers per each LPSPI
 * Base addresses:
 * LPSPI1: 0x40394000
 * LPSPI2: 0x40398000
 * LPSPI3: 0x4039c000
 * LPSPI4: 0x403a0000
 **/

// LPSPI1
#define LPSPI1_BASE MAP_32BIT_REGISTER(0x40394000)
#define LPSPI1_VERID LPSPI1_BASE._0x0000 // Version ID Register
#define LPSPI1_PARAM LPSPI1_BASE._0x0004 // Parameter Register
#define LPSPI1_CR LPSPI1_BASE._0x0010 // Control Register
#define LPSPI1_SR LPSPI1_BASE._0x0014 // Status Register
#define LPSPI1_IER LPSPI1_BASE._0x0018 // Interrupt Enable Register
#define LPSPI1_DER LPSPI1_BASE._0x001c // DMA Enable Register
#define LPSPI1_CFGR0 LPSPI1_BASE._0x0020 // Configuration Register 0
#define LPSPI1_CFGR1 LPSPI1_BASE._0x0024 // Configuration Register 1
#define LPSPI1_DMR0 LPSPI1_BASE._0x0030 // Data Match Register 0
#define LPSPI1_DMR1 LPSPI1_BASE._0x0034 // Data Match Register 1
#define LPSPI1_CCR LPSPI1_BASE._0x0040 // Clock Configuration Register
#define LPSPI1_FCR LPSPI1_BASE._0x0058 // FIFO Control Register
#define LPSPI1_FSR LPSPI1_BASE._0x005c // FIFO Status Register
#define LPSPI1_TCR LPSPI1_BASE._0x0060 // Transmit Command Register
#define LPSPI1_TDR LPSPI1_BASE._0x0064 // Transmit Data Register
#define LPSPI1_RSR LPSPI1_BASE._0x0070 // Receive Status Register
#define LPSPI1_RDR LPSPI1_BASE._0x0074 // Receive Data Register

// LPSPI2
#define LPSPI2_BASE MAP_32BIT_REGISTER(0x40394000)
#define LPSPI2_VERID LPSPI2_BASE._0x0000 // Version ID Register
#define LPSPI2_PARAM LPSPI2_BASE._0x0004 // Parameter Register
#define LPSPI2_CR LPSPI2_BASE._0x0010 // Control Register
#define LPSPI2_SR LPSPI2_BASE._0x0014 // Status Register
#define LPSPI2_IER LPSPI2_BASE._0x0018 // Interrupt Enable Register
#define LPSPI2_DER LPSPI2_BASE._0x001c // DMA Enable Register
#define LPSPI2_CFGR0 LPSPI2_BASE._0x0020 // Configuration Register 0
#define LPSPI2_CFGR1 LPSPI2_BASE._0x0024 // Configuration Register 1
#define LPSPI2_DMR0 LPSPI2_BASE._0x0030 // Data Match Register 0
#define LPSPI2_DMR1 LPSPI2_BASE._0x0034 // Data Match Register 1
#define LPSPI2_CCR LPSPI2_BASE._0x0040 // Clock Configuration Register
#define LPSPI2_FCR LPSPI2_BASE._0x0058 // FIFO Control Register
#define LPSPI2_FSR LPSPI2_BASE._0x005c // FIFO Status Register
#define LPSPI2_TCR LPSPI2_BASE._0x0060 // Transmit Command Register
#define LPSPI2_TDR LPSPI2_BASE._0x0064 // Transmit Data Register
#define LPSPI2_RSR LPSPI2_BASE._0x0070 // Receive Status Register
#define LPSPI2_RDR LPSPI2_BASE._0x0074 // Receive Data Register

// LPSPI3
#define LPSPI3_BASE MAP_32BIT_REGISTER(0x40394000)
#define LPSPI3_VERID LPSPI3_BASE._0x0000 // Version ID Register
#define LPSPI3_PARAM LPSPI3_BASE._0x0004 // Parameter Register
#define LPSPI3_CR LPSPI3_BASE._0x0010 // Control Register
#define LPSPI3_SR LPSPI3_BASE._0x0014 // Status Register
#define LPSPI3_IER LPSPI3_BASE._0x0018 // Interrupt Enable Register
#define LPSPI3_DER LPSPI3_BASE._0x001c // DMA Enable Register
#define LPSPI3_CFGR0 LPSPI3_BASE._0x0020 // Configuration Register 0
#define LPSPI3_CFGR1 LPSPI3_BASE._0x0024 // Configuration Register 1
#define LPSPI3_DMR0 LPSPI3_BASE._0x0030 // Data Match Register 0
#define LPSPI3_DMR1 LPSPI3_BASE._0x0034 // Data Match Register 1
#define LPSPI3_CCR LPSPI3_BASE._0x0040 // Clock Configuration Register
#define LPSPI3_FCR LPSPI3_BASE._0x0058 // FIFO Control Register
#define LPSPI3_FSR LPSPI3_BASE._0x005c // FIFO Status Register
#define LPSPI3_TCR LPSPI3_BASE._0x0060 // Transmit Command Register
#define LPSPI3_TDR LPSPI3_BASE._0x0064 // Transmit Data Register
#define LPSPI3_RSR LPSPI3_BASE._0x0070 // Receive Status Register
#define LPSPI3_RDR LPSPI3_BASE._0x0074 // Receive Data Register

// LPSPI4
#define LPSPI4_BASE MAP_32BIT_REGISTER(0x40394000)
#define LPSPI4_VERID LPSPI4_BASE._0x0000 // Version ID Register
#define LPSPI4_PARAM LPSPI4_BASE._0x0004 // Parameter Register
#define LPSPI4_CR LPSPI4_BASE._0x0010 // Control Register
#define LPSPI4_SR LPSPI4_BASE._0x0014 // Status Register
#define LPSPI4_IER LPSPI4_BASE._0x0018 // Interrupt Enable Register
#define LPSPI4_DER LPSPI4_BASE._0x001c // DMA Enable Register
#define LPSPI4_CFGR0 LPSPI4_BASE._0x0020 // Configuration Register 0
#define LPSPI4_CFGR1 LPSPI4_BASE._0x0024 // Configuration Register 1
#define LPSPI4_DMR0 LPSPI4_BASE._0x0030 // Data Match Register 0
#define LPSPI4_DMR1 LPSPI4_BASE._0x0034 // Data Match Register 1
#define LPSPI4_CCR LPSPI4_BASE._0x0040 // Clock Configuration Register
#define LPSPI4_FCR LPSPI4_BASE._0x0058 // FIFO Control Register
#define LPSPI4_FSR LPSPI4_BASE._0x005c // FIFO Status Register
#define LPSPI4_TCR LPSPI4_BASE._0x0060 // Transmit Command Register
#define LPSPI4_TDR LPSPI4_BASE._0x0064 // Transmit Data Register
#define LPSPI4_RSR LPSPI4_BASE._0x0070 // Receive Status Register
#define LPSPI4_RDR LPSPI4_BASE._0x0074 // Receive Data Register

/**
 * @brief: LPUART, Low Power Universal Async. Receiver/transmitter, Memory Map
 * 49.4 p.2853
 *
 * // 96 registers ,12 registers per each LPUART
 * Base addresses:
 * LPUART(n): 0x40184000 + (n-1) * 0x4000,
 *
 * LPUART1: 0x40184000
 * LPUART2: 0x40188000
 * LPUART3: 0x4018c000
 * LPUART4: 0x40190000
 * LPUART5: 0x40194000
 * LPUART6: 0x40198000
 * LPUART7: 0x4019c000
 * LPUART8: 0x401a0000
 * where n goes from 1 to 8.
 **/

// LPUART1
#define LPUART1_BASE MAP_32BIT_REGISTER(0x40184000)
#define LPUART1_VERID LPUART1_BASE._0x0000 // Version ID Register
#define LPUART1_PARAM LPUART1_BASE._0x0004 // Parameter Register
#define LPUART1_GLOBAL LPUART1_BASE._0x0008 // LPUART Global Register
#define LPUART1_PINCFG LPUART1_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART1_BAUD LPUART1_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART1_STAT LPUART1_BASE._0x0014 // LPUART Status Register
#define LPUART1_CTRL LPUART1_BASE._0x0018 // LPUART Control Register
#define LPUART1_DATA LPUART1_BASE._0x001c // LPUART Data Register
#define LPUART1_MATCH LPUART1_BASE._0x0020 // LPUART Match Address Register
#define LPUART1_MODIR LPUART1_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART1_FIFO LPUART1_BASE._0x0028 // LPUART FIFO Register
#define LPUART1_WATER LPUART1_BASE._0x002c // LPUART Watermark Register

// LPUART2
#define LPUART2_BASE MAP_32BIT_REGISTER(0x40188000)
#define LPUART2_VERID LPUART2_BASE._0x0000 // Version ID Register
#define LPUART2_PARAM LPUART2_BASE._0x0004 // Parameter Register
#define LPUART2_GLOBAL LPUART2_BASE._0x0008 // LPUART Global Register
#define LPUART2_PINCFG LPUART2_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART2_BAUD LPUART2_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART2_STAT LPUART2_BASE._0x0014 // LPUART Status Register
#define LPUART2_CTRL LPUART2_BASE._0x0018 // LPUART Control Register
#define LPUART2_DATA LPUART2_BASE._0x001c // LPUART Data Register
#define LPUART2_MATCH LPUART2_BASE._0x0020 // LPUART Match Address Register
#define LPUART2_MODIR LPUART2_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART2_FIFO LPUART2_BASE._0x0028 // LPUART FIFO Register
#define LPUART2_WATER LPUART2_BASE._0x002c // LPUART Watermark Register

// LPUART3
#define LPUART3_BASE MAP_32BIT_REGISTER(0x4018c000)
#define LPUART3_VERID LPUART3_BASE._0x0000 // Version ID Register
#define LPUART3_PARAM LPUART3_BASE._0x0004 // Parameter Register
#define LPUART3_GLOBAL LPUART3_BASE._0x0008 // LPUART Global Register
#define LPUART3_PINCFG LPUART3_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART3_BAUD LPUART3_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART3_STAT LPUART3_BASE._0x0014 // LPUART Status Register
#define LPUART3_CTRL LPUART3_BASE._0x0018 // LPUART Control Register
#define LPUART3_DATA LPUART3_BASE._0x001c // LPUART Data Register
#define LPUART3_MATCH LPUART3_BASE._0x0020 // LPUART Match Address Register
#define LPUART3_MODIR LPUART3_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART3_FIFO LPUART3_BASE._0x0028 // LPUART FIFO Register
#define LPUART3_WATER LPUART3_BASE._0x002c // LPUART Watermark Register

// LPUART4
#define LPUART4_BASE MAP_32BIT_REGISTER(0x40190000)
#define LPUART4_VERID LPUART4_BASE._0x0000 // Version ID Register
#define LPUART4_PARAM LPUART4_BASE._0x0004 // Parameter Register
#define LPUART4_GLOBAL LPUART4_BASE._0x0008 // LPUART Global Register
#define LPUART4_PINCFG LPUART4_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART4_BAUD LPUART4_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART4_STAT LPUART4_BASE._0x0014 // LPUART Status Register
#define LPUART4_CTRL LPUART4_BASE._0x0018 // LPUART Control Register
#define LPUART4_DATA LPUART4_BASE._0x001c // LPUART Data Register
#define LPUART4_MATCH LPUART4_BASE._0x0020 // LPUART Match Address Register
#define LPUART4_MODIR LPUART4_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART4_FIFO LPUART4_BASE._0x0028 // LPUART FIFO Register
#define LPUART4_WATER LPUART4_BASE._0x002c // LPUART Watermark Register

// LPUART5
#define LPUART5_BASE MAP_32BIT_REGISTER(0x40194000)
#define LPUART5_VERID LPUART5_BASE._0x0000 // Version ID Register
#define LPUART5_PARAM LPUART5_BASE._0x0004 // Parameter Register
#define LPUART5_GLOBAL LPUART5_BASE._0x0008 // LPUART Global Register
#define LPUART5_PINCFG LPUART5_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART5_BAUD LPUART5_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART5_STAT LPUART5_BASE._0x0014 // LPUART Status Register
#define LPUART5_CTRL LPUART5_BASE._0x0018 // LPUART Control Register
#define LPUART5_DATA LPUART5_BASE._0x001c // LPUART Data Register
#define LPUART5_MATCH LPUART5_BASE._0x0020 // LPUART Match Address Register
#define LPUART5_MODIR LPUART5_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART5_FIFO LPUART5_BASE._0x0028 // LPUART FIFO Register
#define LPUART5_WATER LPUART5_BASE._0x002c // LPUART Watermark Register

// LPUART6
#define LPUART6_BASE MAP_32BIT_REGISTER(0x40198000)
#define LPUART6_VERID LPUART6_BASE._0x0000 // Version ID Register
#define LPUART6_PARAM LPUART6_BASE._0x0004 // Parameter Register
#define LPUART6_GLOBAL LPUART6_BASE._0x0008 // LPUART Global Register
#define LPUART6_PINCFG LPUART6_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART6_BAUD LPUART6_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART6_STAT LPUART6_BASE._0x0014 // LPUART Status Register
#define LPUART6_CTRL LPUART6_BASE._0x0018 // LPUART Control Register
#define LPUART6_DATA LPUART6_BASE._0x001c // LPUART Data Register
#define LPUART6_MATCH LPUART6_BASE._0x0020 // LPUART Match Address Register
#define LPUART6_MODIR LPUART6_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART6_FIFO LPUART6_BASE._0x0028 // LPUART FIFO Register
#define LPUART6_WATER LPUART6_BASE._0x002c // LPUART Watermark Register

// LPUART7
#define LPUART7_BASE MAP_32BIT_REGISTER(0x4019c000)
#define LPUART7_VERID LPUART7_BASE._0x0000 // Version ID Register
#define LPUART7_PARAM LPUART7_BASE._0x0004 // Parameter Register
#define LPUART7_GLOBAL LPUART7_BASE._0x0008 // LPUART Global Register
#define LPUART7_PINCFG LPUART7_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART7_BAUD LPUART7_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART7_STAT LPUART7_BASE._0x0014 // LPUART Status Register
#define LPUART7_CTRL LPUART7_BASE._0x0018 // LPUART Control Register
#define LPUART7_DATA LPUART7_BASE._0x001c // LPUART Data Register
#define LPUART7_MATCH LPUART7_BASE._0x0020 // LPUART Match Address Register
#define LPUART7_MODIR LPUART7_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART7_FIFO LPUART7_BASE._0x0028 // LPUART FIFO Register
#define LPUART7_WATER LPUART7_BASE._0x002c // LPUART Watermark Register

// LPUART8
#define LPUART8_BASE MAP_32BIT_REGISTER(0x401a0000)
#define LPUART8_VERID LPUART8_BASE._0x0000 // Version ID Register
#define LPUART8_PARAM LPUART8_BASE._0x0004 // Parameter Register
#define LPUART8_GLOBAL LPUART8_BASE._0x0008 // LPUART Global Register
#define LPUART8_PINCFG LPUART8_BASE._0x000c // LPUART Pin Configuration Register
#define LPUART8_BAUD LPUART8_BASE._0x0010 // LPUART Baud Rate Register
#define LPUART8_STAT LPUART8_BASE._0x0014 // LPUART Status Register
#define LPUART8_CTRL LPUART8_BASE._0x0018 // LPUART Control Register
#define LPUART8_DATA LPUART8_BASE._0x001c // LPUART Data Register
#define LPUART8_MATCH LPUART8_BASE._0x0020 // LPUART Match Address Register
#define LPUART8_MODIR LPUART8_BASE._0x0024 // LPUART Modem IrDA Register
#define LPUART8_FIFO LPUART8_BASE._0x0028 // LPUART FIFO Register
#define LPUART8_WATER LPUART8_BASE._0x002c // LPUART Watermark Register

/**
 * @brief: FLEXIO, Flexible Input/Output, Memory Map
 * 50.5 p.2853
 *
 * Per each: 180 registers, (12 + (4*12)) = 60 registers per each FLEXIO
 * Number of Pin IO is 2^4 for FlexIO1,
 * 2^5 for FlexIO2 and FlexIO3
 *
 * Base addresses:
 * FlexIO1: 0x401ac000
 * FlexIO2: 0x401b0000
 * FlexIO3: 0x42020000
 **/

// FLEXIO 1
#define FLEXIO1_BASE MAP_32BIT_REGISTER(0x401ac000)
#define FLEXIO1_VERID FLEXIO1_BASE._0x0000 // Version ID
#define FLEXIO1_PARAM FLEXIO1_BASE._0x0004 // Parameter
#define FLEXIO1_CTRL FLEXIO1_BASE._0x0008 // FlexIO Control
#define FLEXIO1_PIN FLEXIO1_BASE._0x0000 // hPin State
#define FLEXIO1_SHIFTSTAT FLEXIO1_BASE._0x0010 // Shifter Status
#define FLEXIO1_SHIFTERR FLEXIO1_BASE._0x0014 // Shifter Error
#define FLEXIO1_TIMSTAT FLEXIO1_BASE._0x0018 // Timer Status
#define FLEXIO1_SHIFTSIEN FLEXIO1_BASE._0x0020 // Shifter Status Intrpt Enable
#define FLEXIO1_SHIFTEIEN FLEXIO1_BASE._0x0024 // Shifter Error Intrpt Enable
#define FLEXIO1_TIMIEN FLEXIO1_BASE._0x0028 // Timer Interrupt Enable
#define FLEXIO1_SHIFTSDEN FLEXIO1_BASE._0x0030 // Shifter Status DMA Enable
#define FLEXIO1_SHIFTSTATE FLEXIO1_BASE._0x0040 // Shifter State
#define FLEXIO1_SHIFTCTL0 FLEXIO1_BASE._0x0080 // Shifter Control
#define FLEXIO1_SHIFTCTL1 FLEXIO1_BASE._0x0080 // Shifter Control
#define FLEXIO1_SHIFTCTL2 FLEXIO1_BASE._0x0080 // Shifter Control
#define FLEXIO1_SHIFTCTL3 FLEXIO1_BASE._0x0080 // Shifter Control
#define FLEXIO1_SHIFTCFG0 FLEXIO1_BASE._0x0080 // Shifter Conf.
#define FLEXIO1_SHIFTCFG1 FLEXIO1_BASE._0x0080 // Shifter Conf.
#define FLEXIO1_SHIFTCFG2 FLEXIO1_BASE._0x0080 // Shifter Conf.
#define FLEXIO1_SHIFTCFG3 FLEXIO1_BASE._0x0080 // Shifter Conf.
#define FLEXIO1_SHIFTBUF0 FLEXIO1_BASE._0x0080 // Shifter Buffer
#define FLEXIO1_SHIFTBUF1 FLEXIO1_BASE._0x0080 // Shifter Buffer
#define FLEXIO1_SHIFTBUF2 FLEXIO1_BASE._0x0080 // Shifter Buffer
#define FLEXIO1_SHIFTBUF3 FLEXIO1_BASE._0x0080 // Shifter Buffer
#define FLEXIO1_SHIFTBUFBIS0 FLEXIO1_BASE._0x0080 // Shifter bi Swap
#define FLEXIO1_SHIFTBUFBIS1 FLEXIO1_BASE._0x0080 // Shifter bi Swap
#define FLEXIO1_SHIFTBUFBIS2 FLEXIO1_BASE._0x0080 // Shifter bi Swap
#define FLEXIO1_SHIFTBUFBIS3 FLEXIO1_BASE._0x0080 // Shifter bi Swap
#define FLEXIO1_SHIFTBUFBYS0 FLEXIO1_BASE._0x0080 // Shifter By Swap
#define FLEXIO1_SHIFTBUFBYS1 FLEXIO1_BASE._0x0080 // Shifter By Swap
#define FLEXIO1_SHIFTBUFBYS2 FLEXIO1_BASE._0x0080 // Shifter By Swap
#define FLEXIO1_SHIFTBUFBYS3 FLEXIO1_BASE._0x0080 // Shifter By Swap
#define FLEXIO1_SHIFTBUFBBS0 FLEXIO1_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO1_SHIFTBUFBBS1 FLEXIO1_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO1_SHIFTBUFBBS2 FLEXIO1_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO1_SHIFTBUFBBS3 FLEXIO1_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO1_TIMCTL0 FLEXIO1_BASE._0x0080 // Timer Control
#define FLEXIO1_TIMCTL1 FLEXIO1_BASE._0x0080 // Timer Control
#define FLEXIO1_TIMCTL2 FLEXIO1_BASE._0x0080 // Timer Control
#define FLEXIO1_TIMCTL3 FLEXIO1_BASE._0x0080 // Timer Control
#define FLEXIO1_TIMCFG0 FLEXIO1_BASE._0x0080 // Timer Conf.
#define FLEXIO1_TIMCFG1 FLEXIO1_BASE._0x0080 // Timer Conf.
#define FLEXIO1_TIMCFG2 FLEXIO1_BASE._0x0080 // Timer Conf.
#define FLEXIO1_TIMCFG3 FLEXIO1_BASE._0x0080 // Timer Conf.
#define FLEXIO1_TIMCMP0 FLEXIO1_BASE._0x0080 // Timer Comp.
#define FLEXIO1_TIMCMP1 FLEXIO1_BASE._0x0080 // Timer Comp.
#define FLEXIO1_TIMCMP2 FLEXIO1_BASE._0x0080 // Timer Comp.
#define FLEXIO1_TIMCMP3 FLEXIO1_BASE._0x0080 // Timer Comp.
#define FLEXIO1_SHIFTBUFNBS0 FLEXIO1_BASE._0x0080 // Shifter nibble By
#define FLEXIO1_SHIFTBUFNBS1 FLEXIO1_BASE._0x0080 // Shifter nibble By
#define FLEXIO1_SHIFTBUFNBS2 FLEXIO1_BASE._0x0080 // Shifter nibble By
#define FLEXIO1_SHIFTBUFNBS3 FLEXIO1_BASE._0x0080 // Shifter nibble By
#define FLEXIO1_SHIFTBUFHWS0 FLEXIO1_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO1_SHIFTBUFHWS1 FLEXIO1_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO1_SHIFTBUFHWS2 FLEXIO1_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO1_SHIFTBUFHWS3 FLEXIO1_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO1_SHIFTBUFNIS0 FLEXIO1_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO1_SHIFTBUFNIS1 FLEXIO1_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO1_SHIFTBUFNIS2 FLEXIO1_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO1_SHIFTBUFNIS3 FLEXIO1_BASE._0x0080 // Shifter nibble Swapped

// FLEXIO 2
#define FLEXIO2_BASE MAP_32BIT_REGISTER(0x401ac000)
#define FLEXIO2_VERID FLEXIO2_BASE._0x0000 // Version ID
#define FLEXIO2_PARAM FLEXIO2_BASE._0x0004 // Parameter
#define FLEXIO2_CTRL FLEXIO2_BASE._0x0008 // FlexIO Control
#define FLEXIO2_PIN FLEXIO2_BASE._0x0000 // hPin State
#define FLEXIO2_SHIFTSTAT FLEXIO2_BASE._0x0010 // Shifter Status
#define FLEXIO2_SHIFTERR FLEXIO2_BASE._0x0014 // Shifter Error
#define FLEXIO2_TIMSTAT FLEXIO2_BASE._0x0018 // Timer Status
#define FLEXIO2_SHIFTSIEN FLEXIO2_BASE._0x0020 // Shifter Status Intrpt Enable
#define FLEXIO2_SHIFTEIEN FLEXIO2_BASE._0x0024 // Shifter Error Intrpt Enable
#define FLEXIO2_TIMIEN FLEXIO2_BASE._0x0028 // Timer Interrupt Enable
#define FLEXIO2_SHIFTSDEN FLEXIO2_BASE._0x0030 // Shifter Status DMA Enable
#define FLEXIO2_SHIFTSTATE FLEXIO2_BASE._0x0040 // Shifter State
#define FLEXIO2_SHIFTCTL0 FLEXIO2_BASE._0x0080 // Shifter Control
#define FLEXIO2_SHIFTCTL1 FLEXIO2_BASE._0x0080 // Shifter Control
#define FLEXIO2_SHIFTCTL2 FLEXIO2_BASE._0x0080 // Shifter Control
#define FLEXIO2_SHIFTCTL3 FLEXIO2_BASE._0x0080 // Shifter Control
#define FLEXIO2_SHIFTCFG0 FLEXIO2_BASE._0x0080 // Shifter Conf.
#define FLEXIO2_SHIFTCFG1 FLEXIO2_BASE._0x0080 // Shifter Conf.
#define FLEXIO2_SHIFTCFG2 FLEXIO2_BASE._0x0080 // Shifter Conf.
#define FLEXIO2_SHIFTCFG3 FLEXIO2_BASE._0x0080 // Shifter Conf.
#define FLEXIO2_SHIFTBUF0 FLEXIO2_BASE._0x0080 // Shifter Buffer
#define FLEXIO2_SHIFTBUF1 FLEXIO2_BASE._0x0080 // Shifter Buffer
#define FLEXIO2_SHIFTBUF2 FLEXIO2_BASE._0x0080 // Shifter Buffer
#define FLEXIO2_SHIFTBUF3 FLEXIO2_BASE._0x0080 // Shifter Buffer
#define FLEXIO2_SHIFTBUFBIS0 FLEXIO2_BASE._0x0080 // Shifter bi Swap
#define FLEXIO2_SHIFTBUFBIS1 FLEXIO2_BASE._0x0080 // Shifter bi Swap
#define FLEXIO2_SHIFTBUFBIS2 FLEXIO2_BASE._0x0080 // Shifter bi Swap
#define FLEXIO2_SHIFTBUFBIS3 FLEXIO2_BASE._0x0080 // Shifter bi Swap
#define FLEXIO2_SHIFTBUFBYS0 FLEXIO2_BASE._0x0080 // Shifter By Swap
#define FLEXIO2_SHIFTBUFBYS1 FLEXIO2_BASE._0x0080 // Shifter By Swap
#define FLEXIO2_SHIFTBUFBYS2 FLEXIO2_BASE._0x0080 // Shifter By Swap
#define FLEXIO2_SHIFTBUFBYS3 FLEXIO2_BASE._0x0080 // Shifter By Swap
#define FLEXIO2_SHIFTBUFBBS0 FLEXIO2_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO2_SHIFTBUFBBS1 FLEXIO2_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO2_SHIFTBUFBBS2 FLEXIO2_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO2_SHIFTBUFBBS3 FLEXIO2_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO2_TIMCTL0 FLEXIO2_BASE._0x0080 // Timer Control
#define FLEXIO2_TIMCTL1 FLEXIO2_BASE._0x0080 // Timer Control
#define FLEXIO2_TIMCTL2 FLEXIO2_BASE._0x0080 // Timer Control
#define FLEXIO2_TIMCTL3 FLEXIO2_BASE._0x0080 // Timer Control
#define FLEXIO2_TIMCFG0 FLEXIO2_BASE._0x0080 // Timer Conf.
#define FLEXIO2_TIMCFG1 FLEXIO2_BASE._0x0080 // Timer Conf.
#define FLEXIO2_TIMCFG2 FLEXIO2_BASE._0x0080 // Timer Conf.
#define FLEXIO2_TIMCFG3 FLEXIO2_BASE._0x0080 // Timer Conf.
#define FLEXIO2_TIMCMP0 FLEXIO2_BASE._0x0080 // Timer Comp.
#define FLEXIO2_TIMCMP1 FLEXIO2_BASE._0x0080 // Timer Comp.
#define FLEXIO2_TIMCMP2 FLEXIO2_BASE._0x0080 // Timer Comp.
#define FLEXIO2_TIMCMP3 FLEXIO2_BASE._0x0080 // Timer Comp.
#define FLEXIO2_SHIFTBUFNBS0 FLEXIO2_BASE._0x0080 // Shifter nibble By
#define FLEXIO2_SHIFTBUFNBS1 FLEXIO2_BASE._0x0080 // Shifter nibble By
#define FLEXIO2_SHIFTBUFNBS2 FLEXIO2_BASE._0x0080 // Shifter nibble By
#define FLEXIO2_SHIFTBUFNBS3 FLEXIO2_BASE._0x0080 // Shifter nibble By
#define FLEXIO2_SHIFTBUFHWS0 FLEXIO2_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO2_SHIFTBUFHWS1 FLEXIO2_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO2_SHIFTBUFHWS2 FLEXIO2_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO2_SHIFTBUFHWS3 FLEXIO2_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO2_SHIFTBUFNIS0 FLEXIO2_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO2_SHIFTBUFNIS1 FLEXIO2_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO2_SHIFTBUFNIS2 FLEXIO2_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO2_SHIFTBUFNIS3 FLEXIO2_BASE._0x0080 // Shifter nibble Swapped

// FLEXIO 3
#define FLEXIO3_BASE MAP_32BIT_REGISTER(0x401ac000)
#define FLEXIO3_VERID FLEXIO3_BASE._0x0000 // Version ID
#define FLEXIO3_PARAM FLEXIO3_BASE._0x0004 // Parameter
#define FLEXIO3_CTRL FLEXIO3_BASE._0x0008 // FlexIO Control
#define FLEXIO3_PIN FLEXIO3_BASE._0x0000 // hPin State
#define FLEXIO3_SHIFTSTAT FLEXIO3_BASE._0x0010 // Shifter Status
#define FLEXIO3_SHIFTERR FLEXIO3_BASE._0x0014 // Shifter Error
#define FLEXIO3_TIMSTAT FLEXIO3_BASE._0x0018 // Timer Status
#define FLEXIO3_SHIFTSIEN FLEXIO3_BASE._0x0020 // Shifter Status Intrpt Enable
#define FLEXIO3_SHIFTEIEN FLEXIO3_BASE._0x0024 // Shifter Error Intrpt Enable
#define FLEXIO3_TIMIEN FLEXIO3_BASE._0x0028 // Timer Interrupt Enable
#define FLEXIO3_SHIFTSDEN FLEXIO3_BASE._0x0030 // Shifter Status DMA Enable
#define FLEXIO3_SHIFTSTATE FLEXIO3_BASE._0x0040 // Shifter State
#define FLEXIO3_SHIFTCTL0 FLEXIO3_BASE._0x0080 // Shifter Control
#define FLEXIO3_SHIFTCTL1 FLEXIO3_BASE._0x0080 // Shifter Control
#define FLEXIO3_SHIFTCTL2 FLEXIO3_BASE._0x0080 // Shifter Control
#define FLEXIO3_SHIFTCTL3 FLEXIO3_BASE._0x0080 // Shifter Control
#define FLEXIO3_SHIFTCFG0 FLEXIO3_BASE._0x0080 // Shifter Conf.
#define FLEXIO3_SHIFTCFG1 FLEXIO3_BASE._0x0080 // Shifter Conf.
#define FLEXIO3_SHIFTCFG2 FLEXIO3_BASE._0x0080 // Shifter Conf.
#define FLEXIO3_SHIFTCFG3 FLEXIO3_BASE._0x0080 // Shifter Conf.
#define FLEXIO3_SHIFTBUF0 FLEXIO3_BASE._0x0080 // Shifter Buffer
#define FLEXIO3_SHIFTBUF1 FLEXIO3_BASE._0x0080 // Shifter Buffer
#define FLEXIO3_SHIFTBUF2 FLEXIO3_BASE._0x0080 // Shifter Buffer
#define FLEXIO3_SHIFTBUF3 FLEXIO3_BASE._0x0080 // Shifter Buffer
#define FLEXIO3_SHIFTBUFBIS0 FLEXIO3_BASE._0x0080 // Shifter bi Swap
#define FLEXIO3_SHIFTBUFBIS1 FLEXIO3_BASE._0x0080 // Shifter bi Swap
#define FLEXIO3_SHIFTBUFBIS2 FLEXIO3_BASE._0x0080 // Shifter bi Swap
#define FLEXIO3_SHIFTBUFBIS3 FLEXIO3_BASE._0x0080 // Shifter bi Swap
#define FLEXIO3_SHIFTBUFBYS0 FLEXIO3_BASE._0x0080 // Shifter By Swap
#define FLEXIO3_SHIFTBUFBYS1 FLEXIO3_BASE._0x0080 // Shifter By Swap
#define FLEXIO3_SHIFTBUFBYS2 FLEXIO3_BASE._0x0080 // Shifter By Swap
#define FLEXIO3_SHIFTBUFBYS3 FLEXIO3_BASE._0x0080 // Shifter By Swap
#define FLEXIO3_SHIFTBUFBBS0 FLEXIO3_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO3_SHIFTBUFBBS1 FLEXIO3_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO3_SHIFTBUFBBS2 FLEXIO3_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO3_SHIFTBUFBBS3 FLEXIO3_BASE._0x0080 // Shifter biBy Swap
#define FLEXIO3_TIMCTL0 FLEXIO3_BASE._0x0080 // Timer Control
#define FLEXIO3_TIMCTL1 FLEXIO3_BASE._0x0080 // Timer Control
#define FLEXIO3_TIMCTL2 FLEXIO3_BASE._0x0080 // Timer Control
#define FLEXIO3_TIMCTL3 FLEXIO3_BASE._0x0080 // Timer Control
#define FLEXIO3_TIMCFG0 FLEXIO3_BASE._0x0080 // Timer Conf.
#define FLEXIO3_TIMCFG1 FLEXIO3_BASE._0x0080 // Timer Conf.
#define FLEXIO3_TIMCFG2 FLEXIO3_BASE._0x0080 // Timer Conf.
#define FLEXIO3_TIMCFG3 FLEXIO3_BASE._0x0080 // Timer Conf.
#define FLEXIO3_TIMCMP0 FLEXIO3_BASE._0x0080 // Timer Comp.
#define FLEXIO3_TIMCMP1 FLEXIO3_BASE._0x0080 // Timer Comp.
#define FLEXIO3_TIMCMP2 FLEXIO3_BASE._0x0080 // Timer Comp.
#define FLEXIO3_TIMCMP3 FLEXIO3_BASE._0x0080 // Timer Comp.
#define FLEXIO3_SHIFTBUFNBS0 FLEXIO3_BASE._0x0080 // Shifter nibble By
#define FLEXIO3_SHIFTBUFNBS1 FLEXIO3_BASE._0x0080 // Shifter nibble By
#define FLEXIO3_SHIFTBUFNBS2 FLEXIO3_BASE._0x0080 // Shifter nibble By
#define FLEXIO3_SHIFTBUFNBS3 FLEXIO3_BASE._0x0080 // Shifter nibble By
#define FLEXIO3_SHIFTBUFHWS0 FLEXIO3_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO3_SHIFTBUFHWS1 FLEXIO3_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO3_SHIFTBUFHWS2 FLEXIO3_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO3_SHIFTBUFHWS3 FLEXIO3_BASE._0x0080 // Shifter nibble Wo
#define FLEXIO3_SHIFTBUFNIS0 FLEXIO3_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO3_SHIFTBUFNIS1 FLEXIO3_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO3_SHIFTBUFNIS2 FLEXIO3_BASE._0x0080 // Shifter nibble Swapped
#define FLEXIO3_SHIFTBUFNIS3 FLEXIO3_BASE._0x0080 // Shifter nibble Swapped

/**
 * @brief: GPT, General Purpose Timers, Memory Map/Register
 * 52.7 p.2957
 *
 * The GPT has 10 user-accessible 32-bit registers,
 * which are used to configure, operate, and monitor the state of the GPT.
 * An IP bus write access to the GPT Control Register (GPT_CR)
 * and the GPT OutputCompare Register1 (GPT_OCR1)
 * results in one cycle of wait state, while other
 * valid IPbus accesses incur 0 wait states.
 *
 * Irrespective of the Response Select signal value,
 * a Write access to the GPT Status Registers
 * (Read-only registers GPT_ICR1, GPT_ICR2, GPT_CNT)
 * will generate a busexception.
 *
 * •  If the Response Select signal is driven Low, then the Read/Write
 *    access to theunimplemented address space of GPT (ips_addr is greater
 *    than or equal to $BASE +$028) will generate a bus exception.
 *
 * •  If the Response Select is driven High, then the Read/Write access to
 *    the unimplemented address space of GPT will not generate any error
 *    response (like a busexception)
 *
 **/
#define GPT_BASE0 MAP_8BIT_REGISTER(0x401ec000)
#define GPT1_CR GPT_BASE0._0xc000 // Control Register
#define GPT1_PR GPT_BASE0._0xc004 // Prescaler Register
#define GPT1_SR GPT_BASE0._0xc008 // Status Register
#define GPT1_IR GPT_BASE0._0xc00c // Interrupt Register
#define GPT1_OCR1 GPT_BASE0._0xc010 // Output Compare Register 1
#define GPT1_OCR2 GPT_BASE0._0xc014 // Output Compare Register 2
#define GPT1_OCR3 GPT_BASE0._0xc018 // Output Compare Register 3
#define GPT1_ICR1 GPT_BASE0._0xc01c // Input Capture Register 1
#define GPT1_ICR2 GPT_BASE0._0xc020 // Input Capture Register 2
#define GPT1_CNT GPT_BASE0._0xc024 // Counter Register

#define GPT_BASE1 MAP_8BIT_REGISTER(0x401f0000)
#define GPT2_CR GPT_BASE1._0x0000 // Control Register
#define GPT2_PR GPT_BASE1._0x0004 // Prescaler Register
#define GPT2_SR GPT_BASE1._0x0008 // Status Register
#define GPT2_IR GPT_BASE1._0x000C // Interrupt Register
#define GPT2_OCR1 GPT_BASE1._0x0010 // Output Compare Register 1
#define GPT2_OCR2 GPT_BASE1._0x0014 // Output Compare Register 2
#define GPT2_OCR3 GPT_BASE1._0x0018 // Output Compare Register 3
#define GPT2_ICR1 GPT_BASE1._0x001c // Input Capture Register 1
#define GPT2_ICR2 GPT_BASE1._0x0020 // Input Capture Register 2
#define GPT2_CNT GPT_BASE1._0x0024 // Counter Register

/**
 * @brief: PIT, Periodic Interrupt Timer, Memory Map/Register
 * 53.9 p.2978
 *
 * Base address:
 * PIT : 0x40084000
 *
 **/
#define PIT_BASE MAP_8BIT_REGISTER(0x400b4000)
#define PIT_MCR PIT_BASE._0x0000 // Module Control Register
#define PIT_LTMR64H PIT_BASE._0x00e0 // Upper Lifetime Timer Register
#define PIT_LTMR64L PIT_BASE._0x00e4 // Lower Lifetime Timer Register
#define PIT_LDVAL0 PIT_BASE._0x0100 // Timer Load Value Register
#define PIT_CVAL0 PIT_BASE._0x0104 // Current Timer Value Register
#define PIT_TCTRL0 PIT_BASE._0x0108 // Timer Control Register
#define PIT_TFLG0 PIT_BASE._0x010c // Timer Flag Register
#define PIT_LDVAL1 PIT_BASE._0x0110 // Timer Load Value Register
#define PIT_CVAL1 PIT_BASE._0x0114 // Current Timer Value Register
#define PIT_TCTRL1 PIT_BASE._0x0118 // Timer Control Register
#define PIT_TFLG1 PIT_BASE._0x011c // Timer Flag Register
#define PIT_LDVAL2 PIT_BASE._0x0120 // Timer Load Value Register
#define PIT_CVAL2 PIT_BASE._0x0124 // Current Timer Value Register
#define PIT_TCTRL2 PIT_BASE._0x0128 // Timer Control Register
#define PIT_TFLG2 PIT_BASE._0x012c // Timer Flag Register
#define PIT_LDVAL3 PIT_BASE._0x0130 // Timer Load Value Register
#define PIT_CVAL3 PIT_BASE._0x0134 // Current Timer Value Register
#define PIT_TCTRL3 PIT_BASE._0x0138 // Timer Control Register
#define PIT_TFLG3 PIT_BASE._0x013c // Timer Flag Register

/**
 * @brief: TMR, Quad Timer, Memory Map/Register
 * 54.6 p.2990
 *
 * Base address:
 * TMR : 0x401dc000
 *
 **/
#define TMR1_BASE MAP_16BIT_REGISTER(0x401dc000)
#define TMR1_COMP10 TMR1_BASE._0x0000
#define TMR1_COMP20 TMR1_BASE._0x0002
#define TMR1_CAPT0 TMR1_BASE._0x0004
#define TMR1_LOAD0 TMR1_BASE._0x0006
#define TMR1_HOLD0 TMR1_BASE._0x0008
#define TMR1_CNTR0 TMR1_BASE._0x000a
#define TMR1_CTRL0 TMR1_BASE._0x000c
#define TMR1_SCTRL0 TMR1_BASE._0x000e
#define TMR1_CMPLD10 TMR1_BASE._0x0010
#define TMR1_CMPLD20 TMR1_BASE._0x0012
#define TMR1_CSCTRL0 TMR1_BASE._0x0014
#define TMR1_FILT0 TMR1_BASE._0x0016
#define TMR1_DMA0 TMR1_BASE._0x0018
#define TMR1_ENBL TMR1_BASE._0x001e
#define TMR1_COMP11 TMR1_BASE._0x0020
#define TMR1_COMP21 TMR1_BASE._0x0022
#define TMR1_CAPT1 TMR1_BASE._0x0024
#define TMR1_LOAD1 TMR1_BASE._0x0026
#define TMR1_HOLD1 TMR1_BASE._0x0028
#define TMR1_CNTR1 TMR1_BASE._0x002a
#define TMR1_CTRL1 TMR1_BASE._0x002c
#define TMR1_SCTRL1 TMR1_BASE._0x002e
#define TMR1_CMPLD11 TMR1_BASE._0x0030
#define TMR1_CMPLD21 TMR1_BASE._0x0032
#define TMR1_CSCTRL1 TMR1_BASE._0x0034
#define TMR1_FILT1 TMR1_BASE._0x0036
#define TMR1_DMA1 TMR1_BASE._0x0038
#define TMR1_COMP12 TMR1_BASE._0x0040
#define TMR1_COMP22 TMR1_BASE._0x0042
#define TMR1_CAPT2 TMR1_BASE._0x0044
#define TMR1_LOAD2 TMR1_BASE._0x0046
#define TMR1_HOLD2 TMR1_BASE._0x0048
#define TMR1_CNTR2 TMR1_BASE._0x004a
#define TMR1_CTRL2 TMR1_BASE._0x004c
#define TMR1_SCTRL2 TMR1_BASE._0x004e
#define TMR1_CMPLD12 TMR1_BASE._0x0050
#define TMR1_CMPLD22 TMR1_BASE._0x0052
#define TMR1_CSCTRL2 TMR1_BASE._0x0054
#define TMR1_FILT2 TMR1_BASE._0x0056
#define TMR1_DMA2 TMR1_BASE._0x0058
#define TMR1_COMP13 TMR1_BASE._0x0060
#define TMR1_COMP23 TMR1_BASE._0x0062
#define TMR1_CAPT3 TMR1_BASE._0x0064
#define TMR1_LOAD3 TMR1_BASE._0x0066
#define TMR1_HOLD3 TMR1_BASE._0x0068
#define TMR1_CNTR3 TMR1_BASE._0x006a
#define TMR1_CTRL3 TMR1_BASE._0x006c
#define TMR1_SCTRL3 TMR1_BASE._0x006e
#define TMR1_CMPLD13 TMR1_BASE._0x0070
#define TMR1_CMPLD23 TMR1_BASE._0x0072
#define TMR1_CSCTRL3 TMR1_BASE._0x0074
#define TMR1_FILT3 TMR1_BASE._0x0076
#define TMR1_DMA3 TMR1_BASE._0x0078

#define TMR2_BASE MAP_16BIT_REGISTER(0x401e0000)
#define TMR2_COMP10 TMR1_BASE._0x40000
#define TMR2_COMP20 TMR1_BASE._0x40002
#define TMR2_CAPT0 TMR1_BASE._0x40004
#define TMR2_LOAD0 TMR1_BASE._0x40006
#define TMR2_HOLD0 TMR1_BASE._0x40008
#define TMR2_CNTR0 TMR1_BASE._0x4000a
#define TMR2_CTRL0 TMR1_BASE._0x4000c
#define TMR2_SCTRL0 TMR1_BASE._0x4000e
#define TMR2_CMPLD10 TMR1_BASE._0x40010
#define TMR2_CMPLD20 TMR1_BASE._0x40012
#define TMR2_CSCTRL0 TMR1_BASE._0x40014
#define TMR2_FILT0 TMR1_BASE._0x40016
#define TMR2_DMA0 TMR1_BASE._0x40018
#define TMR2_ENBL TMR1_BASE._0x4001e
#define TMR2_COMP11 TMR1_BASE._0x40020
#define TMR2_COMP21 TMR1_BASE._0x40022
#define TMR2_CAPT1 TMR1_BASE._0x40024
#define TMR2_LOAD1 TMR1_BASE._0x40026
#define TMR2_HOLD1 TMR1_BASE._0x40028
#define TMR2_CNTR1 TMR1_BASE._0x4002a
#define TMR2_CTRL1 TMR1_BASE._0x4002c
#define TMR2_SCTRL1 TMR1_BASE._0x4002e
#define TMR2_CMPLD11 TMR1_BASE._0x40030
#define TMR2_CMPLD21 TMR1_BASE._0x40032
#define TMR2_CSCTRL1 TMR1_BASE._0x40034
#define TMR2_FILT1 TMR1_BASE._0x40036
#define TMR2_DMA1 TMR1_BASE._0x40038
#define TMR2_COMP12 TMR1_BASE._0x40040
#define TMR2_COMP22 TMR1_BASE._0x40042
#define TMR2_CAPT2 TMR1_BASE._0x40044
#define TMR2_LOAD2 TMR1_BASE._0x40046
#define TMR2_HOLD2 TMR1_BASE._0x40048
#define TMR2_CNTR2 TMR1_BASE._0x4004a
#define TMR2_CTRL2 TMR1_BASE._0x4004c
#define TMR2_SCTRL2 TMR1_BASE._0x4004e
#define TMR2_CMPLD12 TMR1_BASE._0x40050
#define TMR2_CMPLD22 TMR1_BASE._0x40052
#define TMR2_CSCTRL2 TMR1_BASE._0x40054
#define TMR2_FILT2 TMR1_BASE._0x40056
#define TMR2_DMA2 TMR1_BASE._0x40058
#define TMR2_COMP13 TMR1_BASE._0x40060
#define TMR2_COMP23 TMR1_BASE._0x40062
#define TMR2_CAPT3 TMR1_BASE._0x40064
#define TMR2_LOAD3 TMR1_BASE._0x40066
#define TMR2_HOLD3 TMR1_BASE._0x40068
#define TMR2_CNTR3 TMR1_BASE._0x4006a
#define TMR2_CTRL3 TMR1_BASE._0x4006c
#define TMR2_SCTRL3 TMR1_BASE._0x4006e
#define TMR2_CMPLD13 TMR1_BASE._0x40070
#define TMR2_CMPLD23 TMR1_BASE._0x40072
#define TMR2_CSCTRL3 TMR1_BASE._0x40074
#define TMR2_FILT3 TMR1_BASE._0x40076
#define TMR2_DMA3 TMR1_BASE._0x40078

#define TMR3_BASE MAP_16BIT_REGISTER(0x401e4000)
#define TMR3_COMP10 TMR1_BASE._0x0000
#define TMR3_COMP20 TMR1_BASE._0x0002
#define TMR3_CAPT0 TMR1_BASE._0x0004
#define TMR3_LOAD0 TMR1_BASE._0x0006
#define TMR3_HOLD0 TMR1_BASE._0x0008
#define TMR3_CNTR0 TMR1_BASE._0x000a
#define TMR3_CTRL0 TMR1_BASE._0x000c
#define TMR3_SCTRL0 TMR1_BASE._0x000e
#define TMR3_CMPLD10 TMR1_BASE._0x0010
#define TMR3_CMPLD20 TMR1_BASE._0x0012
#define TMR3_CSCTRL0 TMR1_BASE._0x0014
#define TMR3_FILT0 TMR1_BASE._0x0016
#define TMR3_DMA0 TMR1_BASE._0x0018
#define TMR3_ENBL TMR1_BASE._0x001e
#define TMR3_COMP11 TMR1_BASE._0x0020
#define TMR3_COMP21 TMR1_BASE._0x0022
#define TMR3_CAPT1 TMR1_BASE._0x0024
#define TMR3_LOAD1 TMR1_BASE._0x0026
#define TMR3_HOLD1 TMR1_BASE._0x0028
#define TMR3_CNTR1 TMR1_BASE._0x002a
#define TMR3_CTRL1 TMR1_BASE._0x002c
#define TMR3_SCTRL1 TMR1_BASE._0x002e
#define TMR3_CMPLD11 TMR1_BASE._0x0030
#define TMR3_CMPLD21 TMR1_BASE._0x0032
#define TMR3_CSCTRL1 TMR1_BASE._0x0034
#define TMR3_FILT1 TMR1_BASE._0x0036
#define TMR3_DMA1 TMR1_BASE._0x0038
#define TMR3_COMP12 TMR1_BASE._0x0040
#define TMR3_COMP22 TMR1_BASE._0x0042
#define TMR3_CAPT2 TMR1_BASE._0x0044
#define TMR3_LOAD2 TMR1_BASE._0x0046
#define TMR3_HOLD2 TMR1_BASE._0x0048
#define TMR3_CNTR2 TMR1_BASE._0x004a
#define TMR3_CTRL2 TMR1_BASE._0x004c
#define TMR3_SCTRL2 TMR1_BASE._0x004e
#define TMR3_CMPLD12 TMR1_BASE._0x0050
#define TMR3_CMPLD22 TMR1_BASE._0x0052
#define TMR3_CSCTRL2 TMR1_BASE._0x0054
#define TMR3_FILT2 TMR1_BASE._0x0056
#define TMR3_DMA2 TMR1_BASE._0x0058
#define TMR3_COMP13 TMR1_BASE._0x0060
#define TMR3_COMP23 TMR1_BASE._0x0062
#define TMR3_CAPT3 TMR1_BASE._0x0064
#define TMR3_LOAD3 TMR1_BASE._0x0066
#define TMR3_HOLD3 TMR1_BASE._0x0068
#define TMR3_CNTR3 TMR1_BASE._0x006a
#define TMR3_CTRL3 TMR1_BASE._0x006c
#define TMR3_SCTRL3 TMR1_BASE._0x006e
#define TMR3_CMPLD13 TMR1_BASE._0x0070
#define TMR3_CMPLD23 TMR1_BASE._0x0072
#define TMR3_CSCTRL3 TMR1_BASE._0x0074
#define TMR3_FILT3 TMR1_BASE._0x0076
#define TMR3_DMA3 TMR1_BASE._0x0078

#define TMR4_BASE MAP_16BIT_REGISTER(0x401e8000)
#define TMR4_COMP10 TMR4_BASE._0x0000
#define TMR4_COMP20 TMR4_BASE._0x0002
#define TMR4_CAPT0 TMR4_BASE._0x0004
#define TMR4_LOAD0 TMR4_BASE._0x0006
#define TMR4_HOLD0 TMR4_BASE._0x0008
#define TMR4_CNTR0 TMR4_BASE._0x000a
#define TMR4_CTRL0 TMR4_BASE._0x000c
#define TMR4_SCTRL0 TMR4_BASE._0x000e
#define TMR4_CMPLD10 TMR4_BASE._0x0010
#define TMR4_CMPLD20 TMR4_BASE._0x0012
#define TMR4_CSCTRL0 TMR4_BASE._0x0014
#define TMR4_FILT0 TMR4_BASE._0x0016
#define TMR4_DMA0 TMR4_BASE._0x0018
#define TMR4_ENBL TMR4_BASE._0x001e
#define TMR4_COMP11 TMR4_BASE._0x0020
#define TMR4_COMP21 TMR4_BASE._0x0022
#define TMR4_CAPT1 TMR4_BASE._0x0024
#define TMR4_LOAD1 TMR4_BASE._0x0026
#define TMR4_HOLD1 TMR4_BASE._0x0028
#define TMR4_CNTR1 TMR4_BASE._0x002a
#define TMR4_CTRL1 TMR4_BASE._0x002c
#define TMR4_SCTRL1 TMR4_BASE._0x002e
#define TMR4_CMPLD11 TMR4_BASE._0x0030
#define TMR4_CMPLD21 TMR4_BASE._0x0032
#define TMR4_CSCTRL1 TMR4_BASE._0x0034
#define TMR4_FILT1 TMR4_BASE._0x0036
#define TMR4_DMA1 TMR4_BASE._0x0038
#define TMR4_COMP12 TMR4_BASE._0x0040
#define TMR4_COMP22 TMR4_BASE._0x0042
#define TMR4_CAPT2 TMR4_BASE._0x0044
#define TMR4_LOAD2 TMR4_BASE._0x0046
#define TMR4_HOLD2 TMR4_BASE._0x0048
#define TMR4_CNTR2 TMR4_BASE._0x004a
#define TMR4_CTRL2 TMR4_BASE._0x004c
#define TMR4_SCTRL2 TMR4_BASE._0x004e
#define TMR4_CMPLD12 TMR4_BASE._0x0050
#define TMR4_CMPLD22 TMR4_BASE._0x0052
#define TMR4_CSCTRL2 TMR4_BASE._0x0054
#define TMR4_FILT2 TMR4_BASE._0x0056
#define TMR4_DMA2 TMR4_BASE._0x0058
#define TMR4_COMP13 TMR4_BASE._0x0060
#define TMR4_COMP23 TMR4_BASE._0x0062
#define TMR4_CAPT3 TMR4_BASE._0x0064
#define TMR4_LOAD3 TMR4_BASE._0x0066
#define TMR4_HOLD3 TMR4_BASE._0x0068
#define TMR4_CNTR3 TMR4_BASE._0x006a
#define TMR4_CTRL3 TMR4_BASE._0x006C
#define TMR4_SCTRL3 TMR4_BASE._0x006e
#define TMR4_CMPLD13 TMR4_BASE._0x0070
#define TMR4_CMPLD23 TMR4_BASE._0x0072
#define TMR4_CSCTRL3 TMR4_BASE._0x0074
#define TMR4_FILT3 TMR4_BASE._0x0076
#define TMR4_DMA3 TMR4_BASE._0x0078

/**
 * @brief: PWM, Enhanced Flex Pulse Widh Modulator (eFlexPWM), Memory
 *Map/Register 55.8.1, p.3074
 *
 * Base addresses:
 * FlexPWM1: 0x403dc000
 * FlexPWM2: 0x403e0000
 * FlexPWM3: 0x403e4000
 * FlexPWM4: 0x403e8000
 *
 * NOTE: PWM_X only applicable to FlexPWM1,
 * while FlexPWM2/3/4do not have the PWMX outputs or inputs.
 *
 **/

// FlexPWM1
#define PWM1_BASE MAP_16BIT_REGISTER(0x403dc000)
#define PWM1_SM0CNT PWM1_BASE._0x0000
#define PWM1_SM0INIT PWM1_BASE._0x0002
#define PWM1_SM0CTRL2 PWM1_BASE._0x0004
#define PWM1_SM0CTRL PWM1_BASE._0x0006
#define PWM1_SM0VAL0 PWM1_BASE._0x000A
#define PWM1_SM0FRACVAL1 PWM1_BASE._0x000C
#define PWM1_SM0VAL1 PWM1_BASE._0x000E
#define PWM1_SM0FRACVAL2 PWM1_BASE._0x0010
#define PWM1_SM0VAL2 PWM1_BASE._0x0012
#define PWM1_SM0FRACVAL3 PWM1_BASE._0x0014
#define PWM1_SM0VAL3 PWM1_BASE._0x0016
#define PWM1_SM0FRACVAL4 PWM1_BASE._0x0018
#define PWM1_SM0VAL4 PWM1_BASE._0x001A
#define PWM1_SM0FRACVAL5 PWM1_BASE._0x001C
#define PWM1_SM0VAL5 PWM1_BASE._0x001E
#define PWM1_SM0FRCTRL PWM1_BASE._0x0020
#define PWM1_SM0OCTRL PWM1_BASE._0x0022
#define PWM1_SM0STS PWM1_BASE._0x0024
#define PWM1_SM0INTEN PWM1_BASE._0x0026
#define PWM1_SM0DMAEN PWM1_BASE._0x0028
#define PWM1_SM0TCTRL PWM1_BASE._0x002A
#define PWM1_SM0DISMAP0 PWM1_BASE._0x002C
#define PWM1_SM0DISMAP1 PWM1_BASE._0x002E
#define PWM1_SM0DTCNT0 PWM1_BASE._0x0030
#define PWM1_SM0DTCNT1 PWM1_BASE._0x0032
#define PWM1_SM0CAPTCTRLA PWM1_BASE._0x0034
#define PWM1_SM0CAPTCOMPA PWM1_BASE._0x0036
#define PWM1_SM0CAPTCTRLB PWM1_BASE._0x0038
#define PWM1_SM0CAPTCOMPB PWM1_BASE._0x003A
#define PWM1_SM0CAPTCTRLX PWM1_BASE._0x003C
#define PWM1_SM0CAPTCOMPX PWM1_BASE._0x003E
#define PWM1_SM0CVAL0 PWM1_BASE._0x0040
#define PWM1_SM0CVAL0CYC PWM1_BASE._0x0042
#define PWM1_SM0CVAL1 PWM1_BASE._0x0044
#define PWM1_SM0CVAL1CYC PWM1_BASE._0x0046
#define PWM1_SM0CVAL2 PWM1_BASE._0x0048
#define PWM1_SM0CVAL2CYC PWM1_BASE._0x004A
#define PWM1_SM0CVAL3 PWM1_BASE._0x004C
#define PWM1_SM0CVAL3CYC PWM1_BASE._0x004E
#define PWM1_SM0CVAL4 PWM1_BASE._0x0050
#define PWM1_SM0CVAL4CYC PWM1_BASE._0x0052
#define PWM1_SM0CVAL5 PWM1_BASE._0x0054
#define PWM1_SM0CVAL5CYC PWM1_BASE._0x0056
#define PWM1_SM1CNT PWM1_BASE._0x0060
#define PWM1_SM1INIT PWM1_BASE._0x0062
#define PWM1_SM1CTRL2 PWM1_BASE._0x0064
#define PWM1_SM1CTRL PWM1_BASE._0x0066
#define PWM1_SM1VAL0 PWM1_BASE._0x006A
#define PWM1_SM1FRACVAL1 PWM1_BASE._0x006C
#define PWM1_SM1VAL1 PWM1_BASE._0x006E
#define PWM1_SM1FRACVAL2 PWM1_BASE._0x0070
#define PWM1_SM1VAL2 PWM1_BASE._0x0072
#define PWM1_SM1FRACVAL3 PWM1_BASE._0x0074
#define PWM1_SM1VAL3 PWM1_BASE._0x0076
#define PWM1_SM1FRACVAL4 PWM1_BASE._0x0078
#define PWM1_SM1VAL4 PWM1_BASE._0x007A
#define PWM1_SM1FRACVAL5 PWM1_BASE._0x007C
#define PWM1_SM1VAL5 PWM1_BASE._0x007E
#define PWM1_SM1FRCTRL PWM1_BASE._0x0080
#define PWM1_SM1OCTRL PWM1_BASE._0x0082
#define PWM1_SM1STS PWM1_BASE._0x0084
#define PWM1_SM1INTEN PWM1_BASE._0x0086
#define PWM1_SM1DMAEN PWM1_BASE._0x0088
#define PWM1_SM1TCTRL PWM1_BASE._0x008A
#define PWM1_SM1DISMAP0 PWM1_BASE._0x008C
#define PWM1_SM1DISMAP1 PWM1_BASE._0x008E
#define PWM1_SM1DTCNT0 PWM1_BASE._0x0090
#define PWM1_SM1DTCNT1 PWM1_BASE._0x0092
#define PWM1_SM1CAPTCTRLA PWM1_BASE._0x0094
#define PWM1_SM1CAPTCOMPA PWM1_BASE._0x0096
#define PWM1_SM1CAPTCTRLB PWM1_BASE._0x0098
#define PWM1_SM1CAPTCOMPB PWM1_BASE._0x009A
#define PWM1_SM1CAPTCTRLX PWM1_BASE._0x009C
#define PWM1_SM1CAPTCOMPX PWM1_BASE._0x009E
#define PWM1_SM1CVAL0 PWM1_BASE._0x00A0
#define PWM1_SM1CVAL0CYC PWM1_BASE._0x00A2
#define PWM1_SM1CVAL1 PWM1_BASE._0x00A4
#define PWM1_SM1CVAL1CYC PWM1_BASE._0x00A6
#define PWM1_SM1CVAL2 PWM1_BASE._0x00A8
#define PWM1_SM1CVAL2CYC PWM1_BASE._0x00AA
#define PWM1_SM1CVAL3 PWM1_BASE._0x00AC
#define PWM1_SM1CVAL3CYC PWM1_BASE._0x00AE
#define PWM1_SM1CVAL4 PWM1_BASE._0x00B0
#define PWM1_SM1CVAL4CYC PWM1_BASE._0x00B2
#define PWM1_SM1CVAL5 PWM1_BASE._0x00B4
#define PWM1_SM1CVAL5CYC PWM1_BASE._0x00B6
#define PWM1_SM2CNT PWM1_BASE._0x00C0
#define PWM1_SM2INIT PWM1_BASE._0x00C2
#define PWM1_SM2CTRL2 PWM1_BASE._0x00C4
#define PWM1_SM2CTRL PWM1_BASE._0x00C6
#define PWM1_SM2VAL0 PWM1_BASE._0x00CA
#define PWM1_SM2FRACVAL1 PWM1_BASE._0x00CC
#define PWM1_SM2VAL1 PWM1_BASE._0x00CE
#define PWM1_SM2FRACVAL2 PWM1_BASE._0x00D0
#define PWM1_SM2VAL2 PWM1_BASE._0x00D2
#define PWM1_SM2FRACVAL3 PWM1_BASE._0x00D4
#define PWM1_SM2VAL3 PWM1_BASE._0x00D6
#define PWM1_SM2FRACVAL4 PWM1_BASE._0x00D8
#define PWM1_SM2VAL4 PWM1_BASE._0x00DA
#define PWM1_SM2FRACVAL5 PWM1_BASE._0x00DC
#define PWM1_SM2VAL5 PWM1_BASE._0x00DE
#define PWM1_SM2FRCTRL PWM1_BASE._0x00E0
#define PWM1_SM2OCTRL PWM1_BASE._0x00E2
#define PWM1_SM2STS PWM1_BASE._0x00E4
#define PWM1_SM2INTEN PWM1_BASE._0x00E6
#define PWM1_SM2DMAEN PWM1_BASE._0x00E8
#define PWM1_SM2TCTRL PWM1_BASE._0x00EA
#define PWM1_SM2DISMAP0 PWM1_BASE._0x00EC
#define PWM1_SM2DISMAP1 PWM1_BASE._0x00EE
#define PWM1_SM2DTCNT0 PWM1_BASE._0x00F0
#define PWM1_SM2DTCNT1 PWM1_BASE._0x00F2
#define PWM1_SM2CAPTCTRLA PWM1_BASE._0x00F4
#define PWM1_SM2CAPTCOMPA PWM1_BASE._0x00F6
#define PWM1_SM2CAPTCTRLB PWM1_BASE._0x00F8
#define PWM1_SM2CAPTCOMPB PWM1_BASE._0x00FA
#define PWM1_SM2CAPTCTRLX PWM1_BASE._0x00FC
#define PWM1_SM2CAPTCOMPX PWM1_BASE._0x00FE
#define PWM1_SM2CVAL0 PWM1_BASE._0x0100
#define PWM1_SM2CVAL0CYC PWM1_BASE._0x0102
#define PWM1_SM2CVAL1 PWM1_BASE._0x0104
#define PWM1_SM2CVAL1CYC PWM1_BASE._0x0106
#define PWM1_SM2CVAL2 PWM1_BASE._0x0108
#define PWM1_SM2CVAL2CYC PWM1_BASE._0x010a
#define PWM1_SM2CVAL3 PWM1_BASE._0x010c
#define PWM1_SM2CVAL3CYC PWM1_BASE._0x010e
#define PWM1_SM2CVAL4 PWM1_BASE._0x0110
#define PWM1_SM2CVAL4CYC PWM1_BASE._0x0112
#define PWM1_SM2CVAL5 PWM1_BASE._0x0114
#define PWM1_SM2CVAL5CYC PWM1_BASE._0x0116
#define PWM1_SM3CNT PWM1_BASE._0x0120
#define PWM1_SM3INIT PWM1_BASE._0x0122
#define PWM1_SM3CTRL2 PWM1_BASE._0x0124
#define PWM1_SM3CTRL PWM1_BASE._0x0126
#define PWM1_SM3VAL0 PWM1_BASE._0x012a
#define PWM1_SM3FRACVAL1 PWM1_BASE._0x012c
#define PWM1_SM3VAL1 PWM1_BASE._0x012e
#define PWM1_SM3FRACVAL2 PWM1_BASE._0x0130
#define PWM1_SM3VAL2 PWM1_BASE._0x0132
#define PWM1_SM3FRACVAL3 PWM1_BASE._0x0134
#define PWM1_SM3VAL3 PWM1_BASE._0x0136
#define PWM1_SM3FRACVAL4 PWM1_BASE._0x0138
#define PWM1_SM3VAL4 PWM1_BASE._0x013a
#define PWM1_SM3FRACVAL5 PWM1_BASE._0x013c
#define PWM1_SM3VAL5 PWM1_BASE._0x013e
#define PWM1_SM3FRCTRL PWM1_BASE._0x0140
#define PWM1_SM3OCTRL PWM1_BASE._0x0142
#define PWM1_SM3STS PWM1_BASE._0x0144
#define PWM1_SM3INTEN PWM1_BASE._0x0146
#define PWM1_SM3DMAEN PWM1_BASE._0x0148
#define PWM1_SM3TCTRL PWM1_BASE._0x014a
#define PWM1_SM3DISMAP0 PWM1_BASE._0x014c
#define PWM1_SM3DISMAP1 PWM1_BASE._0x014e
#define PWM1_SM3DTCNT0 PWM1_BASE._0x0150
#define PWM1_SM3DTCNT1 PWM1_BASE._0x0152
#define PWM1_SM3CAPTCTRLA PWM1_BASE._0x0154
#define PWM1_SM3CAPTCOMPA PWM1_BASE._0x0156
#define PWM1_SM3CAPTCTRLB PWM1_BASE._0x0158
#define PWM1_SM3CAPTCOMPB PWM1_BASE._0x015a
#define PWM1_SM3CAPTCTRLX PWM1_BASE._0x015c
#define PWM1_SM3CAPTCOMPX PWM1_BASE._0x015e
#define PWM1_SM3CVAL0 PWM1_BASE._0x0160
#define PWM1_SM3CVAL0CYC PWM1_BASE._0x0162
#define PWM1_SM3CVAL1 PWM1_BASE._0x0164
#define PWM1_SM3CVAL1CYC PWM1_BASE._0x0166
#define PWM1_SM3CVAL2 PWM1_BASE._0x0168
#define PWM1_SM3CVAL2CYC PWM1_BASE._0x016a
#define PWM1_SM3CVAL3 PWM1_BASE._0x016c
#define PWM1_SM3CVAL3CYC PWM1_BASE._0x016e
#define PWM1_SM3CVAL4 PWM1_BASE._0x0170
#define PWM1_SM3CVAL4CYC PWM1_BASE._0x0172
#define PWM1_SM3CVAL5 PWM1_BASE._0x0174
#define PWM1_SM3CVAL5CYC PWM1_BASE._0x0176
#define PWM1_OUTEN PWM1_BASE._0x0180
#define PWM1_MASK PWM1_BASE._0x018
#define PWM1_SWCOUT PWM1_BASE._0x0184
#define PWM1_DTSRCSEL PWM1_BASE._0x0186
#define PWM1_MCTRL PWM1_BASE._0x0188
#define PWM1_MCTRL2 PWM1_BASE._0x018a
#define PWM1_FCTRL0 PWM1_BASE._0x018c
#define PWM1_FSTS0 PWM1_BASE._0x018e
#define PWM1_FFILT0 PWM1_BASE._0x0190
#define PWM1_FTST0 PWM1_BASE._0x0192
#define PWM1_FCTRL20 PWM1_BASE._0x0194

// FlexPWM2
#define PWM2_BASE MAP_16BIT_REGISTER(0x403e0000)
#define PWM2_SM0CNT PWM2_BASE._0x0000
#define PWM2_SM0INIT PWM2_BASE._0x0002
#define PWM2_SM0CTRL2 PWM2_BASE._0x0004
#define PWM2_SM0CTRL PWM2_BASE._0x0006
#define PWM2_SM0VAL0 PWM2_BASE._0x000A
#define PWM2_SM0FRACVAL1 PWM2_BASE._0x000C
#define PWM2_SM0VAL1 PWM2_BASE._0x000E
#define PWM2_SM0FRACVAL2 PWM2_BASE._0x0010
#define PWM2_SM0VAL2 PWM2_BASE._0x0012
#define PWM2_SM0FRACVAL3 PWM2_BASE._0x0014
#define PWM2_SM0VAL3 PWM2_BASE._0x0016
#define PWM2_SM0FRACVAL4 PWM2_BASE._0x0018
#define PWM2_SM0VAL4 PWM2_BASE._0x001A
#define PWM2_SM0FRACVAL5 PWM2_BASE._0x001C
#define PWM2_SM0VAL5 PWM2_BASE._0x001E
#define PWM2_SM0FRCTRL PWM2_BASE._0x0020
#define PWM2_SM0OCTRL PWM2_BASE._0x0022
#define PWM2_SM0STS PWM2_BASE._0x0024
#define PWM2_SM0INTEN PWM2_BASE._0x0026
#define PWM2_SM0DMAEN PWM2_BASE._0x0028
#define PWM2_SM0TCTRL PWM2_BASE._0x002A
#define PWM2_SM0DISMAP0 PWM2_BASE._0x002C
#define PWM2_SM0DISMAP1 PWM2_BASE._0x002E
#define PWM2_SM0DTCNT0 PWM2_BASE._0x0030
#define PWM2_SM0DTCNT1 PWM2_BASE._0x0032
#define PWM2_SM0CAPTCTRLA PWM2_BASE._0x0034
#define PWM2_SM0CAPTCOMPA PWM2_BASE._0x0036
#define PWM2_SM0CAPTCTRLB PWM2_BASE._0x0038
#define PWM2_SM0CAPTCOMPB PWM2_BASE._0x003A
#define PWM2_SM0CAPTCTRLX PWM2_BASE._0x003C
#define PWM2_SM0CAPTCOMPX PWM2_BASE._0x003E
#define PWM2_SM0CVAL0 PWM2_BASE._0x0040
#define PWM2_SM0CVAL0CYC PWM2_BASE._0x0042
#define PWM2_SM0CVAL1 PWM2_BASE._0x0044
#define PWM2_SM0CVAL1CYC PWM2_BASE._0x0046
#define PWM2_SM0CVAL2 PWM2_BASE._0x0048
#define PWM2_SM0CVAL2CYC PWM2_BASE._0x004A
#define PWM2_SM0CVAL3 PWM2_BASE._0x004C
#define PWM2_SM0CVAL3CYC PWM2_BASE._0x004E
#define PWM2_SM0CVAL4 PWM2_BASE._0x0050
#define PWM2_SM0CVAL4CYC PWM2_BASE._0x0052
#define PWM2_SM0CVAL5 PWM2_BASE._0x0054
#define PWM2_SM0CVAL5CYC PWM2_BASE._0x0056
#define PWM2_SM1CNT PWM2_BASE._0x0060
#define PWM2_SM1INIT PWM2_BASE._0x0062
#define PWM2_SM1CTRL2 PWM2_BASE._0x0064
#define PWM2_SM1CTRL PWM2_BASE._0x0066
#define PWM2_SM1VAL0 PWM2_BASE._0x006A
#define PWM2_SM1FRACVAL1 PWM2_BASE._0x006C
#define PWM2_SM1VAL1 PWM2_BASE._0x006E
#define PWM2_SM1FRACVAL2 PWM2_BASE._0x0070
#define PWM2_SM1VAL2 PWM2_BASE._0x0072
#define PWM2_SM1FRACVAL3 PWM2_BASE._0x0074
#define PWM2_SM1VAL3 PWM2_BASE._0x0076
#define PWM2_SM1FRACVAL4 PWM2_BASE._0x0078
#define PWM2_SM1VAL4 PWM2_BASE._0x007A
#define PWM2_SM1FRACVAL5 PWM2_BASE._0x007C
#define PWM2_SM1VAL5 PWM2_BASE._0x007E
#define PWM2_SM1FRCTRL PWM2_BASE._0x0080
#define PWM2_SM1OCTRL PWM2_BASE._0x0082
#define PWM2_SM1STS PWM2_BASE._0x0084
#define PWM2_SM1INTEN PWM2_BASE._0x0086
#define PWM2_SM1DMAEN PWM2_BASE._0x0088
#define PWM2_SM1TCTRL PWM2_BASE._0x008A
#define PWM2_SM1DISMAP0 PWM2_BASE._0x008C
#define PWM2_SM1DISMAP1 PWM2_BASE._0x008E
#define PWM2_SM1DTCNT0 PWM2_BASE._0x0090
#define PWM2_SM1DTCNT1 PWM2_BASE._0x0092
#define PWM2_SM1CAPTCTRLA PWM2_BASE._0x0094
#define PWM2_SM1CAPTCOMPA PWM2_BASE._0x0096
#define PWM2_SM1CAPTCTRLB PWM2_BASE._0x0098
#define PWM2_SM1CAPTCOMPB PWM2_BASE._0x009A
#define PWM2_SM1CAPTCTRLX PWM2_BASE._0x009C
#define PWM2_SM1CAPTCOMPX PWM2_BASE._0x009E
#define PWM2_SM1CVAL0 PWM2_BASE._0x00A0
#define PWM2_SM1CVAL0CYC PWM2_BASE._0x00A2
#define PWM2_SM1CVAL1 PWM2_BASE._0x00A4
#define PWM2_SM1CVAL1CYC PWM2_BASE._0x00A6
#define PWM2_SM1CVAL2 PWM2_BASE._0x00A8
#define PWM2_SM1CVAL2CYC PWM2_BASE._0x00AA
#define PWM2_SM1CVAL3 PWM2_BASE._0x00AC
#define PWM2_SM1CVAL3CYC PWM2_BASE._0x00AE
#define PWM2_SM1CVAL4 PWM2_BASE._0x00B0
#define PWM2_SM1CVAL4CYC PWM2_BASE._0x00B2
#define PWM2_SM1CVAL5 PWM2_BASE._0x00B4
#define PWM2_SM1CVAL5CYC PWM2_BASE._0x00B6
#define PWM2_SM2CNT PWM2_BASE._0x00C0
#define PWM2_SM2INIT PWM2_BASE._0x00C2
#define PWM2_SM2CTRL2 PWM2_BASE._0x00C4
#define PWM2_SM2CTRL PWM2_BASE._0x00C6
#define PWM2_SM2VAL0 PWM2_BASE._0x00CA
#define PWM2_SM2FRACVAL1 PWM2_BASE._0x00CC
#define PWM2_SM2VAL1 PWM2_BASE._0x00CE
#define PWM2_SM2FRACVAL2 PWM2_BASE._0x00D0
#define PWM2_SM2VAL2 PWM2_BASE._0x00D2
#define PWM2_SM2FRACVAL3 PWM2_BASE._0x00D4
#define PWM2_SM2VAL3 PWM2_BASE._0x00D6
#define PWM2_SM2FRACVAL4 PWM2_BASE._0x00D8
#define PWM2_SM2VAL4 PWM2_BASE._0x00DA
#define PWM2_SM2FRACVAL5 PWM2_BASE._0x00DC
#define PWM2_SM2VAL5 PWM2_BASE._0x00DE
#define PWM2_SM2FRCTRL PWM2_BASE._0x00E0
#define PWM2_SM2OCTRL PWM2_BASE._0x00E2
#define PWM2_SM2STS PWM2_BASE._0x00E4
#define PWM2_SM2INTEN PWM2_BASE._0x00E6
#define PWM2_SM2DMAEN PWM2_BASE._0x00E8
#define PWM2_SM2TCTRL PWM2_BASE._0x00EA
#define PWM2_SM2DISMAP0 PWM2_BASE._0x00EC
#define PWM2_SM2DISMAP1 PWM2_BASE._0x00EE
#define PWM2_SM2DTCNT0 PWM2_BASE._0x00F0
#define PWM2_SM2DTCNT1 PWM2_BASE._0x00F2
#define PWM2_SM2CAPTCTRLA PWM2_BASE._0x00F4
#define PWM2_SM2CAPTCOMPA PWM2_BASE._0x00F6
#define PWM2_SM2CAPTCTRLB PWM2_BASE._0x00F8
#define PWM2_SM2CAPTCOMPB PWM2_BASE._0x00FA
#define PWM2_SM2CAPTCTRLX PWM2_BASE._0x00FC
#define PWM2_SM2CAPTCOMPX PWM2_BASE._0x00FE
#define PWM2_SM2CVAL0 PWM2_BASE._0x0100
#define PWM2_SM2CVAL0CYC PWM2_BASE._0x0102
#define PWM2_SM2CVAL1 PWM2_BASE._0x0104
#define PWM2_SM2CVAL1CYC PWM2_BASE._0x0106
#define PWM2_SM2CVAL2 PWM2_BASE._0x0108
#define PWM2_SM2CVAL2CYC PWM2_BASE._0x010a
#define PWM2_SM2CVAL3 PWM2_BASE._0x010c
#define PWM2_SM2CVAL3CYC PWM2_BASE._0x010e
#define PWM2_SM2CVAL4 PWM2_BASE._0x0110
#define PWM2_SM2CVAL4CYC PWM2_BASE._0x0112
#define PWM2_SM2CVAL5 PWM2_BASE._0x0114
#define PWM2_SM2CVAL5CYC PWM2_BASE._0x0116
#define PWM2_SM3CNT PWM2_BASE._0x0120
#define PWM2_SM3INIT PWM2_BASE._0x0122
#define PWM2_SM3CTRL2 PWM2_BASE._0x0124
#define PWM2_SM3CTRL PWM2_BASE._0x0126
#define PWM2_SM3VAL0 PWM2_BASE._0x012a
#define PWM2_SM3FRACVAL1 PWM2_BASE._0x012c
#define PWM2_SM3VAL1 PWM2_BASE._0x012e
#define PWM2_SM3FRACVAL2 PWM2_BASE._0x0130
#define PWM2_SM3VAL2 PWM2_BASE._0x0132
#define PWM2_SM3FRACVAL3 PWM2_BASE._0x0134
#define PWM2_SM3VAL3 PWM2_BASE._0x0136
#define PWM2_SM3FRACVAL4 PWM2_BASE._0x0138
#define PWM2_SM3VAL4 PWM2_BASE._0x013a
#define PWM2_SM3FRACVAL5 PWM2_BASE._0x013c
#define PWM2_SM3VAL5 PWM2_BASE._0x013e
#define PWM2_SM3FRCTRL PWM2_BASE._0x0140
#define PWM2_SM3OCTRL PWM2_BASE._0x0142
#define PWM2_SM3STS PWM2_BASE._0x0144
#define PWM2_SM3INTEN PWM2_BASE._0x0146
#define PWM2_SM3DMAEN PWM2_BASE._0x0148
#define PWM2_SM3TCTRL PWM2_BASE._0x014a
#define PWM2_SM3DISMAP0 PWM2_BASE._0x014c
#define PWM2_SM3DISMAP1 PWM2_BASE._0x014e
#define PWM2_SM3DTCNT0 PWM2_BASE._0x0150
#define PWM2_SM3DTCNT1 PWM2_BASE._0x0152
#define PWM2_SM3CAPTCTRLA PWM2_BASE._0x0154
#define PWM2_SM3CAPTCOMPA PWM2_BASE._0x0156
#define PWM2_SM3CAPTCTRLB PWM2_BASE._0x0158
#define PWM2_SM3CAPTCOMPB PWM2_BASE._0x015a
#define PWM2_SM3CAPTCTRLX PWM2_BASE._0x015c
#define PWM2_SM3CAPTCOMPX PWM2_BASE._0x015e
#define PWM2_SM3CVAL0 PWM2_BASE._0x0160
#define PWM2_SM3CVAL0CYC PWM2_BASE._0x0162
#define PWM2_SM3CVAL1 PWM2_BASE._0x0164
#define PWM2_SM3CVAL1CYC PWM2_BASE._0x0166
#define PWM2_SM3CVAL2 PWM2_BASE._0x0168
#define PWM2_SM3CVAL2CYC PWM2_BASE._0x016a
#define PWM2_SM3CVAL3 PWM2_BASE._0x016c
#define PWM2_SM3CVAL3CYC PWM2_BASE._0x016e
#define PWM2_SM3CVAL4 PWM2_BASE._0x0170
#define PWM2_SM3CVAL4CYC PWM2_BASE._0x0172
#define PWM2_SM3CVAL5 PWM2_BASE._0x0174
#define PWM2_SM3CVAL5CYC PWM2_BASE._0x0176
#define PWM2_OUTEN PWM2_BASE._0x0180
#define PWM2_MASK PWM2_BASE._0x018
#define PWM2_SWCOUT PWM2_BASE._0x0184
#define PWM2_DTSRCSEL PWM2_BASE._0x0186
#define PWM2_MCTRL PWM2_BASE._0x0188
#define PWM2_MCTRL2 PWM2_BASE._0x018a
#define PWM2_FCTRL0 PWM2_BASE._0x018c
#define PWM2_FSTS0 PWM2_BASE._0x018e
#define PWM2_FFILT0 PWM2_BASE._0x0190
#define PWM2_FTST0 PWM2_BASE._0x0192
#define PWM2_FCTRL20 PWM2_BASE._0x0194

// FlexPWM3
#define PWM3_BASE MAP_16BIT_REGISTER(0x403e4000)
#define PWM3_SM0CNT PWM3_BASE._0x0000
#define PWM3_SM0INIT PWM3_BASE._0x0002
#define PWM3_SM0CTRL2 PWM3_BASE._0x0004
#define PWM3_SM0CTRL PWM3_BASE._0x0006
#define PWM3_SM0VAL0 PWM3_BASE._0x000A
#define PWM3_SM0FRACVAL1 PWM3_BASE._0x000C
#define PWM3_SM0VAL1 PWM3_BASE._0x000E
#define PWM3_SM0FRACVAL2 PWM3_BASE._0x0010
#define PWM3_SM0VAL2 PWM3_BASE._0x0012
#define PWM3_SM0FRACVAL3 PWM3_BASE._0x0014
#define PWM3_SM0VAL3 PWM3_BASE._0x0016
#define PWM3_SM0FRACVAL4 PWM3_BASE._0x0018
#define PWM3_SM0VAL4 PWM3_BASE._0x001A
#define PWM3_SM0FRACVAL5 PWM3_BASE._0x001C
#define PWM3_SM0VAL5 PWM3_BASE._0x001E
#define PWM3_SM0FRCTRL PWM3_BASE._0x0020
#define PWM3_SM0OCTRL PWM3_BASE._0x0022
#define PWM3_SM0STS PWM3_BASE._0x0024
#define PWM3_SM0INTEN PWM3_BASE._0x0026
#define PWM3_SM0DMAEN PWM3_BASE._0x0028
#define PWM3_SM0TCTRL PWM3_BASE._0x002A
#define PWM3_SM0DISMAP0 PWM3_BASE._0x002C
#define PWM3_SM0DISMAP1 PWM3_BASE._0x002E
#define PWM3_SM0DTCNT0 PWM3_BASE._0x0030
#define PWM3_SM0DTCNT1 PWM3_BASE._0x0032
#define PWM3_SM0CAPTCTRLA PWM3_BASE._0x0034
#define PWM3_SM0CAPTCOMPA PWM3_BASE._0x0036
#define PWM3_SM0CAPTCTRLB PWM3_BASE._0x0038
#define PWM3_SM0CAPTCOMPB PWM3_BASE._0x003A
#define PWM3_SM0CAPTCTRLX PWM3_BASE._0x003C
#define PWM3_SM0CAPTCOMPX PWM3_BASE._0x003E
#define PWM3_SM0CVAL0 PWM3_BASE._0x0040
#define PWM3_SM0CVAL0CYC PWM3_BASE._0x0042
#define PWM3_SM0CVAL1 PWM3_BASE._0x0044
#define PWM3_SM0CVAL1CYC PWM3_BASE._0x0046
#define PWM3_SM0CVAL2 PWM3_BASE._0x0048
#define PWM3_SM0CVAL2CYC PWM3_BASE._0x004A
#define PWM3_SM0CVAL3 PWM3_BASE._0x004C
#define PWM3_SM0CVAL3CYC PWM3_BASE._0x004E
#define PWM3_SM0CVAL4 PWM3_BASE._0x0050
#define PWM3_SM0CVAL4CYC PWM3_BASE._0x0052
#define PWM3_SM0CVAL5 PWM3_BASE._0x0054
#define PWM3_SM0CVAL5CYC PWM3_BASE._0x0056
#define PWM3_SM1CNT PWM3_BASE._0x0060
#define PWM3_SM1INIT PWM3_BASE._0x0062
#define PWM3_SM1CTRL2 PWM3_BASE._0x0064
#define PWM3_SM1CTRL PWM3_BASE._0x0066
#define PWM3_SM1VAL0 PWM3_BASE._0x006A
#define PWM3_SM1FRACVAL1 PWM3_BASE._0x006C
#define PWM3_SM1VAL1 PWM3_BASE._0x006E
#define PWM3_SM1FRACVAL2 PWM3_BASE._0x0070
#define PWM3_SM1VAL2 PWM3_BASE._0x0072
#define PWM3_SM1FRACVAL3 PWM3_BASE._0x0074
#define PWM3_SM1VAL3 PWM3_BASE._0x0076
#define PWM3_SM1FRACVAL4 PWM3_BASE._0x0078
#define PWM3_SM1VAL4 PWM3_BASE._0x007A
#define PWM3_SM1FRACVAL5 PWM3_BASE._0x007C
#define PWM3_SM1VAL5 PWM3_BASE._0x007E
#define PWM3_SM1FRCTRL PWM3_BASE._0x0080
#define PWM3_SM1OCTRL PWM3_BASE._0x0082
#define PWM3_SM1STS PWM3_BASE._0x0084
#define PWM3_SM1INTEN PWM3_BASE._0x0086
#define PWM3_SM1DMAEN PWM3_BASE._0x0088
#define PWM3_SM1TCTRL PWM3_BASE._0x008A
#define PWM3_SM1DISMAP0 PWM3_BASE._0x008C
#define PWM3_SM1DISMAP1 PWM3_BASE._0x008E
#define PWM3_SM1DTCNT0 PWM3_BASE._0x0090
#define PWM3_SM1DTCNT1 PWM3_BASE._0x0092
#define PWM3_SM1CAPTCTRLA PWM3_BASE._0x0094
#define PWM3_SM1CAPTCOMPA PWM3_BASE._0x0096
#define PWM3_SM1CAPTCTRLB PWM3_BASE._0x0098
#define PWM3_SM1CAPTCOMPB PWM3_BASE._0x009A
#define PWM3_SM1CAPTCTRLX PWM3_BASE._0x009C
#define PWM3_SM1CAPTCOMPX PWM3_BASE._0x009E
#define PWM3_SM1CVAL0 PWM3_BASE._0x00A0
#define PWM3_SM1CVAL0CYC PWM3_BASE._0x00A2
#define PWM3_SM1CVAL1 PWM3_BASE._0x00A4
#define PWM3_SM1CVAL1CYC PWM3_BASE._0x00A6
#define PWM3_SM1CVAL2 PWM3_BASE._0x00A8
#define PWM3_SM1CVAL2CYC PWM3_BASE._0x00AA
#define PWM3_SM1CVAL3 PWM3_BASE._0x00AC
#define PWM3_SM1CVAL3CYC PWM3_BASE._0x00AE
#define PWM3_SM1CVAL4 PWM3_BASE._0x00B0
#define PWM3_SM1CVAL4CYC PWM3_BASE._0x00B2
#define PWM3_SM1CVAL5 PWM3_BASE._0x00B4
#define PWM3_SM1CVAL5CYC PWM3_BASE._0x00B6
#define PWM3_SM2CNT PWM3_BASE._0x00C0
#define PWM3_SM2INIT PWM3_BASE._0x00C2
#define PWM3_SM2CTRL2 PWM3_BASE._0x00C4
#define PWM3_SM2CTRL PWM3_BASE._0x00C6
#define PWM3_SM2VAL0 PWM3_BASE._0x00CA
#define PWM3_SM2FRACVAL1 PWM3_BASE._0x00CC
#define PWM3_SM2VAL1 PWM3_BASE._0x00CE
#define PWM3_SM2FRACVAL2 PWM3_BASE._0x00D0
#define PWM3_SM2VAL2 PWM3_BASE._0x00D2
#define PWM3_SM2FRACVAL3 PWM3_BASE._0x00D4
#define PWM3_SM2VAL3 PWM3_BASE._0x00D6
#define PWM3_SM2FRACVAL4 PWM3_BASE._0x00D8
#define PWM3_SM2VAL4 PWM3_BASE._0x00DA
#define PWM3_SM2FRACVAL5 PWM3_BASE._0x00DC
#define PWM3_SM2VAL5 PWM3_BASE._0x00DE
#define PWM3_SM2FRCTRL PWM3_BASE._0x00E0
#define PWM3_SM2OCTRL PWM3_BASE._0x00E2
#define PWM3_SM2STS PWM3_BASE._0x00E4
#define PWM3_SM2INTEN PWM3_BASE._0x00E6
#define PWM3_SM2DMAEN PWM3_BASE._0x00E8
#define PWM3_SM2TCTRL PWM3_BASE._0x00EA
#define PWM3_SM2DISMAP0 PWM3_BASE._0x00EC
#define PWM3_SM2DISMAP1 PWM3_BASE._0x00EE
#define PWM3_SM2DTCNT0 PWM3_BASE._0x00F0
#define PWM3_SM2DTCNT1 PWM3_BASE._0x00F2
#define PWM3_SM2CAPTCTRLA PWM3_BASE._0x00F4
#define PWM3_SM2CAPTCOMPA PWM3_BASE._0x00F6
#define PWM3_SM2CAPTCTRLB PWM3_BASE._0x00F8
#define PWM3_SM2CAPTCOMPB PWM3_BASE._0x00FA
#define PWM3_SM2CAPTCTRLX PWM3_BASE._0x00FC
#define PWM3_SM2CAPTCOMPX PWM3_BASE._0x00FE
#define PWM3_SM2CVAL0 PWM3_BASE._0x0100
#define PWM3_SM2CVAL0CYC PWM3_BASE._0x0102
#define PWM3_SM2CVAL1 PWM3_BASE._0x0104
#define PWM3_SM2CVAL1CYC PWM3_BASE._0x0106
#define PWM3_SM2CVAL2 PWM3_BASE._0x0108
#define PWM3_SM2CVAL2CYC PWM3_BASE._0x010a
#define PWM3_SM2CVAL3 PWM3_BASE._0x010c
#define PWM3_SM2CVAL3CYC PWM3_BASE._0x010e
#define PWM3_SM2CVAL4 PWM3_BASE._0x0110
#define PWM3_SM2CVAL4CYC PWM3_BASE._0x0112
#define PWM3_SM2CVAL5 PWM3_BASE._0x0114
#define PWM3_SM2CVAL5CYC PWM3_BASE._0x0116
#define PWM3_SM3CNT PWM3_BASE._0x0120
#define PWM3_SM3INIT PWM3_BASE._0x0122
#define PWM3_SM3CTRL2 PWM3_BASE._0x0124
#define PWM3_SM3CTRL PWM3_BASE._0x0126
#define PWM3_SM3VAL0 PWM3_BASE._0x012a
#define PWM3_SM3FRACVAL1 PWM3_BASE._0x012c
#define PWM3_SM3VAL1 PWM3_BASE._0x012e
#define PWM3_SM3FRACVAL2 PWM3_BASE._0x0130
#define PWM3_SM3VAL2 PWM3_BASE._0x0132
#define PWM3_SM3FRACVAL3 PWM3_BASE._0x0134
#define PWM3_SM3VAL3 PWM3_BASE._0x0136
#define PWM3_SM3FRACVAL4 PWM3_BASE._0x0138
#define PWM3_SM3VAL4 PWM3_BASE._0x013a
#define PWM3_SM3FRACVAL5 PWM3_BASE._0x013c
#define PWM3_SM3VAL5 PWM3_BASE._0x013e
#define PWM3_SM3FRCTRL PWM3_BASE._0x0140
#define PWM3_SM3OCTRL PWM3_BASE._0x0142
#define PWM3_SM3STS PWM3_BASE._0x0144
#define PWM3_SM3INTEN PWM3_BASE._0x0146
#define PWM3_SM3DMAEN PWM3_BASE._0x0148
#define PWM3_SM3TCTRL PWM3_BASE._0x014a
#define PWM3_SM3DISMAP0 PWM3_BASE._0x014c
#define PWM3_SM3DISMAP1 PWM3_BASE._0x014e
#define PWM3_SM3DTCNT0 PWM3_BASE._0x0150
#define PWM3_SM3DTCNT1 PWM3_BASE._0x0152
#define PWM3_SM3CAPTCTRLA PWM3_BASE._0x0154
#define PWM3_SM3CAPTCOMPA PWM3_BASE._0x0156
#define PWM3_SM3CAPTCTRLB PWM3_BASE._0x0158
#define PWM3_SM3CAPTCOMPB PWM3_BASE._0x015a
#define PWM3_SM3CAPTCTRLX PWM3_BASE._0x015c
#define PWM3_SM3CAPTCOMPX PWM3_BASE._0x015e
#define PWM3_SM3CVAL0 PWM3_BASE._0x0160
#define PWM3_SM3CVAL0CYC PWM3_BASE._0x0162
#define PWM3_SM3CVAL1 PWM3_BASE._0x0164
#define PWM3_SM3CVAL1CYC PWM3_BASE._0x0166
#define PWM3_SM3CVAL2 PWM3_BASE._0x0168
#define PWM3_SM3CVAL2CYC PWM3_BASE._0x016a
#define PWM3_SM3CVAL3 PWM3_BASE._0x016c
#define PWM3_SM3CVAL3CYC PWM3_BASE._0x016e
#define PWM3_SM3CVAL4 PWM3_BASE._0x0170
#define PWM3_SM3CVAL4CYC PWM3_BASE._0x0172
#define PWM3_SM3CVAL5 PWM3_BASE._0x0174
#define PWM3_SM3CVAL5CYC PWM3_BASE._0x0176
#define PWM3_OUTEN PWM3_BASE._0x0180
#define PWM3_MASK PWM3_BASE._0x018
#define PWM3_SWCOUT PWM3_BASE._0x0184
#define PWM3_DTSRCSEL PWM3_BASE._0x0186
#define PWM3_MCTRL PWM3_BASE._0x0188
#define PWM3_MCTRL2 PWM3_BASE._0x018a
#define PWM3_FCTRL0 PWM3_BASE._0x018c
#define PWM3_FSTS0 PWM3_BASE._0x018e
#define PWM3_FFILT0 PWM3_BASE._0x0190
#define PWM3_FTST0 PWM3_BASE._0x0192
#define PWM3_FCTRL20 PWM3_BASE._0x0194

// FlexPWM4
#define PWM4_BASE MAP_16BIT_REGISTER(0x403e8000)
#define PWM4_SM0CNT PWM4_BASE._0x0000
#define PWM4_SM0INIT PWM4_BASE._0x0002
#define PWM4_SM0CTRL2 PWM4_BASE._0x0004
#define PWM4_SM0CTRL PWM4_BASE._0x0006
#define PWM4_SM0VAL0 PWM4_BASE._0x000A
#define PWM4_SM0FRACVAL1 PWM4_BASE._0x000C
#define PWM4_SM0VAL1 PWM4_BASE._0x000E
#define PWM4_SM0FRACVAL2 PWM4_BASE._0x0010
#define PWM4_SM0VAL2 PWM4_BASE._0x0012
#define PWM4_SM0FRACVAL3 PWM4_BASE._0x0014
#define PWM4_SM0VAL3 PWM4_BASE._0x0016
#define PWM4_SM0FRACVAL4 PWM4_BASE._0x0018
#define PWM4_SM0VAL4 PWM4_BASE._0x001A
#define PWM4_SM0FRACVAL5 PWM4_BASE._0x001C
#define PWM4_SM0VAL5 PWM4_BASE._0x001E
#define PWM4_SM0FRCTRL PWM4_BASE._0x0020
#define PWM4_SM0OCTRL PWM4_BASE._0x0022
#define PWM4_SM0STS PWM4_BASE._0x0024
#define PWM4_SM0INTEN PWM4_BASE._0x0026
#define PWM4_SM0DMAEN PWM4_BASE._0x0028
#define PWM4_SM0TCTRL PWM4_BASE._0x002A
#define PWM4_SM0DISMAP0 PWM4_BASE._0x002C
#define PWM4_SM0DISMAP1 PWM4_BASE._0x002E
#define PWM4_SM0DTCNT0 PWM4_BASE._0x0030
#define PWM4_SM0DTCNT1 PWM4_BASE._0x0032
#define PWM4_SM0CAPTCTRLA PWM4_BASE._0x0034
#define PWM4_SM0CAPTCOMPA PWM4_BASE._0x0036
#define PWM4_SM0CAPTCTRLB PWM4_BASE._0x0038
#define PWM4_SM0CAPTCOMPB PWM4_BASE._0x003A
#define PWM4_SM0CAPTCTRLX PWM4_BASE._0x003C
#define PWM4_SM0CAPTCOMPX PWM4_BASE._0x003E
#define PWM4_SM0CVAL0 PWM4_BASE._0x0040
#define PWM4_SM0CVAL0CYC PWM4_BASE._0x0042
#define PWM4_SM0CVAL1 PWM4_BASE._0x0044
#define PWM4_SM0CVAL1CYC PWM4_BASE._0x0046
#define PWM4_SM0CVAL2 PWM4_BASE._0x0048
#define PWM4_SM0CVAL2CYC PWM4_BASE._0x004A
#define PWM4_SM0CVAL3 PWM4_BASE._0x004C
#define PWM4_SM0CVAL3CYC PWM4_BASE._0x004E
#define PWM4_SM0CVAL4 PWM4_BASE._0x0050
#define PWM4_SM0CVAL4CYC PWM4_BASE._0x0052
#define PWM4_SM0CVAL5 PWM4_BASE._0x0054
#define PWM4_SM0CVAL5CYC PWM4_BASE._0x0056
#define PWM4_SM1CNT PWM4_BASE._0x0060
#define PWM4_SM1INIT PWM4_BASE._0x0062
#define PWM4_SM1CTRL2 PWM4_BASE._0x0064
#define PWM4_SM1CTRL PWM4_BASE._0x0066
#define PWM4_SM1VAL0 PWM4_BASE._0x006A
#define PWM4_SM1FRACVAL1 PWM4_BASE._0x006C
#define PWM4_SM1VAL1 PWM4_BASE._0x006E
#define PWM4_SM1FRACVAL2 PWM4_BASE._0x0070
#define PWM4_SM1VAL2 PWM4_BASE._0x0072
#define PWM4_SM1FRACVAL3 PWM4_BASE._0x0074
#define PWM4_SM1VAL3 PWM4_BASE._0x0076
#define PWM4_SM1FRACVAL4 PWM4_BASE._0x0078
#define PWM4_SM1VAL4 PWM4_BASE._0x007A
#define PWM4_SM1FRACVAL5 PWM4_BASE._0x007C
#define PWM4_SM1VAL5 PWM4_BASE._0x007E
#define PWM4_SM1FRCTRL PWM4_BASE._0x0080
#define PWM4_SM1OCTRL PWM4_BASE._0x0082
#define PWM4_SM1STS PWM4_BASE._0x0084
#define PWM4_SM1INTEN PWM4_BASE._0x0086
#define PWM4_SM1DMAEN PWM4_BASE._0x0088
#define PWM4_SM1TCTRL PWM4_BASE._0x008A
#define PWM4_SM1DISMAP0 PWM4_BASE._0x008C
#define PWM4_SM1DISMAP1 PWM4_BASE._0x008E
#define PWM4_SM1DTCNT0 PWM4_BASE._0x0090
#define PWM4_SM1DTCNT1 PWM4_BASE._0x0092
#define PWM4_SM1CAPTCTRLA PWM4_BASE._0x0094
#define PWM4_SM1CAPTCOMPA PWM4_BASE._0x0096
#define PWM4_SM1CAPTCTRLB PWM4_BASE._0x0098
#define PWM4_SM1CAPTCOMPB PWM4_BASE._0x009A
#define PWM4_SM1CAPTCTRLX PWM4_BASE._0x009C
#define PWM4_SM1CAPTCOMPX PWM4_BASE._0x009E
#define PWM4_SM1CVAL0 PWM4_BASE._0x00A0
#define PWM4_SM1CVAL0CYC PWM4_BASE._0x00A2
#define PWM4_SM1CVAL1 PWM4_BASE._0x00A4
#define PWM4_SM1CVAL1CYC PWM4_BASE._0x00A6
#define PWM4_SM1CVAL2 PWM4_BASE._0x00A8
#define PWM4_SM1CVAL2CYC PWM4_BASE._0x00AA
#define PWM4_SM1CVAL3 PWM4_BASE._0x00AC
#define PWM4_SM1CVAL3CYC PWM4_BASE._0x00AE
#define PWM4_SM1CVAL4 PWM4_BASE._0x00B0
#define PWM4_SM1CVAL4CYC PWM4_BASE._0x00B2
#define PWM4_SM1CVAL5 PWM4_BASE._0x00B4
#define PWM4_SM1CVAL5CYC PWM4_BASE._0x00B6
#define PWM4_SM2CNT PWM4_BASE._0x00C0
#define PWM4_SM2INIT PWM4_BASE._0x00C2
#define PWM4_SM2CTRL2 PWM4_BASE._0x00C4
#define PWM4_SM2CTRL PWM4_BASE._0x00C6
#define PWM4_SM2VAL0 PWM4_BASE._0x00CA
#define PWM4_SM2FRACVAL1 PWM4_BASE._0x00CC
#define PWM4_SM2VAL1 PWM4_BASE._0x00CE
#define PWM4_SM2FRACVAL2 PWM4_BASE._0x00D0
#define PWM4_SM2VAL2 PWM4_BASE._0x00D2
#define PWM4_SM2FRACVAL3 PWM4_BASE._0x00D4
#define PWM4_SM2VAL3 PWM4_BASE._0x00D6
#define PWM4_SM2FRACVAL4 PWM4_BASE._0x00D8
#define PWM4_SM2VAL4 PWM4_BASE._0x00DA
#define PWM4_SM2FRACVAL5 PWM4_BASE._0x00DC
#define PWM4_SM2VAL5 PWM4_BASE._0x00DE
#define PWM4_SM2FRCTRL PWM4_BASE._0x00E0
#define PWM4_SM2OCTRL PWM4_BASE._0x00E2
#define PWM4_SM2STS PWM4_BASE._0x00E4
#define PWM4_SM2INTEN PWM4_BASE._0x00E6
#define PWM4_SM2DMAEN PWM4_BASE._0x00E8
#define PWM4_SM2TCTRL PWM4_BASE._0x00EA
#define PWM4_SM2DISMAP0 PWM4_BASE._0x00EC
#define PWM4_SM2DISMAP1 PWM4_BASE._0x00EE
#define PWM4_SM2DTCNT0 PWM4_BASE._0x00F0
#define PWM4_SM2DTCNT1 PWM4_BASE._0x00F2
#define PWM4_SM2CAPTCTRLA PWM4_BASE._0x00F4
#define PWM4_SM2CAPTCOMPA PWM4_BASE._0x00F6
#define PWM4_SM2CAPTCTRLB PWM4_BASE._0x00F8
#define PWM4_SM2CAPTCOMPB PWM4_BASE._0x00FA
#define PWM4_SM2CAPTCTRLX PWM4_BASE._0x00FC
#define PWM4_SM2CAPTCOMPX PWM4_BASE._0x00FE
#define PWM4_SM2CVAL0 PWM4_BASE._0x0100
#define PWM4_SM2CVAL0CYC PWM4_BASE._0x0102
#define PWM4_SM2CVAL1 PWM4_BASE._0x0104
#define PWM4_SM2CVAL1CYC PWM4_BASE._0x0106
#define PWM4_SM2CVAL2 PWM4_BASE._0x0108
#define PWM4_SM2CVAL2CYC PWM4_BASE._0x010a
#define PWM4_SM2CVAL3 PWM4_BASE._0x010c
#define PWM4_SM2CVAL3CYC PWM4_BASE._0x010e
#define PWM4_SM2CVAL4 PWM4_BASE._0x0110
#define PWM4_SM2CVAL4CYC PWM4_BASE._0x0112
#define PWM4_SM2CVAL5 PWM4_BASE._0x0114
#define PWM4_SM2CVAL5CYC PWM4_BASE._0x0116
#define PWM4_SM3CNT PWM4_BASE._0x0120
#define PWM4_SM3INIT PWM4_BASE._0x0122
#define PWM4_SM3CTRL2 PWM4_BASE._0x0124
#define PWM4_SM3CTRL PWM4_BASE._0x0126
#define PWM4_SM3VAL0 PWM4_BASE._0x012a
#define PWM4_SM3FRACVAL1 PWM4_BASE._0x012c
#define PWM4_SM3VAL1 PWM4_BASE._0x012e
#define PWM4_SM3FRACVAL2 PWM4_BASE._0x0130
#define PWM4_SM3VAL2 PWM4_BASE._0x0132
#define PWM4_SM3FRACVAL3 PWM4_BASE._0x0134
#define PWM4_SM3VAL3 PWM4_BASE._0x0136
#define PWM4_SM3FRACVAL4 PWM4_BASE._0x0138
#define PWM4_SM3VAL4 PWM4_BASE._0x013a
#define PWM4_SM3FRACVAL5 PWM4_BASE._0x013c
#define PWM4_SM3VAL5 PWM4_BASE._0x013e
#define PWM4_SM3FRCTRL PWM4_BASE._0x0140
#define PWM4_SM3OCTRL PWM4_BASE._0x0142
#define PWM4_SM3STS PWM4_BASE._0x0144
#define PWM4_SM3INTEN PWM4_BASE._0x0146
#define PWM4_SM3DMAEN PWM4_BASE._0x0148
#define PWM4_SM3TCTRL PWM4_BASE._0x014a
#define PWM4_SM3DISMAP0 PWM4_BASE._0x014c
#define PWM4_SM3DISMAP1 PWM4_BASE._0x014e
#define PWM4_SM3DTCNT0 PWM4_BASE._0x0150
#define PWM4_SM3DTCNT1 PWM4_BASE._0x0152
#define PWM4_SM3CAPTCTRLA PWM4_BASE._0x0154
#define PWM4_SM3CAPTCOMPA PWM4_BASE._0x0156
#define PWM4_SM3CAPTCTRLB PWM4_BASE._0x0158
#define PWM4_SM3CAPTCOMPB PWM4_BASE._0x015a
#define PWM4_SM3CAPTCTRLX PWM4_BASE._0x015c
#define PWM4_SM3CAPTCOMPX PWM4_BASE._0x015e
#define PWM4_SM3CVAL0 PWM4_BASE._0x0160
#define PWM4_SM3CVAL0CYC PWM4_BASE._0x0162
#define PWM4_SM3CVAL1 PWM4_BASE._0x0164
#define PWM4_SM3CVAL1CYC PWM4_BASE._0x0166
#define PWM4_SM3CVAL2 PWM4_BASE._0x0168
#define PWM4_SM3CVAL2CYC PWM4_BASE._0x016a
#define PWM4_SM3CVAL3 PWM4_BASE._0x016c
#define PWM4_SM3CVAL3CYC PWM4_BASE._0x016e
#define PWM4_SM3CVAL4 PWM4_BASE._0x0170
#define PWM4_SM3CVAL4CYC PWM4_BASE._0x0172
#define PWM4_SM3CVAL5 PWM4_BASE._0x0174
#define PWM4_SM3CVAL5CYC PWM4_BASE._0x0176
#define PWM4_OUTEN PWM4_BASE._0x0180
#define PWM4_MASK PWM4_BASE._0x018
#define PWM4_SWCOUT PWM4_BASE._0x0184
#define PWM4_DTSRCSEL PWM4_BASE._0x0186
#define PWM4_MCTRL PWM4_BASE._0x0188
#define PWM4_MCTRL2 PWM4_BASE._0x018a
#define PWM4_FCTRL0 PWM4_BASE._0x018c
#define PWM4_FSTS0 PWM4_BASE._0x018e
#define PWM4_FFILT0 PWM4_BASE._0x0190
#define PWM4_FTST0 PWM4_BASE._0x0192
#define PWM4_FCTRL20 PWM4_BASE._0x0194

/**
 * @brief: ENC, Quadrature Encoder/decoder, Memory Map/Register
 * 56.8, p.3187
 *
 * Base addresses:
 * ENCn base address: 403C_8000h + (n-1)×4000h, where n is from 1 to 4.
 *
 * NOTE: The address of a register is the sum of a base address and an address
 *offset. •  Base address is defined at the MCU level •  Address offset is
 *defined at the module level
 *
 * For the base address, see the specific chip documentation.
 * All memory locations base andoffsets are given in hex.
 **/

// ENC 1
#define ENC1_BASE MAP_16BIT_REGISTER(0x403c8000)
#define ENC1_CTRL ENC1_BASE._0x0000 // Control Register
#define ENC1_FILT ENC1_BASE._0x0002 // Input Filter Register
#define ENC1_WTR ENC1_BASE._0x000h // Watchdog Timeout Registe
#define ENC1_POSD ENC1_BASE._0x0006 // Position Difference Counter Register
#define ENC1_POSDH ENC1_BASE._0x0008 // Position Difference Hold Register
#define ENC1_REV ENC1_BASE._0x000a // Revolution Counter Register
#define ENC1_REVH ENC1_BASE._0x000c // Revolution Hold Register
#define ENC1_UPOS ENC1_BASE._0x000e // Upper Position Counter Register
#define ENC1_LPOS ENC1_BASE._0x0010 // Lower Position Counter Register
#define ENC1_UPOSH ENC1_BASE._0x0012 // Upper Position Hold Register
#define ENC1_LPOSH ENC1_BASE._0x0014 // Lower Position Hold Register
#define ENC1_UINIT ENC1_BASE._0x0016 // Upper Initialization Register
#define ENC1_LINIT ENC1_BASE._0x0018 // Lower Initialization Register
#define ENC1_IMR ENC1_BASE._0x001a // Input Monitor Registe
#define ENC1_TST ENC1_BASE._0x001c // Test Registe
#define ENC1_CTRL2 ENC1_BASE._0x001e // Control 2 Register
#define ENC1_UMOD ENC1_BASE._0x0020 // Upper Modulus Register
#define ENC1_LMOD ENC1_BASE._0x0022 // Lower Modulus Register
#define ENC1_UCOMP ENC1_BASE._0x0024 // Upper Position Compare Register
#define ENC1_LCOMP ENC1_BASE._0x0026 // Lower Position Compare Register

// ENC 2
#define ENC2_BASE MAP_16BIT_REGISTER(0x403cc000)
#define ENC2_CTRL ENC2_BASE._0x0000 // Control Register
#define ENC2_FILT ENC2_BASE._0x0002 // Input Filter Register
#define ENC2_WTR ENC2_BASE._0x000h // Watchdog Timeout Registe
#define ENC2_POSD ENC2_BASE._0x0006 // Position Difference Counter Register
#define ENC2_POSDH ENC2_BASE._0x0008 // Position Difference Hold Register
#define ENC2_REV ENC2_BASE._0x000a // Revolution Counter Registe
#define ENC2_REVH ENC2_BASE._0x000c // Revolution Hold Register
#define ENC2_UPOS ENC2_BASE._0x000e // Upper Position Counter Register
#define ENC2_LPOS ENC2_BASE._0x0010 // Lower Position Counter Register
#define ENC2_UPOSH ENC2_BASE._0x0012 // Upper Position Hold Register
#define ENC2_LPOSH ENC2_BASE._0x0014 // Lower Position Hold Register
#define ENC2_UINIT ENC2_BASE._0x0016 // Upper Initialization Register
#define ENC2_LINIT ENC2_BASE._0x0018 // Lower Initialization Register
#define ENC2_IMR ENC2_BASE._0x001a // Input Monitor Registe
#define ENC2_TST ENC2_BASE._0x001c // Test Registe
#define ENC2_CTRL2 ENC2_BASE._0x001e // Control 2 Register
#define ENC2_UMOD ENC2_BASE._0x0020 // Upper Modulus Register
#define ENC2_LMOD ENC2_BASE._0x0022 // Lower Modulus Register
#define ENC2_UCOMP ENC2_BASE._0x0024 // Upper Position Compare Register
#define ENC2_LCOMP ENC2_BASE._0x0026 // Lower Position Compare Register

// ENC 3
#define ENC3_BASE MAP_16BIT_REGISTER(0x403d0000)
#define ENC3_CTRL ENC3_BASE._0x0000 // Control Register
#define ENC3_FILT ENC3_BASE._0x0002 // Input Filter Register
#define ENC3_WTR ENC3_BASE._0x000h // Watchdog Timeout Registe
#define ENC3_POSD ENC3_BASE._0x0006 // Position Difference Counter Register
#define ENC3_POSDH ENC3_BASE._0x0008 // Position Difference Hold Register
#define ENC3_REV ENC3_BASE._0x000a // Revolution Counter Registe
#define ENC3_REVH ENC3_BASE._0x000c // Revolution Hold Register
#define ENC3_UPOS ENC3_BASE._0x000e // Upper Position Counter Register
#define ENC3_LPOS ENC3_BASE._0x0010 // Lower Position Counter Register
#define ENC3_UPOSH ENC3_BASE._0x0012 // Upper Position Hold Register
#define ENC3_LPOSH ENC3_BASE._0x0014 // Lower Position Hold Register
#define ENC3_UINIT ENC3_BASE._0x0016 // Upper Initialization Register
#define ENC3_LINIT ENC3_BASE._0x0018 // Lower Initialization Register
#define ENC3_IMR ENC3_BASE._0x001a // Input Monitor Registe
#define ENC3_TST ENC3_BASE._0x001c // Test Registe
#define ENC3_CTRL2 ENC3_BASE._0x001e // Control 2 Register
#define ENC3_UMOD ENC3_BASE._0x0020 // Upper Modulus Register
#define ENC3_LMOD ENC3_BASE._0x0022 // Lower Modulus Register
#define ENC3_UCOMP ENC3_BASE._0x0024 // Upper Position Compare Register
#define ENC3_LCOMP ENC3_BASE._0x0026 // Lower Position Compare Register

// ENC 4
#define ENC4_BASE MAP_16BIT_REGISTER(0x403d4000)
#define ENC4_CTRL ENC4_BASE._0x0000 // Control Register
#define ENC4_FILT ENC4_BASE._0x0002 // Input Filter Register
#define ENC4_WTR ENC4_BASE._0x000h // Watchdog Timeout Registe
#define ENC4_POSD ENC4_BASE._0x0006 // Position Difference Counter Register
#define ENC4_POSDH ENC4_BASE._0x0008 // Position Difference Hold Register
#define ENC4_REV ENC4_BASE._0x000a // Revolution Counter Registe
#define ENC4_REVH ENC4_BASE._0x000c // Revolution Hold Register
#define ENC4_UPOS ENC4_BASE._0x000e // Upper Position Counter Register
#define ENC4_LPOS ENC4_BASE._0x0010 // Lower Position Counter Register
#define ENC4_UPOSH ENC4_BASE._0x0012 // Upper Position Hold Register
#define ENC4_LPOSH ENC4_BASE._0x0014 // Lower Position Hold Register
#define ENC4_UINIT ENC4_BASE._0x0016 // Upper Initialization Register
#define ENC4_LINIT ENC4_BASE._0x0018 // Lower Initialization Register
#define ENC4_IMR ENC4_BASE._0x001a // Input Monitor Registe
#define ENC4_TST ENC4_BASE._0x001c // Test Registe
#define ENC4_CTRL2 ENC4_BASE._0x001e // Control 2 Register
#define ENC4_UMOD ENC4_BASE._0x0020 // Upper Modulus Register
#define ENC4_LMOD ENC4_BASE._0x0022 // Lower Modulus Register
#define ENC4_UCOMP ENC4_BASE._0x0024 // Upper Position Compare Register
#define ENC4_LCOMP ENC4_BASE._0x0026 // Lower Position Compare Register

/**
 * @brief: WDOG1_2, Watchdog Timer , Memory Map/Register
 * 56.8, p.3151
 *
 * WDOG1 base address: 400B_8000h.
 * WDOG2 base address: 400D_0000h.
 *
 **/

#define WDOG1_BASE MAP_8BIT_REGISTER(0x400b8000)
#define WDOG1_WCR WDOG1_BASE._0x0000 // Watchdog Control
#define WDOG1_WSR WDOG1_BASE._0x0002 // Watchdog Service
#define WDOG1_WRSR WDOG1_BASE._0x0004 // Watchdog Reset Status
#define WDOG1_WICR WDOG1_BASE._0x0006 // Watchdog Interrupt Control
#define WDOG1_WMCR WDOG1_BASE._0x0008 // Watchdog Miscellaneous Control

#define WDOG2_BASE MAP_8BIT_REGISTER(0x400d0000)
#define WDOG2_WCR WDOG2_BASE._0x0000 // Watchdog Control
#define WDOG2_WSR WDOG2_BASE._0x0002 // Watchdog Service
#define WDOG2_WRSR WDOG2_BASE._0x0004 // Watchdog Reset Status
#define WDOG2_WICR WDOG2_BASE._0x0006 // Watchdog Interrupt Control
#define WDOG2_WMCR WDOG2_BASE._0x0008 // Watchdog Miscellaneous Control

/**
 * @brief: RTWDOG, Real Time Watchdog Timer , Memory Map/Register
 * 58.5 p.3206
 *
 * WDOG3 (RTWDOG) base address: 0x400bc000
 *
 **/
#define RTWDOG_BASE MAP_32BIT_REGISTER(0x400bc000)
#define RTWDOG_CS RTWDOG_BASE._0x0000 // Watchdog Control and Status
#define RTWDOG_CNT RTWDOG_BASE._0x0004 // Watchdog Counter
#define RTWDOG_TOVAL RTWDOG_BASE._0x0008 // Watchdog Timeout Value
#define RTWDOG_WIN RTWDOG_BASE._0x000c // Watchdog Window

/**
 * @brief: EWM, External Watchdog Monitor , Memory Map/Register
 * 59.6 p.3221
 *
 * DEFAULT_NICKNAME base address: 0x400b4000
 **/
#define EWM_BASE MAP_8BIT_REGISTER(0x400b4000)
#define EWM_CTRL EWM_BASE._0x0000 // Control Register
#define EWM_SERV EWM_BASE._0x0001 // Service Register
#define EWM_CMPL EWM_BASE._0x0002 // Compare Low Register
#define EWM_CMPH EWM_BASE._0x0003 // Compare High Register
#define EWM_CLKCTRL EWM_BASE._0x0004 // Clock Control Register
#define EWM_CLKPRESCALER EWM_BASE._0x0005 // Clock Prescaler Register

/**
 * @brief: XBARA,  Inter-Peripheral Crossbar Switch B , Memory Map/Register
 * 61.4 p.3235
 *
 * base address: 0x403bc000
 *
 **/
#define XBARA_BASE MAP_16BIT_REGISTER(0x403bc000)
#define XBARA1_SEL0 XBARA_BASE._0x0000 // CrossbarA Slct Reg. 0
#define XBARA1_SEL1 XBARA_BASE._0x0002 // CrossbarA Slct Reg. 1
#define XBARA1_SEL2 XBARA_BASE._0x0004 // CrossbarA Slct Reg. 2
#define XBARA1_SEL3 XBARA_BASE._0x0006 // CrossbarA Slct Reg. 3
#define XBARA1_SEL4 XBARA_BASE._0x0008 // CrossbarA Slct Reg. 4
#define XBARA1_SEL5 XBARA_BASE._0x000a // CrossbarA Slct Reg. 5
#define XBARA1_SEL6 XBARA_BASE._0x000c // CrossbarA Slct Reg. 6
#define XBARA1_SEL7 XBARA_BASE._0x000e // CrossbarA Slct Reg. 7
#define XBARA1_SEL8 XBARA_BASE._0x0010 // CrossbarA Slct Reg. 8
#define XBARA1_SEL9 XBARA_BASE._0x0012 // CrossbarA Slct Reg. 9
#define XBARA1_SEL10 XBARA_BASE._0x0014 // CrossbarA Slct Reg. 10
#define XBARA1_SEL11 XBARA_BASE._0x0016 // CrossbarA Slct Reg. 11
#define XBARA1_SEL12 XBARA_BASE._0x0018 // CrossbarA Slct Reg. 12
#define XBARA1_SEL13 XBARA_BASE._0x001a // CrossbarA Slct Reg. 13
#define XBARA1_SEL14 XBARA_BASE._0x001c // CrossbarA Slct Reg. 14
#define XBARA1_SEL15 XBARA_BASE._0x001e // CrossbarA Slct Reg. 15
#define XBARA1_SEL16 XBARA_BASE._0x0020 // CrossbarA Slct Reg. 16
#define XBARA1_SEL17 XBARA_BASE._0x0022 // CrossbarA Slct Reg. 17
#define XBARA1_SEL18 XBARA_BASE._0x0024 // CrossbarA Slct Reg. 18
#define XBARA1_SEL19 XBARA_BASE._0x0026 // CrossbarA Slct Reg. 19
#define XBARA1_SEL20 XBARA_BASE._0x0028 // CrossbarA Slct Reg. 20
#define XBARA1_SEL21 XBARA_BASE._0x002a // CrossbarA Slct Reg. 21
#define XBARA1_SEL22 XBARA_BASE._0x002c // CrossbarA Slct Reg. 22
#define XBARA1_SEL23 XBARA_BASE._0x002e // CrossbarA Slct Reg. 23
#define XBARA1_SEL24 XBARA_BASE._0x0030 // CrossbarA Slct Reg. 24
#define XBARA1_SEL25 XBARA_BASE._0x0032 // CrossbarA Slct Reg. 25
#define XBARA1_SEL26 XBARA_BASE._0x0034 // CrossbarA Slct Reg. 26
#define XBARA1_SEL27 XBARA_BASE._0x0036 // CrossbarA Slct Reg. 27
#define XBARA1_SEL28 XBARA_BASE._0x0038 // CrossbarA Slct Reg. 28
#define XBARA1_SEL29 XBARA_BASE._0x003a // CrossbarA Slct Reg. 29
#define XBARA1_SEL30 XBARA_BASE._0x003c // CrossbarA Slct Reg. 30
#define XBARA1_SEL31 XBARA_BASE._0x003e // CrossbarA Slct Reg. 31
#define XBARA1_SEL32 XBARA_BASE._0x0040 // CrossbarA Slct Reg. 32
#define XBARA1_SEL33 XBARA_BASE._0x0042 // CrossbarA Slct Reg. 33
#define XBARA1_SEL34 XBARA_BASE._0x0044 // CrossbarA Slct Reg. 34
#define XBARA1_SEL35 XBARA_BASE._0x0046 // CrossbarA Slct Reg. 35
#define XBARA1_SEL36 XBARA_BASE._0x0048 // CrossbarA Slct Reg. 36
#define XBARA1_SEL37 XBARA_BASE._0x004a // CrossbarA Slct Reg. 37
#define XBARA1_SEL38 XBARA_BASE._0x004c // CrossbarA Slct Reg. 38
#define XBARA1_SEL39 XBARA_BASE._0x004e // CrossbarA Slct Reg. 39
#define XBARA1_SEL40 XBARA_BASE._0x0050 // CrossbarA Slct Reg. 40
#define XBARA1_SEL41 XBARA_BASE._0x0052 // CrossbarA Slct Reg. 41
#define XBARA1_SEL42 XBARA_BASE._0x0054 // CrossbarA Slct Reg. 42
#define XBARA1_SEL43 XBARA_BASE._0x0056 // CrossbarA Slct Reg. 43
#define XBARA1_SEL44 XBARA_BASE._0x0058 // CrossbarA Slct Reg. 44
#define XBARA1_SEL45 XBARA_BASE._0x005a // CrossbarA Slct Reg. 45
#define XBARA1_SEL46 XBARA_BASE._0x005c // CrossbarA Slct Reg. 46
#define XBARA1_SEL47 XBARA_BASE._0x005e // CrossbarA Slct Reg. 47
#define XBARA1_SEL48 XBARA_BASE._0x0060 // CrossbarA Slct Reg. 48
#define XBARA1_SEL49 XBARA_BASE._0x0062 // CrossbarA Slct Reg. 49
#define XBARA1_SEL50 XBARA_BASE._0x0064 // CrossbarA Slct Reg. 50
#define XBARA1_SEL51 XBARA_BASE._0x0066 // CrossbarA Slct Reg. 51
#define XBARA1_SEL52 XBARA_BASE._0x0068 // CrossbarA Slct Reg. 52
#define XBARA1_SEL53 XBARA_BASE._0x006a // CrossbarA Slct Reg. 53
#define XBARA1_SEL54 XBARA_BASE._0x006c // CrossbarA Slct Reg. 54
#define XBARA1_SEL55 XBARA_BASE._0x006e // CrossbarA Slct Reg. 55
#define XBARA1_SEL56 XBARA_BASE._0x0070 // CrossbarA Slct Reg. 56
#define XBARA1_SEL57 XBARA_BASE._0x0072 // CrossbarA Slct Reg. 57
#define XBARA1_SEL58 XBARA_BASE._0x0074 // CrossbarA Slct Reg. 58
#define XBARA1_SEL59 XBARA_BASE._0x0076 // CrossbarA Slct Reg. 59
#define XBARA1_SEL60 XBARA_BASE._0x0078 // CrossbarA Slct Reg. 60
#define XBARA1_SEL61 XBARA_BASE._0x007a // CrossbarA Slct Reg. 61
#define XBARA1_SEL62 XBARA_BASE._0x007c // CrossbarA Slct Reg. 62
#define XBARA1_SEL63 XBARA_BASE._0x007e // CrossbarA Slct Reg. 63
#define XBARA1_SEL64 XBARA_BASE._0x0080 // CrossbarA Slct Reg. 64
#define XBARA1_SEL65 XBARA_BASE._0x0082 // CrossbarA Slct Reg. 65
#define XBARA1_CTRL0 XBARA_BASE._0x0084 // CrossbarA Cnrol Re. 0
#define XBARA1_CTRL1 XBARA_BASE._0x0086 // CrossbarA Cnrol Re. 1

/**
 * @brief: XBARB, Inter-Peripheral Crossbar Switch B , Memory Map/Register
 * 62.3 p.3278
 *
 * base address: 0x403c0000
 *
 **/
#define XBARB_BASE0 MAP_16BIT_REGISTER(0x403c0000)
#define XBARB2_SEL0 XBARB_BASE0._0x0000 // CrossbarB Select Reg. 0
#define XBARB2_SEL1 XBARB_BASE0._0x0002 // CrossbarB Select Reg. 1
#define XBARB2_SEL2 XBARB_BASE0._0x0004 // CrossbarB Select Reg. 2
#define XBARB2_SEL3 XBARB_BASE0._0x0006 // CrossbarB Select Reg. 3
#define XBARB2_SEL4 XBARB_BASE0._0x0008 // CrossbarB Select Reg. 4
#define XBARB2_SEL5 XBARB_BASE0._0x000A // CrossbarB Select Reg. 5
#define XBARB2_SEL6 XBARB_BASE0._0x000C // CrossbarB Select Reg. 6
#define XBARB2_SEL7 XBARB_BASE0._0x000E // CrossbarB Select Reg. 7

#define XBARB_BASE1 MAP_16BIT_REGISTER(0x403c4000)
#define XBARB3_SEL0 XBARB_BASE1._0x0000 // CrossbarB Slct Reg. 0
#define XBARB3_SEL1 XBARB_BASE1._0x0002 // CrossbarB Slct Reg. 1
#define XBARB3_SEL2 XBARB_BASE1._0x0004 // CrossbarB Slct Reg. 2
#define XBARB3_SEL3 XBARB_BASE1._0x0006 // CrossbarB Slct Reg. 3
#define XBARB3_SEL4 XBARB_BASE1._0x0008 // CrossbarB Slct Reg. 4
#define XBARB3_SEL5 XBARB_BASE1._0x000A // CrossbarB Slct Reg. 5
#define XBARB3_SEL6 XBARB_BASE1._0x000C // CrossbarB Slct Reg. 6
#define XBARB3_SEL7 XBARB_BASE1._0x000E // CrossbarB Slct Reg. 7

/**
 * @brief: AOI, And-Or-Inverter , Memory Map/Register
 * 63.4 p.3287
 *
 * base address: 0x403b4000
 * base address 2: 0x403b8000
 *
 **/

#define AOI_BASE0 MAP_16BIT_REGISTER(0x403b4000)
#define AOI1_BFCRT010 AOI_BASE0._0x0000
#define AOI1_BFCRT230 AOI_BASE0._0x0002
#define AOI1_BFCRT011 AOI_BASE0._0x0004
#define AOI1_BFCRT231 AOI_BASE0._0x0006
#define AOI1_BFCRT012 AOI_BASE0._0x0008
#define AOI1_BFCRT232 AOI_BASE0._0x000a
#define AOI1_BFCRT013 AOI_BASE0._0x000c
#define AOI1_BFCRT233 AOI_BASE0._0x000e

#define AOI_BASE1 MAP_16BIT_REGISTER(0x403b8000)
#define AOI2_BFCRT010 AOI_BASE1._0x0000
#define AOI2_BFCRT230 AOI_BASE1._0x0002
#define AOI2_BFCRT011 AOI_BASE1._0x0004
#define AOI2_BFCRT231 AOI_BASE1._0x0006
#define AOI2_BFCRT012 AOI_BASE1._0x0008
#define AOI2_BFCRT232 AOI_BASE1._0x000a
#define AOI2_BFCRT013 AOI_BASE1._0x000c
#define AOI2_BFCRT233 AOI_BASE1._0x000e

/**


 * @brief Analog MUX Channel Mappings
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 *
 * The Analog MUX (ANMUX) provides a circuit for selecting an analog input
 * signal from eight channels. One signal is provided by the 6-bit
 * digital-to-analog converter (DAC). The mux circuit is designed to operate
 * across the full range of the supply voltage.
 *
 * The ANMUX has the following features:
 * • Two 8-to-1 channel mux
 * • Operational over the entire supply range
 *
 */

/**
 * @brief DAC, Digital to Analog Converter
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 * The 6-bit DAC is 64-tap resistor ladder network which provides a selectable
 * voltagereference for applications where voltage reference is needed. The
 * 64-tap resistor laddernetwork divides the supply reference Vin into 64
 * voltage levels. A 6-bit digital signal input selects the output voltage
 * level, which varies from Vin to Vin/64. Vin can be selectedfrom two voltage
 * sources, Vin1 and Vin2. The 6-bit DAC from a comparator is availableas an
 * on-chip internal signal only and is not available externally to a pin.
 *
 * The 6-bit DAC has the following features:
 * • 6-bit resolution
 * • Selectable supply reference source
 * • Power Down mode to conserve power when not in use
 * • Option to route the output to internal comparator input
 *
 */

/**
 * @brief ACMP, Analog Comparator, Memory Map/Register
 * 66.3, p.3302
 *
 * NOTE - Vin1 and Vin2 are all connected to VDDA, on this device.
 * ================ 65.2 ========================================
 * The comparator (CMP) module provides a circuit for comparing two analog
 * input voltages.
 * The comparator circuit is designed to operate across the full
 * range of the supply voltage, known as rail-to-rail operation.
 *
 * The CMP has the following features:
 * • Operational over the entire supply range
 * • Inputs may range from rail to rail
 * • Programmable hysteresis control
 * • Selectable interrupt on rising-edge, falling-edge, or both rising or
 *   falling edges of the comparator output
 * • Selectable inversion on comparator output
 * • Capability to produce a wide range of outputs such as:
 *    • Sampled
 *    • Windowed, which is ideal for certain PWM
 *      zero-crossing-detection applications
 *    • Digitally filtered:
 *        • Filter can be bypassed
 *        • Can be clocked via external SAMPLE signal or scaled bus clock
 *    • External hysteresis can be used at the same time that the output filter
 *      is used for internal functions
 *    • Two software selectable performance levels:
 *        • Shorter propagation delay at the expense of higher power
 *        •  Low power, with longer propagation delay
 *    • DMA transfer support
 *        •  A comparison event can be selected to trigger a DMA transfer
 *    • Functional in all modes of operation
 *    • The window and filter functions are not available in the following
 *      modes:
 *      • Stop
 *      • VLPS
 *
 * In the CMP block diagram (p. 3301):
 * • The Window Control block is bypassed when CR1[WE] = 0
 * • If CR1[WE] = 1, the comparator output will be sampled on every bus clock
 *   when WINDOW=1 to generate COUTA. Sampling does NOT occur when WINDOW = 0.
 * • The Filter block is bypassed when not in use.
 * • The Filter block acts as a simple sampler if the filter is bypassed
 *   and CR0[FILTER_CNT] is set to 0x01.
 * • The Filter block filters based on multiple samples when the filter is
 *   bypassed andCR0[FILTER_CNT] is set greater than 0x01.
 * • If CR1[SE] = 1, the external SAMPLE input is used as sampling clock
 * • If CR1[SE] = 0, the divided bus clock is used as sampling clock
 * • If enabled, the Filter block will incur up to one bus clock additional
 *   latency penalty on COUT due to the fact that COUT, which is crossing clock
 *   domain boundaries,must be resynchronized to the bus clock.
 * •  CR1[WE] and CR1[SE] are mutually exclusive.
 */

// CMP CONTROL REGISTERS, p.3301 - p.3324 in
// IMXRT1060_Processor_Reference_Manual CMP1
#define CMP_BASE MAP_8BIT_REGISTER(0x40094000)
#define CMP1_CR0 CMP_BASE._0x000 // R/W, CMP Control Register 0
#define CMP1_CR1 CMP_BASE._0x001 // R/W, CMP Control Register 1
#define CMP1_FPR CMP_BASE._0x002 // R/W, CMP Filter Period Register
#define CMP1_SCR CMP_BASE._0x003 // R/W, CMP Status and Control Register
#define CMP1_DACCR CMP_BASE._0x004 // R/W, DAC Control Register
#define CMP1_MUXCR CMP_BASE._0x005 // R/W, MUX Control Register

// CMP2
#define CMP2_CR0 CMP_BASE._0x008 // R/W, CMP Control Register 0
#define CMP2_CR1 CMP_BASE._0x009 // R/W, CMP Control Register 1
#define CMP2_FPR CMP_BASE._0x00a // R/W, CMP Filter Period Register
#define CMP2_SCR CMP_BASE._0x00b // R/W, CMP Status and Control Register
#define CMP2_DACCR CMP_BASE._0x00c // R/W, DAC Control Register
#define CMP2_MUXCR CMP_BASE._0x00d // R/W, MUX Control Register

// CMP3
#define CMP3_CR0 CMP_BASE._0x010 // R/W, CMP Control Register 0
#define CMP3_CR1 CMP_BASE._0x011 // R/W, CMP Control Register 1
#define CMP3_FPR CMP_BASE._0x012 // R/W, CMP Filter Period Register
#define CMP3_SCR CMP_BASE._0x013 // R/W, CMP Status and Control Register
#define CMP3_DACCR CMP_BASE._0x014 // R/W, DAC Control Register
#define CMP3_MUXCR CMP_BASE._0x015 // R/W, MUX Control Register

// CMP4
#define CMP4_CR0 CMP_BASE._0x018 // R/W, CMP Control Register 0
#define CMP4_CR1 CMP_BASE._0x019 // R/W, CMP Control Register 1
#define CMP4_FPR CMP_BASE._0x01a // R/W, CMP Filter Period Register
#define CMP4_SCR CMP_BASE._0x01b // R/W, CMP Status and Control Register
#define CMP4_DACCR CMP_BASE._0x01c // R/W, DAC Control Register
#define CMP4_MUXCR CMP_BASE._0x01d // R/W, MUX Control Register

/**
 * @brief ADC, Analog to Digital Converter p.3325
 * The analog-to-digital converter (ADC) is a successive approximation ADC
 * designed foroperation within an integrated microcontroller
 *
 * The features of the ADC are as follows:
 * • Configuration registers
 * • 32-bit, word aligned, byte enabled registers.
 *   (byte and half word access is not supported)
 * • Linear successive approximation algorithm with up
 *   to 12-bit resolution with 10/11bit accuracy.
 * • Up to 10 ENOB (dedicated single ended channels)
 * • Up to 1MS/s sampling rate
 * • Up to 16 single-ended external analog inputs
 * • Single or continuous conversion
 *   (automatic return to idle after single conversion)
 * • Output Modes: (in right-justified unsigned format)
 *    • 12-bit
 *    • 10-bit
 *    • 8-bit
 * • Configurable sample time and conversion speed/power
 * • Conversion complete and hardware average complete flag and interrupt
 * • Input clock selectable from up to three sources
 * • Asynchronous clock source for lower noise operation
 *   with option to output the clock
 * • Selectable asynchronous hardware conversion trigger
 *   with hardware channel select
 * • Automatic compare with interrupt for less-than, greater-than
 *   or equal-to, withinrange, or out-of-range, programmable value
 * • Operation in low power modes for lower noise operation
 * • Hardware average function
 * • Self-calibration mode
 */

// ADC1
// ADC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define ADC1_BASE MAP_32BIT_REGISTER(0x400c4000)
// // Control Registers for hardware triggers
#define ADC1_HC0 ADC1_BASE._0x0000
#define ADC1_HC1 ADC1_BASE._0x0004
#define ADC1_HC2 ADC1_BASE._0x0008
#define ADC1_HC3 ADC1_BASE._0x000c
#define ADC1_HC4 ADC1_BASE._0x0010
#define ADC1_HC5 ADC1_BASE._0x0014
#define ADC1_HC6 ADC1_BASE._0x0018
#define ADC1_HC7 ADC1_BASE._0x001c

// // Status Register for HW Triggers
#define ADC1_HS ADC1_BASE._0x0020

// // Data result registers for HW triggers
#define ADC1_R0 ADC1_BASE._0x0024
#define ADC1_R1 ADC1_BASE._0x0028
#define ADC1_R2 ADC1_BASE._0x002c
#define ADC1_R3 ADC1_BASE._0x0030
#define ADC1_R4 ADC1_BASE._0x0034
#define ADC1_R5 ADC1_BASE._0x0038
#define ADC1_R6 ADC1_BASE._0x003c
#define ADC1_R7 ADC1_BASE._0x0040

// // Other registers
#define ADC1_CFG ADC1_BASE._0x0044 // Config. Register
#define ADC1_GC ADC1_BASE._0x0048 // General control register
#define ADC1_GS ADC1_BASE._0x004c // General status register
#define ADC1_CV ADC1_BASE._0x0050 // Compare value register
#define ADC1_OFS ADC1_BASE._0x0054 // Offset correction calue register
#define ADC1_CAL ADC1_BASE._0x0058 // Calibration value register

// ADC2
// ADC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define ADC2_BASE MAP_32BIT_REGISTER(0x400c8000)
// // Control Registers for hardware triggers
#define ADC2_HC0 ADC2_BASE._0x0000
#define ADC2_HC1 ADC2_BASE._0x0004
#define ADC2_HC2 ADC2_BASE._0x0008
#define ADC2_HC3 ADC2_BASE._0x000c
#define ADC2_HC4 ADC2_BASE._0x0010
#define ADC2_HC5 ADC2_BASE._0x0014
#define ADC2_HC6 ADC2_BASE._0x0018
#define ADC2_HC7 ADC2_BASE._0x001c

// // Status Register for HW Triggers
#define ADC2_HS ADC2_BASE._0x0020

// // Data result registers for HW triggers
#define ADC2_R0 ADC2_BASE._0x0024
#define ADC2_R1 ADC2_BASE._0x0028
#define ADC2_R2 ADC2_BASE._0x002c
#define ADC2_R3 ADC2_BASE._0x0030
#define ADC2_R4 ADC2_BASE._0x0034
#define ADC2_R5 ADC2_BASE._0x0038
#define ADC2_R6 ADC2_BASE._0x003c
#define ADC2_R7 ADC2_BASE._0x0040

/**
 * @brief ADC_ETC, Analog to Digital Converter p.3371
 *
 *  The ADC_ETC module enables multiple users to share the ADC modules in a
 *  TIME-Division-Multiplexing (TDM) way.
 *  The external triggers can be from the Cross BAR(XBAR) and
 *  TSC (Touch Screen Controller) in SOC.
 *  The ADC_ETC has one TSCexternal trigger and 8 external triggers from XBAR.
 *  The TSC external trigger is sharedby TSC0 and TSC1.
 *  The triggers trig0~trig3 from XBAR and TSC0 belong to
 *  channel 0 and control ADC1, and trig4~trig7 and TSC1 belong to
 *  channel 1 and share ADC2 with the TSC external trigger.
 *  When TSC_BYPASS is set, TSC external trigger will control ADC2 directly.
 *  The ADC_ETC also supports SyncMode.
 *  When set as SyncMode, the ADC_ETC trigger source will
 *  control ADC1 and ADC2 synchronously.
 *  In SyncMode, the initial delay is controlled by the registers of
 *  trig0~trig3, while other settings are independent.
 *  The SyncMode can not be used when TSC_BYPASS is active. TheADC_ETC can
 *  support interrupt mode and DMA mode (controlled independently).
 *
 * The ADC_ETC includes the following features:
 * • ADC trigger control interface with dual ADCs, support up to 8 Hardware
 *   External Trigger (ext_hwts[7:0]) control for each ADC
 * • Capable of triggering dual ADC in SyncMode or AsyncMode:
 *    • In SyncMode ADC1 and ADC2 are controlled by the
 *      same trigger source of ADC_ETC.
 *    • In AsyncMode ADC1 and ADC2 are controlled by
 *      separate trigger source of ADC_ETC.
 * • Support up to four external trigger inputs for each ADC
 *   (trig0~trig3 for ADC1, andtrig4~trig7 for ADC2):
 *    • Four single to multiple (up to 8) trigger sources.
 *    One external trigger of ADC_ETC results in multiple sequential triggers,
 *    which are named as triggerchain, to ADC.
 *    • Flexible ADC trigger interval and initial delay control.
 *    • Each trigger sources can be configured as HW or SW trigger mode.
 *
 * • ADC result holding and status reporting
 * • External trigger auto hold and arbitration
 * • Each external trigger can be configured with a fixed priority.
 *   External trigger with the highest priority is severed first.
 *
 * • Hold one trigger event upon arbitration lose or ADC busy.
 * • Support ADC trigger interface cascading
 * • Support interrupt mode. When interrupt mode is selected and one
 *   ADC conversion is done, an interrupt request signal will be
 *   generated on one of the Done0~Done2 interrupt outputs.
 *
 * • Support DMA mode. When DMA is enabled and one ADC conversion is done,
 *   aDMA request will be sent. 2 trigger modes of DMA can be selected by
 *   configuring DMA_MODE_SEL bitfield.
 */
// ADC_ETC
// ADC_ETC MEMORY ADDRESS MAPPINGS p.3376-p.3398
#define ADC_ETC_BASE MAP_32BIT_REGISTER(0x403b0000)
// // Control Registers for hardware triggers
#define ADC_ETC_GCR ADC_ETC_BASE._0x0000 // ADC_ETC Global Control Register
#define ADC_HC1 ADC_ETC_BASE._0x0004 // ETC DONE0 and DONE1 IRQ State Register
#define ADC_HC2 ADC_ETC_BASE._0x0008 // ETC DONE2 and DONE3 IRQ State Register
#define ADC_HC3 ADC_ETC_BASE._0x000c // ETC DMA Control Register

// TRIG0
#define ADC_TRIG0_CR ADC_ETC_BASE._0x0010 // ETC TRIG0 Control Register
#define ADC_TRIG0_COUNTERR ADC_ETC_BASE._0x0014 // ETC TRIG0 COUNTER Register
#define ADC_TRIG0_CHAIN_1_0 ADC_ETC_BASE._0x0018 // ETC TRIG0 Chain 0/1 Reg.
#define ADC_TRIG0_CHAIN_3_2 ADC_ETC_BASE._0x001c // ETC TRIG0 Chain 2/3 Reg.
#define ADC_TRIG0_CHAIN_5_4 ADC_ETC_BASE._0x0020 // ETC TRIG0 Chain 4/5 Reg.
#define ADC_TRIG0_CHAIN_7_6 ADC_ETC_BASE._0x0024 // ETC TRIG0 Chain 6/7 Reg.
#define ADC_TRIG0_RES_1_0 ADC_ETC_BASE._0x0028 // ETC TRIG0 Result Data 0/1 Reg.
#define ADC_TRIG0_RES_3_2 ADC_ETC_BASE._0x002c // ETC TRIG0 Result Data 2/3 Reg.
#define ADC_TRIG0_RES_5_4 ADC_ETC_BASE._0x0030 // ETC TRIG0 Result Data 4/5 Reg.
#define ADC_TRIG0_RES_7_6 ADC_ETC_BASE._0x0034 // ETC TRIG0 Result Data 6/7 Reg.

// TRIG1
#define ADC_TRIG1_CR ADC_ETC_BASE._0x0038 // ETC TRIG1 Control Register
#define ADC_TRIG1_COUNTERR ADC_ETC_BASE._0x003c // ETC TRIG1 COUNTER Register
#define ADC_TRIG1_CHAIN_1_0 ADC_ETC_BASE._0x0040 // ETC TRIG1 Chain 0/1 Reg.
#define ADC_TRIG1_CHAIN_3_2 ADC_ETC_BASE._0x0044 // ETC TRIG1 Chain 2/3 Reg.
#define ADC_TRIG1_CHAIN_5_4 ADC_ETC_BASE._0x0048 // ETC TRIG1 Chain 4/5 Reg.
#define ADC_TRIG1_CHAIN_7_6 ADC_ETC_BASE._0x004c // ETC TRIG1 Chain 6/7 Reg.
#define ADC_TRIG1_RES_1_0 ADC_ETC_BASE._0x0050 // ETC TRIG1 Result Data 0/1 Reg.
#define ADC_TRIG1_RES_3_2 ADC_ETC_BASE._0x0054 // ETC TRIG1 Result Data 2/3 Reg.
#define ADC_TRIG1_RES_5_4 ADC_ETC_BASE._0x0058 // ETC TRIG1 Result Data 4/5 Reg.
#define ADC_TRIG1_RES_7_6 ADC_ETC_BASE._0x005c // ETC TRIG1 Result Data 6/7 Reg.

// TRIG2
#define ADC_TRIG2_CR ADC_ETC_BASE._0x0060 // ETC TRIG2 Control Register
#define ADC_TRIG2_COUNTERR ADC_ETC_BASE._0x0064 // ETC TRIG2 COUNTER Register
#define ADC_TRIG2_CHAIN_1_0 ADC_ETC_BASE._0x0068 // ETC TRIG2 Chain 0/1 Reg.
#define ADC_TRIG2_CHAIN_3_2 ADC_ETC_BASE._0x006c // ETC TRIG2 Chain 2/3 Reg.
#define ADC_TRIG2_CHAIN_5_4 ADC_ETC_BASE._0x0070 // ETC TRIG2 Chain 4/5 Reg.
#define ADC_TRIG2_CHAIN_7_6 ADC_ETC_BASE._0x0074 // ETC TRIG2 Chain 6/7 Reg.
#define ADC_TRIG2_RES_1_0 ADC_ETC_BASE._0x0078 // ETC TRIG2 Result Data 0/1 Reg.
#define ADC_TRIG2_RES_3_2 ADC_ETC_BASE._0x007c // ETC TRIG2 Result Data 2/3 Reg.
#define ADC_TRIG2_RES_5_4 ADC_ETC_BASE._0x0080 // ETC TRIG2 Result Data 4/5 Reg.
#define ADC_TRIG2_RES_7_6 ADC_ETC_BASE._0x0084 // ETC TRIG2 Result Data 6/7 Reg.

// TRIG3
#define ADC_TRIG3_CR ADC_ETC_BASE._0x0088 // ETC TRIG3 Control Register
#define ADC_TRIG3_COUNTERR ADC_ETC_BASE._0x008c // ETC TRIG3 COUNTER Register
#define ADC_TRIG3_CHAIN_1_0 ADC_ETC_BASE._0x0090 // ETC TRIG3 Chain 0/1 Reg.
#define ADC_TRIG3_CHAIN_3_2 ADC_ETC_BASE._0x0094 // ETC TRIG3 Chain 2/3 Reg.
#define ADC_TRIG3_CHAIN_5_4 ADC_ETC_BASE._0x0098 // ETC TRIG3 Chain 4/5 Reg.
#define ADC_TRIG3_CHAIN_7_6 ADC_ETC_BASE._0x009c // ETC TRIG3 Chain 6/7 Reg.
#define ADC_TRIG3_RES_1_0 ADC_ETC_BASE._0x00a0 // ETC TRIG3 Result Data 0/1 Reg.
#define ADC_TRIG3_RES_3_2 ADC_ETC_BASE._0x00a4 // ETC TRIG3 Result Data 2/3 Reg.
#define ADC_TRIG3_RES_5_4 ADC_ETC_BASE._0x00a8 // ETC TRIG3 Result Data 4/5 Reg.
#define ADC_TRIG3_RES_7_6 ADC_ETC_BASE._0x00ac // ETC TRIG3 Result Data 6/7 Reg.

// TRIG4
#define ADC_TRIG4_CR ADC_ETC_BASE._0x00b0 // ETC TRIG4 Control Register
#define ADC_TRIG4_COUNTERR ADC_ETC_BASE._0x00b4 // ETC TRIG4 COUNTER Register
#define ADC_TRIG4_CHAIN_1_0 ADC_ETC_BASE._0x00b8 // ETC TRIG4 Chain 0/1 Reg.
#define ADC_TRIG4_CHAIN_3_2 ADC_ETC_BASE._0x00bc // ETC TRIG4 Chain 2/3 Reg.
#define ADC_TRIG4_CHAIN_5_4 ADC_ETC_BASE._0x00c0 // ETC TRIG4 Chain 4/5 Reg.
#define ADC_TRIG4_CHAIN_7_6 ADC_ETC_BASE._0x00c4 // ETC TRIG4 Chain 6/7 Reg.
#define ADC_TRIG4_RES_1_0 ADC_ETC_BASE._0x00c8 // ETC TRIG4 Result Data 0/1 Reg.
#define ADC_TRIG4_RES_3_2 ADC_ETC_BASE._0x00cc // ETC TRIG4 Result Data 2/3 Reg.
#define ADC_TRIG4_RES_5_4 ADC_ETC_BASE._0x00d0 // ETC TRIG4 Result Data 4/5 Reg.
#define ADC_TRIG4_RES_7_6 ADC_ETC_BASE._0x00d4 // ETC TRIG4 Result Data 6/7 Reg.

// TRIG5
#define ADC_TRIG5_CR ADC_ETC_BASE._0x00d8 // ETC TRIG5 Control Register
#define ADC_TRIG5_COUNTERR ADC_ETC_BASE._0x00dc // ETC TRIG5 COUNTER Register
#define ADC_TRIG5_CHAIN_1_0 ADC_ETC_BASE._0x00e0 // ETC TRIG5 Chain 0/1 Reg.
#define ADC_TRIG5_CHAIN_3_2 ADC_ETC_BASE._0x00e4 // ETC TRIG5 Chain 2/3 Reg.
#define ADC_TRIG5_CHAIN_5_4 ADC_ETC_BASE._0x00e8 // ETC TRIG5 Chain 4/5 Reg.
#define ADC_TRIG5_CHAIN_7_6 ADC_ETC_BASE._0x00ec // ETC TRIG5 Chain 6/7 Reg.
#define ADC_TRIG5_RES_1_0 ADC_ETC_BASE._0x00f0 // ETC TRIG5 Result Data 0/1 Reg.
#define ADC_TRIG5_RES_3_2 ADC_ETC_BASE._0x00f4 // ETC TRIG5 Result Data 2/3 Reg.
#define ADC_TRIG5_RES_5_4 ADC_ETC_BASE._0x00f8 // ETC TRIG5 Result Data 4/5 Reg.
#define ADC_TRIG5_RES_7_6 ADC_ETC_BASE._0x00fc // ETC TRIG5 Result Data 6/7 Reg.

// TRIG6
#define ADC_TRIG6_CR ADC_ETC_BASE._0x0100 // ETC TRIG6 Control Register
#define ADC_TRIG6_COUNTERR ADC_ETC_BASE._0x0104 // ETC TRIG6 COUNTER Register
#define ADC_TRIG6_CHAIN_1_0 ADC_ETC_BASE._0x0108 // ETC TRIG6 Chain 0/1 Reg.
#define ADC_TRIG6_CHAIN_3_2 ADC_ETC_BASE._0x010c // ETC TRIG6 Chain 2/3 Reg.
#define ADC_TRIG6_CHAIN_5_4 ADC_ETC_BASE._0x0110 // ETC TRIG6 Chain 4/5 Reg.
#define ADC_TRIG6_CHAIN_7_6 ADC_ETC_BASE._0x0114 // ETC TRIG6 Chain 6/7 Reg.
#define ADC_TRIG6_RES_1_0 ADC_ETC_BASE._0x0118 // ETC TRIG6 Result Data 0/1 Reg.
#define ADC_TRIG6_RES_3_2 ADC_ETC_BASE._0x011c // ETC TRIG6 Result Data 2/3 Reg.
#define ADC_TRIG6_RES_5_4 ADC_ETC_BASE._0x0120 // ETC TRIG6 Result Data 4/5 Reg.
#define ADC_TRIG6_RES_7_6 ADC_ETC_BASE._0x0124 // ETC TRIG6 Result Data 6/7 Reg.

// TRIG7
#define ADC_TRIG7_CR ADC_ETC_BASE._0x0128 // ETC TRIG7 Control Register
#define ADC_TRIG7_COUNTERR ADC_ETC_BASE._0x012c // ETC TRIG7 COUNTER Register
#define ADC_TRIG7_CHAIN_1_0 ADC_ETC_BASE._0x0120 // ETC TRIG7 Chain 0/1 Reg.
#define ADC_TRIG7_CHAIN_3_2 ADC_ETC_BASE._0x0124 // ETC TRIG7 Chain 2/3 Reg.
#define ADC_TRIG7_CHAIN_5_4 ADC_ETC_BASE._0x0128 // ETC TRIG7 Chain 4/5 Reg.
#define ADC_TRIG7_CHAIN_7_6 ADC_ETC_BASE._0x012c // ETC TRIG7 Chain 6/7 Reg.
#define ADC_TRIG7_RES_1_0 ADC_ETC_BASE._0x0130 // ETC TRIG7 Result Data 0/1 Reg.
#define ADC_TRIG7_RES_3_2 ADC_ETC_BASE._0x0134 // ETC TRIG7 Result Data 2/3 Reg.
#define ADC_TRIG7_RES_5_4 ADC_ETC_BASE._0x0138 // ETC TRIG7 Result Data 4/5 Reg.
#define ADC_TRIG7_RES_7_6 ADC_ETC_BASE._0x013c // ETC TRIG7 Result Data 6/7 Reg.

/**
 * @brief TSC, Touch Screen Controller p.3399
 *
 * This block describes the Touch Screen Controller (TSC), which is used for ADC
 * and touch screen analogue block. TSC is responsible for providing control of
 * ADC and touch screen analogue block toform a touch screen system, which
 * achieves function of touch detection and touchlocation detection. The
 * controller utilizes ADC hardware trigger function and controlswitches in
 * touch screen analogue block. The controller only supports 4-wire of
 * 5-wirescreen touch modes
 *
 * The features of TSC controller are following.
 * • Configure registers: 32-bit, fully support sky-blue bus interface
 * • 4-wire or 5-wire mode of touch screen
 * • Low power wake up functions
 * • ADC average function and custom 8-bit, 10-bit, and 12-bit conversion result
 * • Custom pre-charge and de-glitch threshold time setting
 * • Total control five analogue groups of switches
 * • Fully asynchronous interface to ADC and analogue switches
 * • Easy software operation
 * • Software takes control of operation flow
 * • Strong debug functions—enable software recognize the IP as a transparent
 *   box and operation ouput directly
 * • Software reset function
 */

// TSC MEMORY ADDRESS MAPPINGS p.3352-p.3370
#define TSC_BASE MAP_32BIT_REGISTER(0x400e0000)
#define TSC_BASIC_SETTING TSC_BASE._0x000
#define TSC_PRE_CHARGE_TIME TSC_BASE._0x010
#define TSC_FLOW_CTRL TSC_BASE._0x020
#define TSC_MEASURE_VALUE TSC_BASE._0x030
#define TSC_INTRPT_ENABLE TSC_BASE._0x40
#define TSC_INTRPT_SIG_ENABLE TSC_BASE._0x50
#define TSC_INTRPT_STATUS TSC_BASE._0x60
#define TSC_DEBUG_MODE TSC_BASE._0x70
#define TSC_DEBUG_MODE2 TSC_BASE._0x80

/**
 * @brief Configure MPU (Memory Protection Unit) based on armv7m docs
 * NOTE:
 * In Resources/./DDI0489B_cortex_m7_trm.pdf:
 * 4.1(p.56), 5.x(p.61) & 6.x(p.99)
 *
 * In Resources/./DDI0403E_d_armv7m_arm.pdf:
 * A3.5(p.78), A3.6(p.87), A3.7(p.89) & B3.5(p.632)
 *
 * B3.5.1(p.633):
 * Relation of the MPU to the system memory map.
 * When implemented, an MPU’s relation to the system memory map described in The
 * system address map on B3 (p.592) is as follows:
 * • MPU support provides control of access rights on physical addresses. It
 *   does not perform address translation.
 *
 * • When the MPU is disabled or not present, the system adopts the default
 *   system memory map listed in Table B3-1 on B3(p.592). When the MPU is
 *   enabled, the enabled regions define the system address map with the
 *   following provisos:
 *   — Accesses to the Private Peripheral Bus (PPB) always use the
 *     default system address map.
 *
 *   — Exception vector reads from the Vector Address Table always
 *     use the default system address map.
 *   — The MPU is restricted in how it can change the default memory map
 *     attributes associated with System space, that is, for addresses
 *     0xE0000000 and higher.
 *     System space is always marked as XN, Execute Never.
 *   — When the execution priority is less than 0, MPU_CTRL.HFNMIENA determines
 *     whether memory accesses use the MPU or the default memory map attributes.
 *     The execution priority is less than 0 if the processor is executing the
 *     NMI or HardFault handler, or if FAULTMASK is set to 1.
 *   — The default system memory map can be configured to provide a background
 *     region for privileged accesses.
 *   — Accesses with an address match in more than one region use the highest
 *     matching region number for the access attributes.
 *   — Accesses that do not match all access conditions of a region address
 *     match (with the MPU enabled) or a background/default memory map match
 *     generate a fault.
 *
 * B3.5.2  Behavior when the MPU is disabled.
 * Disabling the MPU, by setting the MPU_CTRL.ENABLE bit to 0, means that
 * privileged and unprivileged accesses use the default memory map.
 *
 * When the MPU is disabled:
 * • Instruction accesses use the default memory map and attributes shown in
 *   Table B3-1 on B3(p.592). An access to a memory region with the
 *   execute-never attribute generates a MemManage fault, see Execute Never
 *   encoding on B3(p.642). No other permission checks are performed. Additional
 *   control of the Cacheability is made by:
 *   — The CCR.IC bit if separate instruction and data caches are implemented.
 *   — The CCR.DC bit if unified caches are implemented.
 *
 * • Data accesses use the default memory map and attributes shown in Table B3-1
 *   on B3(p.592). No memory access permission checks are performed, and no
 *   aborts can be generated.
 * • Program flow prediction functions as normal, controlled by the
 *   value of the CCR.BP bit.
 *
 * • Speculative instruction and data fetch operations work as normal, based on
 *   the default memory map:
 *   — Speculative data read operations have no effect if the
 *     data cache is disabled.
 *   — Speculative instruction fetch operations have no effect if the
 *     instruction cache is disabled.
 *
 *
 * MPU pseudocode:
 * The following pseudocode defines the operation of an ARMv7-M MPU.
 * The terms used align with the MPU register names and bit field names
 * described in Register support for PMSAv7 in the SCS on page B3-635.
 *
 * // ValidateAddress()
 * // =================
 * AddressDescriptor
 * ValidateAddress(bits(32) address, AccType acctype, boolean iswrite)
 *    ispriv = acctype != AccType_UNPRIV && FindPriv();
 *    AddressDescriptor result;
 *    Permissions perms;
 *    result.physicaladdress = address;
 *    result.memattrs = DefaultMemoryAttributes(address);
 *    perms = DefaultPermissions(address);
 *    hit = FALSE; //Assume no valid MPU region and not using default memory map
 *    isPPBaccess = (address<31:20> == ‘111000000000’);
 *    if acctype == AccType_VECTABLE || isPPBaccess then
 *        hit = TRUE; // use default map for PPB and vector table lookups
 *    elsif MPU_CTRL.ENABLE == ‘0’ then
 *        if MPU_CTRL.HFNMIENA == ‘1’ then UNPREDICTABLE;
 *        else hit = TRUE; // always use default map if MPU disabled
 *    elsif MPU_CTRL.HFNMIENA == ‘0’ && ExecutionPriority() < 0 then
 *        hit = TRUE; // optionally use default for HardFault, NMI and FAULTMASK
 *
 *    else  // MPU is enabled so check each individual region
 *        if (MPU_CTRL.PRIVDEFENA == ‘1’) && ispriv then
 *            hit = TRUE; // opt. default as background for Privileged accesses
 *        for r = 0 to (UInt(MPU_TYPE.DREGION) - 1) // top matching region wins
 *            bits(16) size_enable    = MPU_RASR[r]<15:0>;
 *            bits(32) base_address   = MPU_RBAR[r];
 *            bits(16) access_control = MPU_RASR[r]<31:16>;
 *        if size_enable<0> == ‘1’ then  // MPU region enabled so perform checks
 *            lsbit = UInt(size_enable<5:1>) + 1;
 *            if lsbit < 5 then UNPREDICTABLE;
 *            if (lsbit < 8) && (!IsZero(size_enable<15:8>)) then UNPREDICTABLE;
 *            if lsbit == 32 || address<31:lsbit> == base_address<31:lsbit> then
 *                subregion = UInt(address<lsbit-1:lsbit-3>);
 *                if size_enable<subregion+8> == ‘0’ then
 *                    texcb = access_control<5:3,1:0>;
 *                    S = access_control<2>;
 *                    perms.ap = access_control<10:8>;
 *                    perms.xn = access_control<12>;
 *                    result.memattrs = DefaultTEXDecode(texcb,S);
 *                    hit = TRUE;
 *    if address<31:29> == ‘111’ then  // enforce System space execute never
 *        perms.xn = ‘1’;
 *    if hit then  // perform check of acquired access permissions
 *        CheckPermission(perms, address, acctype, iswrite);
 *    else  // generate fault if no MPU match or use of default not enabled
 *        if acctype == AccType_IFETCH then
 *            MMFSR.IACCVIOL = ‘1’;
 *            MMFSR.MMARVALID = ‘0’;
 *        else
 *            MMFSR.DACCVIOL = ‘1’;
 *            MMAR = address;
 *            MMFSR.MMARVALID = ‘1’;
 *        ExceptionTaken(MemManage);
 *    return result;
 *
 * // DefaultPermissions()
 * // ====================
 * Permissions DefaultPermissions(bits(32) address)
 *    Permissions perms;
 *    perms.ap = ‘011’;
 *    case address<31:29> of
 *        when ‘000’
 *            perms.xn = ‘0’;
 *        when ‘001’
 *            perms.xn = ‘0’;
 *         when ‘010’
 *            perms.xn = ‘1’;
 *         when ‘011’
 *            perms.xn = ‘0’;
 *         when ‘100’
 *            perms.xn = ‘0’;
 *         when ‘101’
 *            perms.xn = ‘1’;
 *         when ‘110’
 *            perms.xn = ‘1’;
 *         when ‘111’
 *            perms.xn = ‘1’;
 * return perms;
 *
 *
 * =====================
 * (TABLE B3-11) MPU Registers in DDI0403E_darmv7m_arm.pdf:
 * PAGE  ADDRESS     NAME       ACCESS   RESETVAL  REGISTER DESCR.
 * p.636 0xE000ED90  MPU_TYPE   RO        IMPL.    MPU Type Reg.
 *                                        DEFINED
 * p.637 0xE000ED94  MPU_CTRL    RW     0x00000000  MPU Control Reg.
 * p.638 0xE000ED98  MPU_RNR     RW     UNKNOWNMPU  Region Number Reg.
 * p.639 0xE000ED9C  MPU_RBAR    RW     UNKNOWNMPU  Region Base Addr. Reg.
 * p.640 0xE000EDA0  MPU_RASR    RW     UNKNOWNMPU  Region Attr. and Size Reg.
 * p.642 0xE000EDA4  MPU_RBAR_A1 RW         -       Alias 1 of MPU_RBAR
 * p.642 0xE000EDA8  MPU_RASR_A1 RW         -       Alias 1 of MPU_RASR
 * p.642 0xE000EDAC  MPU_RBAR_A2 RW         -       Alias 2 of MPU_RBAR
 * p.642 0xE000EDB0  MPU_RASR_A2 RW         -       Alias 2 of MPU_RASR
 * p.642 0xE000EDB4  MPU_RBAR_A3 RW         -       Alias 3 of MPU_RBAR
 * p.642 0xE000EDB8  MPU_RASR_A3 RW         -       Alias 3 of MPU_RASR
 *
 *        0xE000EDBC-    -         ...         -         Reserved.
 *        0xE000EDEC
 * @note The values of the MPU_RASR registers from reset are UNKNOWN. All
 * MPU_RASR registers must be programmed as either enabled or disabled, before
 * enabling the MPU using the MPU_CTRL register.
 **/
typedef struct {
  vuint32_t TYPE; // RO
  vuint32_t CTRL; // RW
  vuint32_t RNR; // RW
  vuint32_t RBAR; // RW
  vuint32_t RASR; // RW
  vuint32_t RBAR_A1; // RW
  vuint32_t RASR_A1; // RW
  vuint32_t RBAR_A2; // RW
  vuint32_t RASR_A2; // RW
  vuint32_t RBAR_A3; // RW
  vuint32_t RASR_A3; // RW
} SReg_MPU;
#define MPU_BASE_ADDR MAP_32BIT_ANYREG(SReg_MPU, 0x0e00ed90)
#define MPU_TYPE MPU_BASE_ADDR.TYPE
#define MPU_CTRL MPU_BASE_ADDR.CTRL
#define MPU_RNR MPU_BASE_ADDR.RNR
#define MPU_RBAR MPU_BASE_ADDR.RBAR
#define MPU_RASR MPU_BASE_ADDR.RASR
/**
 * ==========================================================================
 * The MPU_TYPE register characteristics are:
 * Purpose:
 *   The MPU Type Register indicates how many regions the MPU support.
 *   Software can use it to determine if the processor implements an MPU.
 * Usage Constraints - There are no usage constraints.
 * Configurations - Always implemented.
 * Attributes - See Table B3-11 above.
 * The MPU_TYPE register bit assignments are:
 *         _______________________________________
 * Fields: |RESERVED|IREGION|DREGION|RESERVED|SEP|
 * Bitpos: |31    24|23   16|15    8|7      1| 0 |
 *         |________|_______|_______|________|___|
 * IREGION:  MPU_TYPE_IREGION_READ
 * DREGION:  MPU_TYPE_DREGION_READ
 * SEPARATE: MPU_TYPE_SEP_READ
 *           MPU_TYPE_SEP_EN
 *           MPU_TYPE_SEP_DIS
 * ==========================================================================
 **/

/**
 * @brief MPU_TYPE_IREGION_READ - Instruction Region.
 * Instruction region. RAZ. ARMv7-M only supports a unified MPU.
 **/
#define MPU_TYPE_IREGION_READ ((MPU_TYPE >> 0x10) & 0x8)

/**
 * @brief MPU_TYPE_DREGION_READ - Amount of data regions.
 * Number of regions supported by the MPU. If this field reads-as-zero
 * the processor does not implement an MPU.
 **/
#define MPU_TYPE_DREGION_READ ((MPU_TYPE >> 0x8) & 0x8)

/**
 * @brief MPU_TYPE_SEP_READ - Seperate instruction and d-addr support.
 * Indicates support for separate instruction and data address maps. RAZ.
 * ARMv7-M only supports a unified MPU.
 **/
#define MPU_TYPE_SEP_READ (MPU_TYPE & 0x1)

/** @brief Enable SEP */
#define MPU_TYPE_SEP_EN (MPU_TYPE |= 0x1)

/** @brief Disable SEP */
#define MPU_TYPE_SEP_DIS MPU_TYPE &= ~(0x1);

/**
 * ==========================================================================
 * The MPU_CTRL register characteristics are:
 * Purpose:
 *   Enables the MPU, and when the MPU is enabled, controls whether the default
 *   memory map is enabled as a background region for privileged accesses, and
 *   whether the MPU is enabled for HardFaults, NMIs, and exception handlers
 *   when FAULTMASK is set to 1.
 *
 * Usage Constraints - There are no usage constraints.
 * Configurations - Always implemented.
 * Attributes - See Table B3-11 above.
 * The MPU_TYPE register bit assignments are:
 *         _________________________________________________
 * Fields: |      RESERVED      |PRIVDEFENA|HFNMIENA|ENABLE|
 * Bitpos: |31                 3|     2    |    1   |   0  |
 *         |____________________|__________|________|______|
 * PRIVDEFENA: PRVDFENA_MPU, Use when the ENABLE bit is set to 1.
 * HFNMIENA:   HFNMIENA_MPU, When the ENABLE bit is set to 1, controls whether
 *                           handlers executing with priority less than 0 access
 *                           memory with the MPU enabled or with the MPU
 *                           disabled. This applies to HardFaults, NMIs, and
 *                           exception handlers when FAULTMASK is set to 1:
 * ENABLE:     ENABLE_MPU, ENABLE bit.
 * ==========================================================================
 **/
/** @brief MPU_CTRL_PRVDFENA_CLR - Disables the default memory map. Any
 *instructions or data access that does not access a defined region faults */
#define MPU_CTRL_PRVDFENA_CLR MPU_CTRL &= ~(0x1 << 0x2)
/** @brief MPU_CTRL_PRVDFENA_SET - MPU Enabled */
#define MPU_CTRL_PRVDFENA_SET MPU_CTRL |= (0x1 << 0x2)

/** @brief MPU_CTRL_HFNMIENA_CLR - Disables the MPU for these handlers */
#define MPU_CTRL_HFNMIENA_DIS MPU_CTRL &= ~(0x1 << 0x1)
/** @brief MPU_CTRL_HFNMIENA_SET - Use MPU for mem. access by these handlers */
#define MPU_CTRL_HFNMIENA_EN MPU_CTRL |= (0x1 << 0x1)

/** @brief MPU_CTRL_ENABLE_BIT_CLR - Clears the enable-bit for the MPU. */
#define MPU_CTRL_ENABLE_BIT_CLR MPU_CTRL &= ~(0x1 << 0x1)
/** @brief MPU_CTRL_ENABLE_BIT_SET - Sets the enable-bit for the MPU. */
#define MPU_CTRL_ENABLE_BIT_SET MPU_CTRL |= (0x1 << 0x1)

/**
 * ==========================================================================
 * The MPU_RNR register characteristics are:
 * Purpose:
 *   Selects the region currently accessed by MPU_RBAR and MPU_RASR.
 *
 * Usage Constraints - Used with MPU_RBAR and MPU_RASR,
 *                     see MPU Region Base Address Register, MPU_RBAR (p.639),
 *                     and MPU Region Attr. and Size Register, MPU_RASR (p.640).
 *                     If an implementation supports N regions then the regions
 *                     number from 0 to (N-1), and the effect of writing a value
 *                     of N or greater to the REGION field is UNPREDICTABLE.
 *
 * Configurations - Implemented only if the processor implements an MPU.
 * Attributes - See Table B3-11 above.
 * The MPU_RNR register bit assignments are:
 *         _________________________
 * Fields: |   RESERVED   | REGION |
 * Bitpos: |31           8|7      0|
 *         |______________|________|
 * REGION: Indicates the memory region accessed by MPU_RBAR and MPU_RASR.
 * Normally, software must write the required region number to MPU_RNR to select
 * the required memory region, before accessing MPU_RBAR or MPU_RASR. However,
 * the MPU_RBAR.VALID bit gives an alternative way of writing to MPU_RBAR to
 * update a region base address without first writing the region number to
 * MPU_RNR, see MPU Region Base Address Register, MPU_RBAR.
 * ==========================================================================
 **/
/** @brief MPU_RNR_REQ_REGIONS - Writes the amount of requested regions */
#define MPU_RNR_REQ_REGIONS(x) MPU_RNR = (MPU_RNR & 0xffffff00) | (x & 0xff)

/**
 * ==========================================================================
 * (p. 639)  The MPU_RBAR register characteristics are:
 * Purpose - Holds the base addr. of the region identified by MPU_RNR.
 *           On a write, can also be used to update the base address of a
 *           specified region, in the range 0-5, updating MPU_RNR with the new
 *           region number.
 *
 * Usage constraints -
 *                    • Normally, used with MPU_RBAR,
 *                      see MPU Region Number Register, MPU_RNRon page B3-638.
 *                    • The minimum region alignment required by an MPU_RBAR is
 *                      IMPLEMENTATION DEFINED.
 *                      See the register description for more info about
 *                      permitted region sizes.
 *                    • If an implementation supports N regions then the regions
 *                      number from 0 to (N-1). If N is less than 16 the effect
 *                      of writing a value of N or greater to the REGION
 *                      field is UNPREDICTABLE.
 *
 * Configurations - Implemented only if the processor implements an MPU.
 * Attributes - See Table B3-11 above.
 * The MPU_RBAR register bit assignments are:
 *         ________________________________________
 * Fields: |          ADDR.          |VALID|REGION|
 * Bitpos: |31                      5|  4  |3    0|
 *         |_________________________|_____|______|
 * ADDR:   MPU_RBAR_REGION_ADDR
 * VALID:  On writes: Indicates whether the region to update is specified by
 *                    MPU_RNR.REGION, or by the REGION value specified in this
 *                    write. When using the REGION value specified by this
 *                    write, MPU_RNR.REGION is updated to this value.
 *                    MPU_RBAR_VALID_W_0
 *                    MPU_RBAR_VALID_W_1
 *         On reads:  MPU_RBAR_VALID_READ
 *
 * REGION: MPU_RBAR_REGION_ADDR_W
 *         MPU_RBAR_REGION_ADDR_R
 *
 * @note
 * Software can find the minimum size of region supported by an MPU region by
 * writing all ones to MPU_RBAR[31:5] for that region, and then reading the
 * register to find the value saved to bits[31:5].
 *
 * The number of trailing zeros in this bit field indicates the minimum
 * supported alignment and therefore the supported region size.
 *
 * An implementation must support all region size values from the minimum
 * supported to 4GB, see the description of the MPU_RASR.SIZE field in MPU
 * Region Attribute and Size Register, MPU_RASR on page B3-640.
 *
 * Software must ensure that the value written to the ADDR field aligns with the
 * size of the selected region.
 * ==========================================================================
 **/

/** @brief MPU_RBAR_REGION_ADDR - Writes the amount of requested regions */
#define MPU_RBAR_REGION_ADDR MPU_RBAR = (MPU_RBAR & 0xffffffe0) | (x & 0x1f)

/** @brief MPU_RBAR_VALID_W_0 - Apply the base address update to the region
 *         specified by MPU_RNR.REGION. The REGION field value is ignored.*/
#define MPU_RBAR_VALID_W_0 (MPU_RBAR &= 0xffffffef)

/** @brief MPU_RBAR_VALID_W_1 - Update MPU_RNR.REGION to the value obtained by
 *         zero extending the REGION value specified in this write, and apply
 *         the base address update to this region. */
#define MPU_RBAR_VALID_W_1 (MPU_RBAR |= ~(0xffffffef))

/** @brief MPU_RBAR_VALID_READ - This bit reads as zero. */
#define MPU_RBAR_VALID_READ ((MPU_RBAR & 0xef) >> 0x4)

/** @brief MPU_RBAR_REGION_W - Can specify the number of the region to update,
 *                             see VALID field description. */
#define MPU_RBAR_REGION_W MPU_RBAR = (MPU_RBAR & 0xffffffe0) | (x & 0x1f)
/** @brief MPU_RBAR_REGION_R - Returns bits[3:0] of MPU_RNR. */
#define MPU_RBAR_REGION_R MPU_RBAR = (MPU_RBAR & 0xffffffe0) | (x & 0x1f)

/**
 * @brief MPU Region Attribute and Size Register. (MPU_SASR)
 * ==========================================================================
 * B3.5.9 (p. 640) MPU Region Attribute and Size Register.
 *The MPU_RASR register characteristics are:
 *
 * Purpose - Defines the size and access behavior of the region identified by
 *           MPU_RNR, and enables that region.
 *
 * Usage constraints -
 *                    • Used with MPU_RNR, see MPU Region Number Register,
 *                      MPU_RNR on B3(p.638)
 *
 *                    • Writing a SIZE value less than the minimum size
 *                      supported by the corresponding MPU_RBAR
 *                      has an UNPREDICTABLE effect.
 *
 * Configurations - Implemented only if the processor implements an MPU.
 * Attributes - See Table B3-11 above.
 * The MPU_RBAR register bit assignments are:
 * RS = reserved
 *         _____________________________________________________________________
 * Fields: |  RS  |XN|RS|  AP |  RS |  TEX | S| C| B|     SRD    | RS| SIZE |EN|
 * Bitpos: |31  29|28|27|26 24|23 22|21  19|18|17|16|15         8|7 6|5    1| 0|
 *         |______|__|__|_____|_____|______|__|__|__|____________|___|______|__|
 * ATTRS: MPU_RASR_SET_ATTR..
 * SRD:   MPU_RASR_EN_SUBREGION, MPU_RASR_DIS_SUBREGION
 * SIZE:   MPU_RASR_REGION_SIZE, MPU_RASR_SET_REGION_SIZE
 * ENABLE: MPU_RASR_ENABLE, MPU_RASR_DISABLE
 **/

/**
 * @brief ENABLE: Enable field.
 * bit[0] in MPU_RASR
 *           Enables this region:
 *              0 -  When the MPU is enabled, this region is disabled.
 *              1 -  When the MPU is enabled, this region is enabled.
 *           Enabling a region has no effect unless the MPU_CTRL.ENABLE
 *           bit is set to 1, to enable the MPU.
 **/
#define MPU_RASR_ENABLE MPU_RASR |= (0x1) // 0x1
#define MPU_RASR_DISABLE MPU_RASR &= ~(0x1) // 0x0

/**
 * @brief SIZE: Size Field.
 * bits[5,1] in MPU_RASR
 *          Indicates the region size. The region size, in bytes, is 2(SIZE+1).
 *          SIZE field values less than 4 are reserved, because the smallest
 *          supported region size is 32 bytes.
 **/
#define MPU_RASR_REGION_SIZE MPU_RASR |= (0x1) // 0x1
#define MPU_RASR_SET_REGION_SIZE MPU_RASR &= ~(0x1) // 0x0

/**
 * @brief XN: Execute Never Encoding
 * bit[28] in MPU_RASR
 * Table B3-16
 * XN | Description
 * ===|======================================================================
 * 0  |Execution of an instruction fetched from this region permitted
 * 1  |Execution of an instruction fetched from this region not permitted
 * ==========================================================================
 **/
#define MPU_RASR_NOT_PERMIT_EXEC MPU_RASR |= (0x1 << 0x1c) // 0x1
#define MPU_RASR_PERMIT_EXEC MPU_RASR &= ~(0x1 << 0x1c) // 0x0

/**
 * @brief SRD:   [15,8]  Subregion Enable/Disable.
 * bits[15,8] in MPU_RASR
 * Memory region subregions
 *    For any region of 256 bytes or larger, the MPU divides the region into
 *    eight equally-sized subregions. Setting a bit in the SRD field to 1
 *    disables the corresponding subregion:
 *      • The least significant bit of the field, MPU_RASR[8], controls the
 *        subregion with the lowest address range.
 *      • The most significant bit of the field, MPU_RASR[15], controls the
 *        subregion with the highest address range.
 *    For region sizes of 32, 64, and 128 bytes, the effect of setting one or
 *    more bits of the SRD field to 1 is UNPREDICTABLE.
 *    See Sub-region support on page B3-633 for more information.
 **/
#define MPU_RASR_DIS_SUBREGION(region) MPU_RASR |= (0x1 << (0x8 + region))
#define MPU_RASR_EN_SUBREGION(region) MPU_RASR &= ~(0x1 << (0x8 + region))

/**
 * @brief S bit-field
 * bit[18] in MPU_RASR
 * _a_ values in TEX,C & B fields are Shareable if the S bit is set to 1,
 *  Non-shareable if the S bit is set to 0
 **/
#define MPU_RASR_SET_S MPU_RASR |= (0x1 << 0x12) // 0x1
#define MPU_RASR_CLR_S MPU_RASR &= ~(0x1 << 0x12) // 0x0
#define MPU_RASR_READ_S (MPU_RASR >> 0x12) & 0x1

/**
 * @brief AP: Access permissions field Encoding:
 * bits[26,24] in MPU_RASR
 * Table B3-15
 * AP[2:0]|Priv.access|Unpriv.access|Notes |
 * =======|===========|=============|=========================================|
 * 000    |No access  |No access    |Any access generates a permission fault  |
 * 001    |Read/write |No access    |Privileged access only                   |
 * 010    |Read/write |Read-only    |Any unprivileged write - permission fault|
 * 011    |Read/write |Read/write   |Full access                              |
 * 100    |     UNPREDICTABLE       |Reserved                                 |
 * 101    |Read-only  |No access    |Privileged read-only                     |
 * 110    |Read-only  |Read-only    |Privileged and unprivileged read-only    |
 * 111    |Read-only  |Read-only    |Privileged and unprivileged read-only    |
 * ===========================================================================|
 *
 **/
typedef enum
{
  NO_RW = 0x0,
  PRIVL_RW = 0x1,
  PARTIAL_RW = 0x2,
  FULL_RW = 0x3,
  PRIVL_RO = 0x5,
  FULL_RO = 0x6,
  FULL_RO_2 = 0x7
} EAccPermEnc;
#define MPU_RASR_SET_AP(acc_perm_enc)                                          \
  MPU_RASR = (MPU_RASR & ~(0x7 << 0x18)) | ((acc_perm_enc & 0x7) << 0x18)
#define MPU_RASR_AP_NO_RW MPU_RASR &= ~(0x7 << 0x18)
#define MPU_RASR_AP_PRIVL_RW MPU_RASR_SET_AP(0x1)
#define MPU_RASR_AP_PARTIAL_RW MPU_RASR_SET_AP(0x2)
#define MPU_RASR_AP_FULL_RW MPU_RASR_SET_AP(0x3)
#define MPU_RASR_AP_PRIVL_RO MPU_RASR_SET_AP(0x5)
#define MPU_RASR_AP_FULL_RO MPU_RASR_SET_AP(0x6)
#define MPU_RASR_AP_FULL_RO2 MPU_RASR |= (0x7 << 0x18)

/**
 * @brief ATTRS:  The MPU Region Attribute fields.
 *                Defined in Region attribute control on (p.B3-641):
 *                [XN, AP[2:0], TEX[2:0], S, C, B]
 * bits[31,16] in MPU_RASR
 *
 * Table B3-13 TEX, C, B, and S Encoding: (OI = Outer & inner)
 * TEX|C|B|Memory type |Descr., or Normal region Cacheability |Shareable?   |
 * ===|=|=|============|======================================|=============|
 * 000|0|0|Strong-order|Strongly ordered                      |Shareable    |
 * 000|0|1|Device      |Shared device                         |Shareable    |
 * 000|1|0|Normal      |OI Write-Through, no write allocate   |S bit(a)     |
 * 000|1|1|Normal      |OI write-back, no write allocate      |S bit(a)     |
 * 001|0|0|Normal      |OI Non-cacheable                      |S bit(a)     |
 * 001|1|0|            |        IMPLEMENTATION DEFINED                      |
 * 001|1|1|Normal      |OI write-back; w/r allocate           |S bit(a)     |
 * 010|0|0|Device      |Non-shared device                     |Non-shareable|
 * 1BB|A|A|Normal      |Cached memory, with AA and BB         |S bit(a)     |
 *                     |indicating the inner and outer                      |
 *                     |Cacheability rules that must be exported on the bus.|
 *                     |See Table B3-14.                                    |
 *                     |BB = Outer policy,AA == Inner policy.               |
 * =========================================================================|
 * Table B3-14 Cache policy Encoding:
 * AA or BB subfield of {TEX,C,B} enc.  | Cacheability policy               |
 * =====================================|===================================|
 * 00                                   |Non-cacheable                      |
 * 01                                   |Write-Back, write and read allocate|
 * 10                                   |Write-Through, no write allocate   |
 * 11                                   |Write-Back, no write allocate      |
 * =========================================================================|
 * Region attribute control
 *    The MPU_RASR.ATTRS field defines the memory type, and where necessary the
 *    cacheable, shareable, and access and privilege properties of the memory
 *    region. The register diagram shows the subfields of this field, where:
 *      • The TEX[2:0], C, and B bits together indicate the memory type of the
 *        region, and:
 *          — For Normal memory, the cacheable properties of the region.
 *          — For Device memory, whether the region is shareable.See Table B3-13
 *            for the encoding of these bits.
 **/
typedef enum
{
  NON_CACHEABLE = 0x0,
  WRITEBACK_RW_ALOC = 0x1,
  WRITETHROUGH_NO_W_ALOC = 0x2,
  WRITEBACK_NO_W_ALOC = 0x3
} ECachePolicy;

/**
 * @brief TEX bit-field
 * bits[21,19] in MPU_RASR
 * _a_ Shareable if the S bit is set to 1, Non-shareable if the S bit is set to 0
 **/
typedef enum
{
  TEX_STRONG_ORDER = 0x0,
  TEX_SHARED_DEVICE = 0x0,
  TEX_a_OI_WT_NO_W_ALOC = 0x0,
  TEX_a_OI_WB_NO_W_ALOC = 0x0,
  TEX_a_OI_NON_CACHEABLE = 0x1,
  TEX_IMPL_DEF = 0x1,
  TEX_a_OI_WB_RW_ALOC = 0x1,
  TEX_NON_SHARED_DEVICE = 0x2,
  TEX_a_CMEM_NC = 0x4 | NON_CACHEABLE,
  TEX_a_CMEM_NC_WB_RW_ALOC = 0x4 | WRITEBACK_RW_ALOC,
  TEX_a_CMEM_NC_WT_NO_W_ALOC = 0x4 | WRITETHROUGH_NO_W_ALOC,
  TEX_a_CMEM_WB_NO_W_ALOC = 0x4 | WRITEBACK_NO_W_ALOC
} ETexEnc;

/** @brief Input should be of above type */
#define MPU_RASR_SET_ATTR_TEX(texenc)                                          \
  MPU_RASR = (MPU_RASR & ~(0x7 << 0x13)) | ((texenc & 0x7) << 0x13)
#define MPU_RASR_READ_ATTR_TEX (MPU_RASR >> 0x13) & 0x7

/**
 * @brief C bit-field
 * bit[17] in MPU_RASR
 * _a_ Shareable if the S bit is set to 1, Non-shareable if the S bit is set to 0
 **/
typedef enum
{
  C_STRONG_ORDER = 0x0,
  C_SHARED_DEVICE = 0x0,
  C_a_OI_WT_NO_W_ALOC = 0x1,
  C_a_OI_WB_NO_W_ALOC = 0x1,
  C_a_OI_NON_CACHEABLE = 0x0,
  C_IMPL_DEF = 0x1,
  C_a_OI_WB_RW_ALOC = 0x1,
  C_NON_SHARED_DEVICE = 0x0,
  C_a_CMEM_NC = ((NON_CACHEABLE >> 0x2) & 0x1),
  C_a_CMEM_NC_WB_RW_ALOC = ((WRITEBACK_RW_ALOC >> 0x2) & 0x1),
  C_a_CMEM_NC_WT_NO_W_ALOC = ((WRITETHROUGH_NO_W_ALOC >> 0x2) & 0x1),
  C_a_CMEM_WB_NO_W_ALOC = ((WRITEBACK_NO_W_ALOC >> 0x2) & 0x1)
} ECEnc;
/** @brief Input should be of above type */
#define MPU_RASR_SET_ATTR_C(cenc)                                              \
  MPU_RASR = (MPU_RASR & ~(0x1 << 0x11)) | ((cenc & 0x1) << 0x11)
#define MPU_RASR_READ_ATTR_C (MPU_RASR >> 0x11) & 0x7

/**
 * @brief B bit-field
 * bit[16] in MPU_RASR
 * _a_ Shareable if the S bit is set to 1, Non-shareable if the S bit is set to 0
 **/
typedef enum
{
  B_STRONG_ORDER = 0x0,
  B_SHARED_DEVICE = 0x0,
  B_a_OI_WT_NO_W_ALOC = 0x0,
  B_a_OI_WB_NO_W_ALOC = 0x0,
  B_a_OI_NON_CACHEABLE = 0x1,
  B_IMPL_DEF = 0x1,
  B_a_OI_WB_RW_ALOC = 0x1,
  B_NON_SHARED_DEVICE = 0x2,
  B_a_CMEM_NC = NON_CACHEABLE & 0x1,
  B_a_CMEM_NC_WB_RW_ALOC = WRITEBACK_RW_ALOC & 0x1,
  B_a_CMEM_NC_WT_NO_W_ALOC = WRITETHROUGH_NO_W_ALOC & 0x1,
  B_a_CMEM_WB_NO_W_ALOC = WRITEBACK_NO_W_ALOC & 0x1
} EBEnc;
/** @brief Input should be of above type */
#define MPU_RASR_SET_ATTR_B(benc)                                              \
  MPU_RASR = (MPU_RASR & ~(0x1 << 0x10)) | ((benc & 0x1) << 0x10)
#define MPU_RASR_READ_ATTR_B (MPU_RASR >> 0x10) & 0x7

/**
 * ==========================================================================
 * B3.5.10  MPU alias register support
 * The MPU_RBAR and MPU_RASR form a pair of words in the address range
 * 0xE000ED9C-0xE000EDA3.
 *
 * An ARMv7-M processor implements aliases of this address range at offsets of
 * +8 bytes, +16 bytes, and +24 bytes from the MPU_RBAR address of 0xE000ED9C,
 * as Table B3-11 on page B3-635 shows.
 *
 * Using these register aliases with the MPU_RBAR.REGION field, and the
 * MPU_RBAR.VALID field set to 1, software can use a stream of word writes to
 * update efficiently up to four regions, provided all the regions accessed are
 * in the range region 0 to region 15
 * p.642 0xE000EDA4  MPU_RBAR_A1 RW         -       Alias 1 of MPU_RBAR
 * p.642 0xE000EDA8  MPU_RASR_A1 RW         -       Alias 1 of MPU_RASR
 * p.642 0xE000EDAC  MPU_RBAR_A2 RW         -       Alias 2 of MPU_RBAR
 * p.642 0xE000EDB0  MPU_RASR_A2 RW         -       Alias 2 of MPU_RASR
 * p.642 0xE000EDB4  MPU_RBAR_A3 RW         -       Alias 3 of MPU_RBAR
 * p.642 0xE000EDB8  MPU_RASR_A3 RW         -       Alias 3 of MPU_RASR
 * ==========================================================================
 **/
#define MPU_RBAR_A1 MPU_BASE_ADDR.RBAR_A1
#define MPU_RASR_A1 MPU_BASE_ADDR.RASR_A1
#define MPU_RBAR_A2 MPU_BASE_ADDR.RBAR_A2
#define MPU_RASR_A2 MPU_BASE_ADDR.RASR_A2
#define MPU_RBAR_A3 MPU_BASE_ADDR.RBAR_A3
#define MPU_RASR_A3 MPU_BASE_ADDR.RASR_A3

/**
 * @brief Configure the MPU
 * @param
 **/
void
configure_mpu();

#endif // SYSTEM_MEMORY_MAP_H