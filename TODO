@DISCLAIMER! 
This todo is missing alot of finished entries. 
Some entries have been added after the fact and thus have been marked unknown on start/end timestamp.
It will be updated regularly from the point of upload to github. 

@NOTE: Maybe move to jira if things become too messy, but until then try to seperate with sections.  

// SYSTEM
✔ Get code compiled and sucessfully run a simple test program @done(21-02-08 11:40)
✔ Write code to handle the MPU @started(unknown) @done(unknown) @lasted()
✔ Move MPU code to a seperate file @started(21-04-12 13:49) @done(21-04-14 07:25) @lasted(1d17h36m5s)
✔ Set up interrupt vector @started(21-03-01 08:02) @done(21-03-02 18:19) @lasted(1d10h17m44s)
✔ Set up interrupt callbacks @started(21-03-01 12:20) @done(21-03-02 18:20) @lasted(1d6h38s)
☐ Set up a glopal pin array, will be used by the pin manager to notify which pins are already in use. Will need to keep track using arrays of pin_IDs @started(21-03-04 22:55)
☐ Call to 'MPU_RNR_REQ_REGIONS' hard faults the teensy and requires it to restart @started(24-03-25 23:25)


// HEAP
☐ Regarding heap; why is READ_HEAP_FREEBLOCKS() reading 0 free blocks? INVESTIGATE, URGENT! @started(21-02-11 00:02)
☐ Need to take into account partially free blocks when allocating memory @started(24-03-25 23:26)
✔ Fixed aligment causing crash in custom _malloc by reorganizing structure members to manually enforce alignment. @started(24-03-24 23:29) @done(24-03-25 23:30) @lasted(1d1m2s)
    - Making so we can allocate memory now with (some) impunity
✔ Fixed semantic bug in conditional statement in heap.c when finding free memory, which prevented it from stepping through all free memory blocks @started(24-03-24 23:30) @done(24-03-25 23:31) @lasted(1d1m6s)
✔ Made a number of changes in heap.c, most notably in '__find_mem__()' to fix some incorrect behaviours related to iterating memory blocks. @started(24-03-24 23:30) @done(24-03-25 23:31) @lasted(1d1m53s)
☐ Note in __find_mem__ to Accumulate all free partials of partial blocks and put into a special heap group or compact memory when it gets too fragmented @started(24-03-25 23:44)


// TIMERS
✔ Create a struct for managing timers @started(unknown) @done(unknown) @lasted()
✔ Fix timer manager to work properly with the different contexts @started(21-04-12 10:20) @done(21-04-12 13:48) @lasted(3h28m23s)

✔ Write code to handle PIT and GPT registers @started(unknown) @done(unknown) @lasted()
✔ PIT timers: Find out why they are not triggering the callback. Certainty is high that the issue lies with the callbacks. @done(24-03-25 23:47)
    Setting all the correct registers (I am pretty sure) and still nothing. I thought I had figured it out when I realized that 
    I had forgotten to tell the ccm to enable pit clocks, but it did not change the fact that the callbacks does not seem to be triggered
    I still need to find which register to set to tell it at which speed to run the PIT timer
    I am also quite certain that I have written some incorrect bitoperation macros for the pit and gpt registers 

    Ok so bitoperations have been fixed, and everything I have done seems to be in the correct order but it might be a power gating issue putting the clocks in inactive/disabled mode?
☐ PIT Timers: The timers only fire once then it stops firing. Need to investigate why @started(24-03-25 23:48)

// GLYPHS 4x4
✔ Glyphs 4x4 digits @started(21-02-17 01:32) @done(21-02-17 01:47) @lasted(15m46s)
✔ Glyphs 4x4 letters @started(21-02-17 01:33) @done(21-02-17 02:27) @lasted(54m14s)
✔ Glyphs 4x4 selected special characters @started(21-02-17 01:33) @done(21-03-02 18:18) @lasted(1w6d16h45m37s)
✔ Glyphs 4x4 defines to point to the glyphs @started(202x) @done(202x) @lasted(??)
☐ Glyphs 4x4 function of macro to split text properly

// GLYPHS 7x6
✔ Glyphs 7x6 digits @started(202x) @done(202x) @lasted(??)
✔ Glyphs 7x6 letters @started(202x) @done(202x) @lasted(??)
✔ Glyphs 7x6 selected special characters @started(202x) @done(202x) @lasted(??)
✔ Glyphs 7x6 defines to point to the glyphs @started(202x) @done(202x) @lasted(??)
☐ Glyphs 7x6 function of macro to split text properly

// GLYPHS 8x8
✔ Glyphs 8x8 digits @started(21-02-17 01:34) @done(21-03-08 15:40) @lasted(2w5d14h6m7s)
✔ Glyphs 8x8 letters @started(21-02-17 01:34) @done(21-03-08 15:40) @lasted(2w5d14h6m11s)
✔ Glyphs 8x8 selected special characters @started(21-02-17 01:34) @done(21-03-08 15:40) @lasted(2w5d14h6m14s)
✔ Glyphs 8x8 defines to point to the glyphs @started(202x) @done(202x) @lasted(??)
☐ Glyphs 8x8 function of macro to split text properly


// Printing/Display
☐ Need to write a structure to handle signal scheduling for the display startup routine @started(24-03-26 00:00)
☐ Stream the glyph-data to an actual file, and remove the dummy returns in aprintf.c (BACKLOG)